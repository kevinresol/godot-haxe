package gd;
extern class Label extends gd.Control {
	function new(?owner:Dynamic);
	function set_horizontal_alignment(p_alignment:gd.HorizontalAlignment):gd.HorizontalAlignment;
	function get_horizontal_alignment():gd.HorizontalAlignment;
	function set_vertical_alignment(p_alignment:gd.VerticalAlignment):gd.VerticalAlignment;
	function get_vertical_alignment():gd.VerticalAlignment;
	function set_text(p_text:std.String):std.String;
	function get_text():std.String;
	function set_label_settings(p_settings:gd.LabelSettings):gd.LabelSettings;
	function get_label_settings():gd.LabelSettings;
	function set_text_direction(p_direction:gd.control.TextDirection):gd.control.TextDirection;
	function get_text_direction():gd.control.TextDirection;
	function set_language(p_language:std.String):std.String;
	function get_language():std.String;
	function set_autowrap_mode(p_autowrap_mode:gd.textserver.AutowrapMode):gd.textserver.AutowrapMode;
	function get_autowrap_mode():gd.textserver.AutowrapMode;
	function set_justification_flags(p_justification_flags:Int):Int;
	function get_justification_flags():Int;
	function set_clip_text(p_enable:Bool):Bool;
	function is_clipping_text():Bool;
	function set_tab_stops(p_tab_stops:gd.PackedFloat32Array):gd.PackedFloat32Array;
	function get_tab_stops():gd.PackedFloat32Array;
	function set_text_overrun_behavior(p_overrun_behavior:gd.textserver.OverrunBehavior):gd.textserver.OverrunBehavior;
	function get_text_overrun_behavior():gd.textserver.OverrunBehavior;
	function set_ellipsis_char(p_char:std.String):std.String;
	function get_ellipsis_char():std.String;
	function set_uppercase(p_enable:Bool):Bool;
	function is_uppercase():Bool;
	function get_line_height(?p_line:Int = -1):Int;
	function get_line_count():Int;
	function get_visible_line_count():Int;
	function get_total_character_count():Int;
	function set_visible_characters(p_amount:Int):Int;
	function get_visible_characters():Int;
	function get_visible_characters_behavior():gd.textserver.VisibleCharactersBehavior;
	function set_visible_characters_behavior(p_behavior:gd.textserver.VisibleCharactersBehavior):gd.textserver.VisibleCharactersBehavior;
	function set_visible_ratio(p_ratio:Float):Float;
	function get_visible_ratio():Float;
	function set_lines_skipped(p_lines_skipped:Int):Int;
	function get_lines_skipped():Int;
	function set_max_lines_visible(p_lines_visible:Int):Int;
	function get_max_lines_visible():Int;
	function set_structured_text_bidi_override(p_parser:gd.textserver.StructuredTextParser):gd.textserver.StructuredTextParser;
	function get_structured_text_bidi_override():gd.textserver.StructuredTextParser;
	function set_structured_text_bidi_override_options(p_args:gd.Array):gd.Array;
	function get_structured_text_bidi_override_options():gd.Array;
	function get_character_bounds(p_pos:Int):gd.Rect2;
	var text(get, set) : std.String;
	var label_settings(get, set) : gd.LabelSettings;
	var horizontal_alignment(get, set) : gd.HorizontalAlignment;
	var vertical_alignment(get, set) : gd.VerticalAlignment;
	var autowrap_mode(get, set) : gd.textserver.AutowrapMode;
	var justification_flags(get, set) : Int;
	var clip_text(get, set) : Bool;
	function get_clip_text():Bool;
	var text_overrun_behavior(get, set) : gd.textserver.OverrunBehavior;
	var ellipsis_char(get, set) : std.String;
	var uppercase(get, set) : Bool;
	function get_uppercase():Bool;
	var tab_stops(get, set) : gd.PackedFloat32Array;
	var lines_skipped(get, set) : Int;
	var max_lines_visible(get, set) : Int;
	var visible_characters(get, set) : Int;
	var visible_characters_behavior(get, set) : gd.textserver.VisibleCharactersBehavior;
	var visible_ratio(get, set) : Float;
	var text_direction(get, set) : gd.control.TextDirection;
	var language(get, set) : std.String;
	var structured_text_bidi_override(get, set) : gd.textserver.StructuredTextParser;
	var structured_text_bidi_override_options(get, set) : gd.Array;
}