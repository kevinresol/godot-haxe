package gd;
extern class Skeleton3D extends gd.Node3D {
	function new(?owner:Dynamic);
	function add_bone(p_name:std.String):Int;
	function find_bone(p_name:std.String):Int;
	function get_bone_name(p_bone_idx:Int):std.String;
	function set_bone_name(p_bone_idx:Int, p_name:std.String):Void;
	function get_concatenated_bone_names():std.String;
	function get_bone_parent(p_bone_idx:Int):Int;
	function set_bone_parent(p_bone_idx:Int, p_parent_idx:Int):Void;
	function get_bone_count():Int;
	function get_version():Int;
	function unparent_bone_and_rest(p_bone_idx:Int):Void;
	function get_bone_children(p_bone_idx:Int):gd.PackedInt32Array;
	function get_parentless_bones():gd.PackedInt32Array;
	function create_skin_from_rest_transforms():gd.Skin;
	function register_skin(p_skin:gd.Skin):gd.SkinReference;
	function localize_rests():Void;
	function clear_bones():Void;
	function set_bone_pose_position(p_bone_idx:Int, p_position:gd.Vector3):Void;
	function set_bone_pose_rotation(p_bone_idx:Int, p_rotation:gd.Quaternion):Void;
	function set_bone_pose_scale(p_bone_idx:Int, p_scale:gd.Vector3):Void;
	function get_bone_pose_position(p_bone_idx:Int):gd.Vector3;
	function get_bone_pose_rotation(p_bone_idx:Int):gd.Quaternion;
	function get_bone_pose_scale(p_bone_idx:Int):gd.Vector3;
	function reset_bone_pose(p_bone_idx:Int):Void;
	function reset_bone_poses():Void;
	function is_bone_enabled(p_bone_idx:Int):Bool;
	function set_bone_enabled(p_bone_idx:Int, ?p_enabled:Bool):Void;
	function force_update_all_bone_transforms():Void;
	function force_update_bone_child_transform(p_bone_idx:Int):Void;
	function set_motion_scale(p_motion_scale:Float):Float;
	function get_motion_scale():Float;
	function set_show_rest_only(p_enabled:Bool):Bool;
	function is_show_rest_only():Bool;
	function set_modifier_callback_mode_process(p_mode:gd.skeleton3d.ModifierCallbackModeProcess):gd.skeleton3d.ModifierCallbackModeProcess;
	function get_modifier_callback_mode_process():gd.skeleton3d.ModifierCallbackModeProcess;
	function clear_bones_global_pose_override():Void;
	function set_animate_physical_bones(p_enabled:Bool):Bool;
	function get_animate_physical_bones():Bool;
	function physical_bones_stop_simulation():Void;
	function physical_bones_add_collision_exception(p_exception:gd.RID):Void;
	function physical_bones_remove_collision_exception(p_exception:gd.RID):Void;
	var motion_scale(get, set) : Float;
	var show_rest_only(get, set) : Bool;
	function get_show_rest_only():Bool;
	var modifier_callback_mode_process(get, set) : gd.skeleton3d.ModifierCallbackModeProcess;
	var animate_physical_bones(get, set) : Bool;
}