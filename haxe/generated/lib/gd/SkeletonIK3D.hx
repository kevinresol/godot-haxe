package gd;
extern class SkeletonIK3D extends gd.SkeletonModifier3D {
	function new(?owner:Dynamic);
	function set_root_bone(p_root_bone:std.String):std.String;
	function get_root_bone():std.String;
	function set_tip_bone(p_tip_bone:std.String):std.String;
	function get_tip_bone():std.String;
	function set_target_node(p_node:std.String):std.String;
	function get_target_node():std.String;
	function set_override_tip_basis(p_override:Bool):Bool;
	function is_override_tip_basis():Bool;
	function set_use_magnet(p_use:Bool):Bool;
	function is_using_magnet():Bool;
	function set_magnet_position(p_local_position:gd.Vector3):Void;
	function get_magnet_position():gd.Vector3;
	function get_parent_skeleton():gd.Skeleton3D;
	function is_running():Bool;
	function set_min_distance(p_min_distance:Float):Float;
	function get_min_distance():Float;
	function set_max_iterations(p_iterations:Int):Int;
	function get_max_iterations():Int;
	function start(?p_one_time:Bool):Void;
	function stop():Void;
	function set_interpolation(p_interpolation:Float):Float;
	function get_interpolation():Float;
	var root_bone(get, set) : std.String;
	var tip_bone(get, set) : std.String;
	var override_tip_basis(get, set) : Bool;
	function get_override_tip_basis():Bool;
	var use_magnet(get, set) : Bool;
	function get_use_magnet():Bool;
	var magnet(get, set) : gd.Vector3;
	function get_magnet():gd.Vector3;
	function set_magnet(v:gd.Vector3):gd.Vector3;
	var target_node(get, set) : std.String;
	var min_distance(get, set) : Float;
	var max_iterations(get, set) : Int;
	var interpolation(get, set) : Float;
}