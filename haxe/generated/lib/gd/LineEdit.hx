package gd;
extern class LineEdit extends gd.Control {
	function new(?owner:Dynamic);
	function set_horizontal_alignment(p_alignment:gd.HorizontalAlignment):Void;
	function get_horizontal_alignment():gd.HorizontalAlignment;
	function clear():Void;
	function select(?p_from:Int = 0, ?p_to:Int = -1):Void;
	function select_all():Void;
	function deselect():Void;
	function has_selection():Bool;
	function get_selected_text():std.String;
	function get_selection_from_column():Int;
	function get_selection_to_column():Int;
	function set_text(p_text:std.String):std.String;
	function get_text():std.String;
	function get_draw_control_chars():Bool;
	function set_draw_control_chars(p_enable:Bool):Bool;
	function set_text_direction(p_direction:gd.control.TextDirection):gd.control.TextDirection;
	function get_text_direction():gd.control.TextDirection;
	function set_language(p_language:std.String):std.String;
	function get_language():std.String;
	function set_structured_text_bidi_override(p_parser:gd.textserver.StructuredTextParser):gd.textserver.StructuredTextParser;
	function get_structured_text_bidi_override():gd.textserver.StructuredTextParser;
	function set_structured_text_bidi_override_options(p_args:gd.Array):gd.Array;
	function get_structured_text_bidi_override_options():gd.Array;
	function set_placeholder(p_text:std.String):Void;
	function get_placeholder():std.String;
	function set_caret_column(p_position:Int):Int;
	function get_caret_column():Int;
	function get_scroll_offset():Float;
	function set_expand_to_text_length_enabled(p_enabled:Bool):Void;
	function is_expand_to_text_length_enabled():Bool;
	function set_caret_blink_enabled(p_enabled:Bool):Void;
	function is_caret_blink_enabled():Bool;
	function set_caret_mid_grapheme_enabled(p_enabled:Bool):Void;
	function is_caret_mid_grapheme_enabled():Bool;
	function set_caret_force_displayed(p_enabled:Bool):Bool;
	function is_caret_force_displayed():Bool;
	function set_caret_blink_interval(p_interval:Float):Float;
	function get_caret_blink_interval():Float;
	function set_max_length(p_chars:Int):Int;
	function get_max_length():Int;
	function insert_text_at_caret(p_text:std.String):Void;
	function delete_char_at_caret():Void;
	function delete_text(p_from_column:Int, p_to_column:Int):Void;
	function set_editable(p_enabled:Bool):Bool;
	function is_editable():Bool;
	function set_secret(p_enabled:Bool):Bool;
	function is_secret():Bool;
	function set_secret_character(p_character:std.String):std.String;
	function get_secret_character():std.String;
	function menu_option(p_option:Int):Void;
	function get_menu():gd.PopupMenu;
	function is_menu_visible():Bool;
	function set_context_menu_enabled(p_enable:Bool):Bool;
	function is_context_menu_enabled():Bool;
	function set_virtual_keyboard_enabled(p_enable:Bool):Bool;
	function is_virtual_keyboard_enabled():Bool;
	function set_virtual_keyboard_type(p_type:gd.lineedit.VirtualKeyboardType):gd.lineedit.VirtualKeyboardType;
	function get_virtual_keyboard_type():gd.lineedit.VirtualKeyboardType;
	function set_clear_button_enabled(p_enable:Bool):Bool;
	function is_clear_button_enabled():Bool;
	function set_shortcut_keys_enabled(p_enable:Bool):Bool;
	function is_shortcut_keys_enabled():Bool;
	function set_middle_mouse_paste_enabled(p_enable:Bool):Bool;
	function is_middle_mouse_paste_enabled():Bool;
	function set_selecting_enabled(p_enable:Bool):Bool;
	function is_selecting_enabled():Bool;
	function set_deselect_on_focus_loss_enabled(p_enable:Bool):Bool;
	function is_deselect_on_focus_loss_enabled():Bool;
	function set_drag_and_drop_selection_enabled(p_enable:Bool):Bool;
	function is_drag_and_drop_selection_enabled():Bool;
	function set_right_icon(p_icon:gd.Texture2D):gd.Texture2D;
	function get_right_icon():gd.Texture2D;
	function set_flat(p_enabled:Bool):Bool;
	function is_flat():Bool;
	function set_select_all_on_focus(p_enabled:Bool):Bool;
	function is_select_all_on_focus():Bool;
	var text(get, set) : std.String;
	var placeholder_text(get, set) : std.String;
	function get_placeholder_text():std.String;
	function set_placeholder_text(v:std.String):std.String;
	var alignment(get, set) : gd.HorizontalAlignment;
	function get_alignment():gd.HorizontalAlignment;
	function set_alignment(v:gd.HorizontalAlignment):gd.HorizontalAlignment;
	var max_length(get, set) : Int;
	var editable(get, set) : Bool;
	function get_editable():Bool;
	var expand_to_text_length(get, set) : Bool;
	function get_expand_to_text_length():Bool;
	function set_expand_to_text_length(v:Bool):Bool;
	var context_menu_enabled(get, set) : Bool;
	function get_context_menu_enabled():Bool;
	var virtual_keyboard_enabled(get, set) : Bool;
	function get_virtual_keyboard_enabled():Bool;
	var virtual_keyboard_type(get, set) : gd.lineedit.VirtualKeyboardType;
	var clear_button_enabled(get, set) : Bool;
	function get_clear_button_enabled():Bool;
	var shortcut_keys_enabled(get, set) : Bool;
	function get_shortcut_keys_enabled():Bool;
	var middle_mouse_paste_enabled(get, set) : Bool;
	function get_middle_mouse_paste_enabled():Bool;
	var selecting_enabled(get, set) : Bool;
	function get_selecting_enabled():Bool;
	var deselect_on_focus_loss_enabled(get, set) : Bool;
	function get_deselect_on_focus_loss_enabled():Bool;
	var drag_and_drop_selection_enabled(get, set) : Bool;
	function get_drag_and_drop_selection_enabled():Bool;
	var right_icon(get, set) : gd.Texture2D;
	var flat(get, set) : Bool;
	function get_flat():Bool;
	var draw_control_chars(get, set) : Bool;
	var select_all_on_focus(get, set) : Bool;
	function get_select_all_on_focus():Bool;
	var caret_blink(get, set) : Bool;
	function get_caret_blink():Bool;
	function set_caret_blink(v:Bool):Bool;
	var caret_blink_interval(get, set) : Float;
	var caret_column(get, set) : Int;
	var caret_force_displayed(get, set) : Bool;
	function get_caret_force_displayed():Bool;
	var caret_mid_grapheme(get, set) : Bool;
	function get_caret_mid_grapheme():Bool;
	function set_caret_mid_grapheme(v:Bool):Bool;
	var secret(get, set) : Bool;
	function get_secret():Bool;
	var secret_character(get, set) : std.String;
	var text_direction(get, set) : gd.control.TextDirection;
	var language(get, set) : std.String;
	var structured_text_bidi_override(get, set) : gd.textserver.StructuredTextParser;
	var structured_text_bidi_override_options(get, set) : gd.Array;
}