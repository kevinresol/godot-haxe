package gd;
extern class AudioStreamPlayer3D extends gd.Node3D {
	function new(?owner:Dynamic);
	function set_stream(p_stream:gd.AudioStream):gd.AudioStream;
	function get_stream():gd.AudioStream;
	function set_volume_db(p_volume_db:Float):Float;
	function get_volume_db():Float;
	function set_unit_size(p_unit_size:Float):Float;
	function get_unit_size():Float;
	function set_max_db(p_max_db:Float):Float;
	function get_max_db():Float;
	function set_pitch_scale(p_pitch_scale:Float):Float;
	function get_pitch_scale():Float;
	function play(?p_from_position:Float = 0.):Void;
	function seek(p_to_position:Float):Void;
	function stop():Void;
	function is_playing():Bool;
	function get_playback_position():Float;
	function set_bus(p_bus:std.String):std.String;
	function get_bus():std.String;
	function set_autoplay(p_enable:Bool):Bool;
	function is_autoplay_enabled():Bool;
	function set_max_distance(p_meters:Float):Float;
	function get_max_distance():Float;
	function set_area_mask(p_mask:Int):Int;
	function get_area_mask():Int;
	function set_emission_angle(p_degrees:Float):Void;
	function get_emission_angle():Float;
	function set_emission_angle_enabled(p_enabled:Bool):Bool;
	function is_emission_angle_enabled():Bool;
	function set_emission_angle_filter_attenuation_db(p_db:Float):Float;
	function get_emission_angle_filter_attenuation_db():Float;
	function set_attenuation_filter_cutoff_hz(p_degrees:Float):Float;
	function get_attenuation_filter_cutoff_hz():Float;
	function set_attenuation_filter_db(p_db:Float):Float;
	function get_attenuation_filter_db():Float;
	function set_attenuation_model(p_model:gd.audiostreamplayer3d.AttenuationModel):gd.audiostreamplayer3d.AttenuationModel;
	function get_attenuation_model():gd.audiostreamplayer3d.AttenuationModel;
	function set_doppler_tracking(p_mode:gd.audiostreamplayer3d.DopplerTracking):gd.audiostreamplayer3d.DopplerTracking;
	function get_doppler_tracking():gd.audiostreamplayer3d.DopplerTracking;
	function set_stream_paused(p_pause:Bool):Bool;
	function get_stream_paused():Bool;
	function set_max_polyphony(p_max_polyphony:Int):Int;
	function get_max_polyphony():Int;
	function set_panning_strength(p_panning_strength:Float):Float;
	function get_panning_strength():Float;
	function has_stream_playback():Bool;
	function get_stream_playback():gd.AudioStreamPlayback;
	function set_playback_type(p_playback_type:gd.audioserver.PlaybackType):gd.audioserver.PlaybackType;
	function get_playback_type():gd.audioserver.PlaybackType;
	var stream(get, set) : gd.AudioStream;
	var attenuation_model(get, set) : gd.audiostreamplayer3d.AttenuationModel;
	var volume_db(get, set) : Float;
	var unit_size(get, set) : Float;
	var max_db(get, set) : Float;
	var pitch_scale(get, set) : Float;
	var autoplay(get, set) : Bool;
	function get_autoplay():Bool;
	var stream_paused(get, set) : Bool;
	var max_distance(get, set) : Float;
	var max_polyphony(get, set) : Int;
	var panning_strength(get, set) : Float;
	var bus(get, set) : std.String;
	var area_mask(get, set) : Int;
	var playback_type(get, set) : gd.audioserver.PlaybackType;
	var emission_angle_enabled(get, set) : Bool;
	function get_emission_angle_enabled():Bool;
	var emission_angle_degrees(get, set) : Float;
	function get_emission_angle_degrees():Float;
	function set_emission_angle_degrees(v:Float):Float;
	var emission_angle_filter_attenuation_db(get, set) : Float;
	var attenuation_filter_cutoff_hz(get, set) : Float;
	var attenuation_filter_db(get, set) : Float;
	var doppler_tracking(get, set) : gd.audiostreamplayer3d.DopplerTracking;
}