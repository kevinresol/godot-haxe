package gd;
extern class HTTPRequest extends gd.Node {
	function new(?owner:Dynamic);
	function cancel_request():Void;
	function set_tls_options(p_client_options:gd.TLSOptions):Void;
	function get_http_client_status():gd.httpclient.Status;
	function set_use_threads(p_enable:Bool):Bool;
	function is_using_threads():Bool;
	function set_accept_gzip(p_enable:Bool):Bool;
	function is_accepting_gzip():Bool;
	function set_body_size_limit(p_bytes:Int):Int;
	function get_body_size_limit():Int;
	function set_max_redirects(p_amount:Int):Int;
	function get_max_redirects():Int;
	function set_download_file(p_path:std.String):std.String;
	function get_download_file():std.String;
	function get_downloaded_bytes():Int;
	function get_body_size():Int;
	function set_timeout(p_timeout:Float):Float;
	function get_timeout():Float;
	function set_download_chunk_size(p_chunk_size:Int):Int;
	function get_download_chunk_size():Int;
	function set_http_proxy(p_host:std.String, p_port:Int):Void;
	function set_https_proxy(p_host:std.String, p_port:Int):Void;
	var download_file(get, set) : std.String;
	var download_chunk_size(get, set) : Int;
	var use_threads(get, set) : Bool;
	function get_use_threads():Bool;
	var accept_gzip(get, set) : Bool;
	function get_accept_gzip():Bool;
	var body_size_limit(get, set) : Int;
	var max_redirects(get, set) : Int;
	var timeout(get, set) : Float;
}