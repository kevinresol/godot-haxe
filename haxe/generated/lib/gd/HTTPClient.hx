package gd;
extern class HTTPClient extends gd.RefCounted {
	function new(?owner:Dynamic);
	function set_connection(p_connection:gd.StreamPeer):gd.StreamPeer;
	function get_connection():gd.StreamPeer;
	function request_raw(p_method:gd.httpclient.Method, p_url:std.String, p_headers:gd.PackedStringArray, p_body:gd.PackedByteArray):gd.Error;
	function request(p_method:gd.httpclient.Method, p_url:std.String, p_headers:gd.PackedStringArray, ?p_body:std.String = "\"\""):gd.Error;
	function close():Void;
	function has_response():Bool;
	function is_response_chunked():Bool;
	function get_response_code():Int;
	function get_response_headers():gd.PackedStringArray;
	function get_response_headers_as_dictionary():gd.Dictionary;
	function get_response_body_length():Int;
	function read_response_body_chunk():gd.PackedByteArray;
	function set_read_chunk_size(p_bytes:Int):Int;
	function get_read_chunk_size():Int;
	function set_blocking_mode(p_enabled:Bool):Void;
	function is_blocking_mode_enabled():Bool;
	function get_status():gd.httpclient.Status;
	function poll():gd.Error;
	function set_http_proxy(p_host:std.String, p_port:Int):Void;
	function set_https_proxy(p_host:std.String, p_port:Int):Void;
	function query_string_from_dict(p_fields:gd.Dictionary):std.String;
	var blocking_mode_enabled(get, set) : Bool;
	function get_blocking_mode_enabled():Bool;
	function set_blocking_mode_enabled(v:Bool):Bool;
	var connection(get, set) : gd.StreamPeer;
	var read_chunk_size(get, set) : Int;
}