package gd;
extern class RigidBody3D extends gd.PhysicsBody3D {
	function new(?owner:Dynamic);
	function _integrate_forces(p_state:gd.PhysicsDirectBodyState3D):Void;
	function set_mass(p_mass:Float):Float;
	function get_mass():Float;
	function set_inertia(p_inertia:gd.Vector3):gd.Vector3;
	function get_inertia():gd.Vector3;
	function set_center_of_mass_mode(p_mode:gd.rigidbody3d.CenterOfMassMode):gd.rigidbody3d.CenterOfMassMode;
	function get_center_of_mass_mode():gd.rigidbody3d.CenterOfMassMode;
	function set_center_of_mass(p_center_of_mass:gd.Vector3):gd.Vector3;
	function get_center_of_mass():gd.Vector3;
	function set_physics_material_override(p_physics_material_override:gd.PhysicsMaterial):gd.PhysicsMaterial;
	function get_physics_material_override():gd.PhysicsMaterial;
	function set_linear_velocity(p_linear_velocity:gd.Vector3):gd.Vector3;
	function get_linear_velocity():gd.Vector3;
	function set_angular_velocity(p_angular_velocity:gd.Vector3):gd.Vector3;
	function get_angular_velocity():gd.Vector3;
	function set_gravity_scale(p_gravity_scale:Float):Float;
	function get_gravity_scale():Float;
	function set_linear_damp_mode(p_linear_damp_mode:gd.rigidbody3d.DampMode):gd.rigidbody3d.DampMode;
	function get_linear_damp_mode():gd.rigidbody3d.DampMode;
	function set_angular_damp_mode(p_angular_damp_mode:gd.rigidbody3d.DampMode):gd.rigidbody3d.DampMode;
	function get_angular_damp_mode():gd.rigidbody3d.DampMode;
	function set_linear_damp(p_linear_damp:Float):Float;
	function get_linear_damp():Float;
	function set_angular_damp(p_angular_damp:Float):Float;
	function get_angular_damp():Float;
	function set_max_contacts_reported(p_amount:Int):Int;
	function get_max_contacts_reported():Int;
	function get_contact_count():Int;
	function set_use_custom_integrator(p_enable:Bool):Void;
	function is_using_custom_integrator():Bool;
	function set_contact_monitor(p_enabled:Bool):Bool;
	function is_contact_monitor_enabled():Bool;
	function set_use_continuous_collision_detection(p_enable:Bool):Void;
	function is_using_continuous_collision_detection():Bool;
	function set_axis_velocity(p_axis_velocity:gd.Vector3):Void;
	function apply_central_impulse(p_impulse:gd.Vector3):Void;
	function apply_impulse(p_impulse:gd.Vector3, ?p_position:gd.Vector3):Void;
	function apply_torque_impulse(p_impulse:gd.Vector3):Void;
	function apply_central_force(p_force:gd.Vector3):Void;
	function apply_force(p_force:gd.Vector3, ?p_position:gd.Vector3):Void;
	function apply_torque(p_torque:gd.Vector3):Void;
	function add_constant_central_force(p_force:gd.Vector3):Void;
	function add_constant_force(p_force:gd.Vector3, ?p_position:gd.Vector3):Void;
	function add_constant_torque(p_torque:gd.Vector3):Void;
	function set_constant_force(p_force:gd.Vector3):gd.Vector3;
	function get_constant_force():gd.Vector3;
	function set_constant_torque(p_torque:gd.Vector3):gd.Vector3;
	function get_constant_torque():gd.Vector3;
	function set_sleeping(p_sleeping:Bool):Bool;
	function is_sleeping():Bool;
	function set_can_sleep(p_able_to_sleep:Bool):Bool;
	function is_able_to_sleep():Bool;
	function set_lock_rotation_enabled(p_lock_rotation:Bool):Void;
	function is_lock_rotation_enabled():Bool;
	function set_freeze_enabled(p_freeze_mode:Bool):Void;
	function is_freeze_enabled():Bool;
	function set_freeze_mode(p_freeze_mode:gd.rigidbody3d.FreezeMode):gd.rigidbody3d.FreezeMode;
	function get_freeze_mode():gd.rigidbody3d.FreezeMode;
	var mass(get, set) : Float;
	var physics_material_override(get, set) : gd.PhysicsMaterial;
	var gravity_scale(get, set) : Float;
	var center_of_mass_mode(get, set) : gd.rigidbody3d.CenterOfMassMode;
	var center_of_mass(get, set) : gd.Vector3;
	var inertia(get, set) : gd.Vector3;
	var sleeping(get, set) : Bool;
	function get_sleeping():Bool;
	var can_sleep(get, set) : Bool;
	function get_can_sleep():Bool;
	var lock_rotation(get, set) : Bool;
	function get_lock_rotation():Bool;
	function set_lock_rotation(v:Bool):Bool;
	var freeze(get, set) : Bool;
	function get_freeze():Bool;
	function set_freeze(v:Bool):Bool;
	var freeze_mode(get, set) : gd.rigidbody3d.FreezeMode;
	var custom_integrator(get, set) : Bool;
	function get_custom_integrator():Bool;
	function set_custom_integrator(v:Bool):Bool;
	var continuous_cd(get, set) : Bool;
	function get_continuous_cd():Bool;
	function set_continuous_cd(v:Bool):Bool;
	var contact_monitor(get, set) : Bool;
	function get_contact_monitor():Bool;
	var max_contacts_reported(get, set) : Int;
	var linear_velocity(get, set) : gd.Vector3;
	var linear_damp_mode(get, set) : gd.rigidbody3d.DampMode;
	var linear_damp(get, set) : Float;
	var angular_velocity(get, set) : gd.Vector3;
	var angular_damp_mode(get, set) : gd.rigidbody3d.DampMode;
	var angular_damp(get, set) : Float;
	var constant_force(get, set) : gd.Vector3;
	var constant_torque(get, set) : gd.Vector3;
}