package gd;
extern class RichTextLabel extends gd.Control {
	function new(?owner:Dynamic);
	function get_parsed_text():std.String;
	function add_text(p_text:std.String):Void;
	function set_text(p_text:std.String):std.String;
	function newline():Void;
	function remove_paragraph(p_paragraph:Int, ?p_no_invalidate:Bool = false):Bool;
	function invalidate_paragraph(p_paragraph:Int):Bool;
	function push_font(p_font:gd.Font, ?p_font_size:Int = 0):Void;
	function push_font_size(p_font_size:Int):Void;
	function push_normal():Void;
	function push_bold():Void;
	function push_bold_italics():Void;
	function push_italics():Void;
	function push_mono():Void;
	function push_color(p_color:gd.Color):Void;
	function push_outline_size(p_outline_size:Int):Void;
	function push_outline_color(p_color:gd.Color):Void;
	function push_indent(p_level:Int):Void;
	function push_list(p_level:Int, p_type:gd.richtextlabel.ListType, p_capitalize:Bool, ?p_bullet:std.String = "\"â€¢\""):Void;
	function push_hint(p_description:std.String):Void;
	function push_language(p_language:std.String):Void;
	function push_underline():Void;
	function push_strikethrough():Void;
	function set_table_column_expand(p_column:Int, p_expand:Bool, ?p_ratio:Int = 1):Void;
	function set_cell_row_background_color(p_odd_row_bg:gd.Color, p_even_row_bg:gd.Color):Void;
	function set_cell_border_color(p_color:gd.Color):Void;
	function set_cell_size_override(p_min_size:gd.Vector2, p_max_size:gd.Vector2):Void;
	function set_cell_padding(p_padding:gd.Rect2):Void;
	function push_cell():Void;
	function push_fgcolor(p_fgcolor:gd.Color):Void;
	function push_bgcolor(p_bgcolor:gd.Color):Void;
	function push_customfx(p_effect:gd.RichTextEffect, p_env:gd.Dictionary):Void;
	function push_context():Void;
	function pop_context():Void;
	function pop():Void;
	function pop_all():Void;
	function clear():Void;
	function set_structured_text_bidi_override(p_parser:gd.textserver.StructuredTextParser):gd.textserver.StructuredTextParser;
	function get_structured_text_bidi_override():gd.textserver.StructuredTextParser;
	function set_structured_text_bidi_override_options(p_args:gd.Array):gd.Array;
	function get_structured_text_bidi_override_options():gd.Array;
	function set_text_direction(p_direction:gd.control.TextDirection):gd.control.TextDirection;
	function get_text_direction():gd.control.TextDirection;
	function set_language(p_language:std.String):std.String;
	function get_language():std.String;
	function set_autowrap_mode(p_autowrap_mode:gd.textserver.AutowrapMode):gd.textserver.AutowrapMode;
	function get_autowrap_mode():gd.textserver.AutowrapMode;
	function set_meta_underline(p_enable:Bool):Void;
	function is_meta_underlined():Bool;
	function set_hint_underline(p_enable:Bool):Void;
	function is_hint_underlined():Bool;
	function set_scroll_active(p_active:Bool):Bool;
	function is_scroll_active():Bool;
	function set_scroll_follow(p_follow:Bool):Void;
	function is_scroll_following():Bool;
	function get_v_scroll_bar():gd.VScrollBar;
	function scroll_to_line(p_line:Int):Void;
	function scroll_to_paragraph(p_paragraph:Int):Void;
	function scroll_to_selection():Void;
	function set_tab_size(p_spaces:Int):Int;
	function get_tab_size():Int;
	function set_fit_content(p_enabled:Bool):Bool;
	function is_fit_content_enabled():Bool;
	function set_selection_enabled(p_enabled:Bool):Bool;
	function is_selection_enabled():Bool;
	function set_context_menu_enabled(p_enabled:Bool):Bool;
	function is_context_menu_enabled():Bool;
	function set_shortcut_keys_enabled(p_enabled:Bool):Bool;
	function is_shortcut_keys_enabled():Bool;
	function set_deselect_on_focus_loss_enabled(p_enable:Bool):Bool;
	function is_deselect_on_focus_loss_enabled():Bool;
	function set_drag_and_drop_selection_enabled(p_enable:Bool):Bool;
	function is_drag_and_drop_selection_enabled():Bool;
	function get_selection_from():Int;
	function get_selection_to():Int;
	function select_all():Void;
	function get_selected_text():std.String;
	function deselect():Void;
	function parse_bbcode(p_bbcode:std.String):Void;
	function append_text(p_bbcode:std.String):Void;
	function get_text():std.String;
	function is_ready():Bool;
	function set_threaded(p_threaded:Bool):Bool;
	function is_threaded():Bool;
	function set_progress_bar_delay(p_delay_ms:Int):Int;
	function get_progress_bar_delay():Int;
	function set_visible_characters(p_amount:Int):Int;
	function get_visible_characters():Int;
	function get_visible_characters_behavior():gd.textserver.VisibleCharactersBehavior;
	function set_visible_characters_behavior(p_behavior:gd.textserver.VisibleCharactersBehavior):gd.textserver.VisibleCharactersBehavior;
	function set_visible_ratio(p_ratio:Float):Float;
	function get_visible_ratio():Float;
	function get_character_line(p_character:Int):Int;
	function get_character_paragraph(p_character:Int):Int;
	function get_total_character_count():Int;
	function set_use_bbcode(p_enable:Bool):Void;
	function is_using_bbcode():Bool;
	function get_line_count():Int;
	function get_visible_line_count():Int;
	function get_paragraph_count():Int;
	function get_visible_paragraph_count():Int;
	function get_content_height():Int;
	function get_content_width():Int;
	function get_line_offset(p_line:Int):Float;
	function get_paragraph_offset(p_paragraph:Int):Float;
	function parse_expressions_for_values(p_expressions:gd.PackedStringArray):gd.Dictionary;
	function set_effects(p_effects:gd.Array):Void;
	function get_effects():gd.Array;
	function install_effect(p_effect:gd.Variant):Void;
	function get_menu():gd.PopupMenu;
	function is_menu_visible():Bool;
	function menu_option(p_option:Int):Void;
	var bbcode_enabled(get, set) : Bool;
	function get_bbcode_enabled():Bool;
	function set_bbcode_enabled(v:Bool):Bool;
	var text(get, set) : std.String;
	var fit_content(get, set) : Bool;
	function get_fit_content():Bool;
	var scroll_active(get, set) : Bool;
	function get_scroll_active():Bool;
	var scroll_following(get, set) : Bool;
	function get_scroll_following():Bool;
	function set_scroll_following(v:Bool):Bool;
	var autowrap_mode(get, set) : gd.textserver.AutowrapMode;
	var tab_size(get, set) : Int;
	var context_menu_enabled(get, set) : Bool;
	function get_context_menu_enabled():Bool;
	var shortcut_keys_enabled(get, set) : Bool;
	function get_shortcut_keys_enabled():Bool;
	var custom_effects(get, set) : gd.Array;
	function get_custom_effects():gd.Array;
	function set_custom_effects(v:gd.Array):gd.Array;
	var meta_underlined(get, set) : Bool;
	function get_meta_underlined():Bool;
	function set_meta_underlined(v:Bool):Bool;
	var hint_underlined(get, set) : Bool;
	function get_hint_underlined():Bool;
	function set_hint_underlined(v:Bool):Bool;
	var threaded(get, set) : Bool;
	function get_threaded():Bool;
	var progress_bar_delay(get, set) : Int;
	var selection_enabled(get, set) : Bool;
	function get_selection_enabled():Bool;
	var deselect_on_focus_loss_enabled(get, set) : Bool;
	function get_deselect_on_focus_loss_enabled():Bool;
	var drag_and_drop_selection_enabled(get, set) : Bool;
	function get_drag_and_drop_selection_enabled():Bool;
	var visible_characters(get, set) : Int;
	var visible_characters_behavior(get, set) : gd.textserver.VisibleCharactersBehavior;
	var visible_ratio(get, set) : Float;
	var text_direction(get, set) : gd.control.TextDirection;
	var language(get, set) : std.String;
	var structured_text_bidi_override(get, set) : gd.textserver.StructuredTextParser;
	var structured_text_bidi_override_options(get, set) : gd.Array;
}