package gd;
extern class Color_wrapper {
	var r(get, set) : Float;
	var g(get, set) : Float;
	var b(get, set) : Float;
	var a(get, set) : Float;
	static function _new0():Color_wrapper;
	static function _new1(p_from:gd.Color):Color_wrapper;
	static function _new2(p_from:gd.Color, p_alpha:Float):Color_wrapper;
	static function _new3(p_r:Float, p_g:Float, p_b:Float):Color_wrapper;
	static function _new4(p_r:Float, p_g:Float, p_b:Float, p_a:Float):Color_wrapper;
	static function _new5(p_code:String):Color_wrapper;
	static function _new6(p_code:String, p_alpha:Float):Color_wrapper;
	function to_argb32():Int;
	function to_abgr32():Int;
	function to_rgba32():Int;
	function to_argb64():Int;
	function to_abgr64():Int;
	function to_rgba64():Int;
	function to_html(?p_with_alpha:Bool):String;
	function clamp(?p_min:gd.Color, ?p_max:gd.Color):gd.Color;
	function inverted():gd.Color;
	function lerp(p_to:gd.Color, p_weight:Float):gd.Color;
	function lightened(p_amount:Float):gd.Color;
	function darkened(p_amount:Float):gd.Color;
	function blend(p_over:gd.Color):gd.Color;
	function get_luminance():Float;
	function srgb_to_linear():gd.Color;
	function linear_to_srgb():gd.Color;
	function is_equal_approx(p_to:gd.Color):Bool;
	function hex(p_hex:Int):gd.Color;
	function hex64(p_hex:Int):gd.Color;
	function html(p_rgba:String):gd.Color;
	function html_is_valid(p_color:String):Bool;
	function from_string(p_str:String, p_default:gd.Color):gd.Color;
	function from_hsv(p_h:Float, p_s:Float, p_v:Float, ?p_alpha:Float):gd.Color;
	function from_rgbe9995(p_rgbe:Int):gd.Color;
	public static final ALICE_BLUE : gd.Color;
	public static final ANTIQUE_WHITE : gd.Color;
	public static final AQUA : gd.Color;
	public static final AQUAMARINE : gd.Color;
	public static final AZURE : gd.Color;
	public static final BEIGE : gd.Color;
	public static final BISQUE : gd.Color;
	public static final BLACK : gd.Color;
	public static final BLANCHED_ALMOND : gd.Color;
	public static final BLUE : gd.Color;
	public static final BLUE_VIOLET : gd.Color;
	public static final BROWN : gd.Color;
	public static final BURLYWOOD : gd.Color;
	public static final CADET_BLUE : gd.Color;
	public static final CHARTREUSE : gd.Color;
	public static final CHOCOLATE : gd.Color;
	public static final CORAL : gd.Color;
	public static final CORNFLOWER_BLUE : gd.Color;
	public static final CORNSILK : gd.Color;
	public static final CRIMSON : gd.Color;
	public static final CYAN : gd.Color;
	public static final DARK_BLUE : gd.Color;
	public static final DARK_CYAN : gd.Color;
	public static final DARK_GOLDENROD : gd.Color;
	public static final DARK_GRAY : gd.Color;
	public static final DARK_GREEN : gd.Color;
	public static final DARK_KHAKI : gd.Color;
	public static final DARK_MAGENTA : gd.Color;
	public static final DARK_OLIVE_GREEN : gd.Color;
	public static final DARK_ORANGE : gd.Color;
	public static final DARK_ORCHID : gd.Color;
	public static final DARK_RED : gd.Color;
	public static final DARK_SALMON : gd.Color;
	public static final DARK_SEA_GREEN : gd.Color;
	public static final DARK_SLATE_BLUE : gd.Color;
	public static final DARK_SLATE_GRAY : gd.Color;
	public static final DARK_TURQUOISE : gd.Color;
	public static final DARK_VIOLET : gd.Color;
	public static final DEEP_PINK : gd.Color;
	public static final DEEP_SKY_BLUE : gd.Color;
	public static final DIM_GRAY : gd.Color;
	public static final DODGER_BLUE : gd.Color;
	public static final FIREBRICK : gd.Color;
	public static final FLORAL_WHITE : gd.Color;
	public static final FOREST_GREEN : gd.Color;
	public static final FUCHSIA : gd.Color;
	public static final GAINSBORO : gd.Color;
	public static final GHOST_WHITE : gd.Color;
	public static final GOLD : gd.Color;
	public static final GOLDENROD : gd.Color;
	public static final GRAY : gd.Color;
	public static final GREEN : gd.Color;
	public static final GREEN_YELLOW : gd.Color;
	public static final HONEYDEW : gd.Color;
	public static final HOT_PINK : gd.Color;
	public static final INDIAN_RED : gd.Color;
	public static final INDIGO : gd.Color;
	public static final IVORY : gd.Color;
	public static final KHAKI : gd.Color;
	public static final LAVENDER : gd.Color;
	public static final LAVENDER_BLUSH : gd.Color;
	public static final LAWN_GREEN : gd.Color;
	public static final LEMON_CHIFFON : gd.Color;
	public static final LIGHT_BLUE : gd.Color;
	public static final LIGHT_CORAL : gd.Color;
	public static final LIGHT_CYAN : gd.Color;
	public static final LIGHT_GOLDENROD : gd.Color;
	public static final LIGHT_GRAY : gd.Color;
	public static final LIGHT_GREEN : gd.Color;
	public static final LIGHT_PINK : gd.Color;
	public static final LIGHT_SALMON : gd.Color;
	public static final LIGHT_SEA_GREEN : gd.Color;
	public static final LIGHT_SKY_BLUE : gd.Color;
	public static final LIGHT_SLATE_GRAY : gd.Color;
	public static final LIGHT_STEEL_BLUE : gd.Color;
	public static final LIGHT_YELLOW : gd.Color;
	public static final LIME : gd.Color;
	public static final LIME_GREEN : gd.Color;
	public static final LINEN : gd.Color;
	public static final MAGENTA : gd.Color;
	public static final MAROON : gd.Color;
	public static final MEDIUM_AQUAMARINE : gd.Color;
	public static final MEDIUM_BLUE : gd.Color;
	public static final MEDIUM_ORCHID : gd.Color;
	public static final MEDIUM_PURPLE : gd.Color;
	public static final MEDIUM_SEA_GREEN : gd.Color;
	public static final MEDIUM_SLATE_BLUE : gd.Color;
	public static final MEDIUM_SPRING_GREEN : gd.Color;
	public static final MEDIUM_TURQUOISE : gd.Color;
	public static final MEDIUM_VIOLET_RED : gd.Color;
	public static final MIDNIGHT_BLUE : gd.Color;
	public static final MINT_CREAM : gd.Color;
	public static final MISTY_ROSE : gd.Color;
	public static final MOCCASIN : gd.Color;
	public static final NAVAJO_WHITE : gd.Color;
	public static final NAVY_BLUE : gd.Color;
	public static final OLD_LACE : gd.Color;
	public static final OLIVE : gd.Color;
	public static final OLIVE_DRAB : gd.Color;
	public static final ORANGE : gd.Color;
	public static final ORANGE_RED : gd.Color;
	public static final ORCHID : gd.Color;
	public static final PALE_GOLDENROD : gd.Color;
	public static final PALE_GREEN : gd.Color;
	public static final PALE_TURQUOISE : gd.Color;
	public static final PALE_VIOLET_RED : gd.Color;
	public static final PAPAYA_WHIP : gd.Color;
	public static final PEACH_PUFF : gd.Color;
	public static final PERU : gd.Color;
	public static final PINK : gd.Color;
	public static final PLUM : gd.Color;
	public static final POWDER_BLUE : gd.Color;
	public static final PURPLE : gd.Color;
	public static final REBECCA_PURPLE : gd.Color;
	public static final RED : gd.Color;
	public static final ROSY_BROWN : gd.Color;
	public static final ROYAL_BLUE : gd.Color;
	public static final SADDLE_BROWN : gd.Color;
	public static final SALMON : gd.Color;
	public static final SANDY_BROWN : gd.Color;
	public static final SEA_GREEN : gd.Color;
	public static final SEASHELL : gd.Color;
	public static final SIENNA : gd.Color;
	public static final SILVER : gd.Color;
	public static final SKY_BLUE : gd.Color;
	public static final SLATE_BLUE : gd.Color;
	public static final SLATE_GRAY : gd.Color;
	public static final SNOW : gd.Color;
	public static final SPRING_GREEN : gd.Color;
	public static final STEEL_BLUE : gd.Color;
	public static final TAN : gd.Color;
	public static final TEAL : gd.Color;
	public static final THISTLE : gd.Color;
	public static final TOMATO : gd.Color;
	public static final TRANSPARENT : gd.Color;
	public static final TURQUOISE : gd.Color;
	public static final VIOLET : gd.Color;
	public static final WEB_GRAY : gd.Color;
	public static final WEB_GREEN : gd.Color;
	public static final WEB_MAROON : gd.Color;
	public static final WEB_PURPLE : gd.Color;
	public static final WHEAT : gd.Color;
	public static final WHITE : gd.Color;
	public static final WHITE_SMOKE : gd.Color;
	public static final YELLOW : gd.Color;
	public static final YELLOW_GREEN : gd.Color;
}

@:forward @:forwardStatics abstract Color(Color_wrapper) from Color_wrapper to Color_wrapper {
	public extern overload inline function new() this = Color_wrapper._new0();
	public extern overload inline function new(p_from:gd.Color) this = Color_wrapper._new1(p_from);
	public extern overload inline function new(p_from:gd.Color, p_alpha:Float) this = Color_wrapper._new2(p_from, p_alpha);
	public extern overload inline function new(p_r:Float, p_g:Float, p_b:Float) this = Color_wrapper._new3(p_r, p_g, p_b);
	public extern overload inline function new(p_r:Float, p_g:Float, p_b:Float, p_a:Float) this = Color_wrapper._new4(p_r, p_g, p_b, p_a);
	public extern overload inline function new(p_code:String) this = Color_wrapper._new5(p_code);
	public extern overload inline function new(p_code:String, p_alpha:Float) this = Color_wrapper._new6(p_code, p_alpha);
}