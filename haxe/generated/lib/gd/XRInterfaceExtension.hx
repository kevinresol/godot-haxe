package gd;
extern class XRInterfaceExtension extends gd.XRInterface {
	function new(?owner:Dynamic);
	function _get_name():std.String;
	function _get_capabilities():Int;
	function _is_initialized():Bool;
	function _initialize():Bool;
	function _uninitialize():Void;
	function _get_system_info():gd.Dictionary;
	function _supports_play_area_mode(p_mode:gd.xrinterface.PlayAreaMode):Bool;
	function _get_play_area_mode():gd.xrinterface.PlayAreaMode;
	function _set_play_area_mode(p_mode:gd.xrinterface.PlayAreaMode):Bool;
	function _get_play_area():gd.PackedVector3Array;
	function _get_render_target_size():gd.Vector2;
	function _get_view_count():Int;
	function _get_camera_transform():gd.Transform3D;
	function _get_transform_for_view(p_view:Int, p_cam_transform:gd.Transform3D):gd.Transform3D;
	function _get_projection_for_view(p_view:Int, p_aspect:Float, p_z_near:Float, p_z_far:Float):gd.PackedFloat64Array;
	function _get_vrs_texture():gd.RID;
	function _process():Void;
	function _pre_render():Void;
	function _pre_draw_viewport(p_render_target:gd.RID):Bool;
	function _post_draw_viewport(p_render_target:gd.RID, p_screen_rect:gd.Rect2):Void;
	function _end_frame():Void;
	function _get_suggested_tracker_names():gd.PackedStringArray;
	function _get_suggested_pose_names(p_tracker_name:std.String):gd.PackedStringArray;
	function _get_tracking_status():gd.xrinterface.TrackingStatus;
	function _trigger_haptic_pulse(p_action_name:std.String, p_tracker_name:std.String, p_frequency:Float, p_amplitude:Float, p_duration_sec:Float, p_delay_sec:Float):Void;
	function _get_anchor_detection_is_enabled():Bool;
	function _set_anchor_detection_is_enabled(p_enabled:Bool):Void;
	function _get_camera_feed_id():Int;
	function _get_color_texture():gd.RID;
	function _get_depth_texture():gd.RID;
	function _get_velocity_texture():gd.RID;
	function get_color_texture():gd.RID;
	function get_depth_texture():gd.RID;
	function get_velocity_texture():gd.RID;
	function add_blit(p_render_target:gd.RID, p_src_rect:gd.Rect2, p_dst_rect:gd.Rect2i, p_use_layer:Bool, p_layer:Int, p_apply_lens_distortion:Bool, p_eye_center:gd.Vector2, p_k1:Float, p_k2:Float, p_upscale:Float, p_aspect_ratio:Float):Void;
	function get_render_target_texture(p_render_target:gd.RID):gd.RID;
}