package gd;
extern class Image extends gd.Resource {
	function new(?owner:Dynamic);
	function get_width():Int;
	function get_height():Int;
	function get_size():gd.Vector2i;
	function has_mipmaps():Bool;
	function get_format():gd.image.Format;
	function get_data():gd.PackedByteArray;
	function get_data_size():Int;
	function convert(p_format:gd.image.Format):Void;
	function get_mipmap_count():Int;
	function get_mipmap_offset(p_mipmap:Int):Int;
	function shrink_x2():Void;
	function crop(p_width:Int, p_height:Int):Void;
	function flip_x():Void;
	function flip_y():Void;
	function generate_mipmaps(?p_renormalize:Bool = false):gd.Error;
	function clear_mipmaps():Void;
	static function create(p_width:Int, p_height:Int, p_use_mipmaps:Bool, p_format:gd.image.Format):gd.Image;
	static function create_empty(p_width:Int, p_height:Int, p_use_mipmaps:Bool, p_format:gd.image.Format):gd.Image;
	static function create_from_data(p_width:Int, p_height:Int, p_use_mipmaps:Bool, p_format:gd.image.Format, p_data:gd.PackedByteArray):gd.Image;
	function set_data(p_width:Int, p_height:Int, p_use_mipmaps:Bool, p_format:gd.image.Format, p_data:gd.PackedByteArray):Void;
	function is_empty():Bool;
	function load(p_path:std.String):gd.Error;
	static function load_from_file(p_path:std.String):gd.Image;
	function save_png(p_path:std.String):gd.Error;
	function save_png_to_buffer():gd.PackedByteArray;
	function save_jpg(p_path:std.String, ?p_quality:Float = 0.75):gd.Error;
	function save_jpg_to_buffer(?p_quality:Float = 0.75):gd.PackedByteArray;
	function save_exr(p_path:std.String, ?p_grayscale:Bool = false):gd.Error;
	function save_exr_to_buffer(?p_grayscale:Bool = false):gd.PackedByteArray;
	function save_webp(p_path:std.String, ?p_lossy:Bool = false, ?p_quality:Float = 0.75):gd.Error;
	function save_webp_to_buffer(?p_lossy:Bool = false, ?p_quality:Float = 0.75):gd.PackedByteArray;
	function detect_alpha():gd.image.AlphaMode;
	function is_invisible():Bool;
	function decompress():gd.Error;
	function is_compressed():Bool;
	function rotate_90(p_direction:gd.ClockDirection):Void;
	function rotate_180():Void;
	function fix_alpha_edges():Void;
	function premultiply_alpha():Void;
	function srgb_to_linear():Void;
	function normal_map_to_xy():Void;
	function rgbe_to_srgb():gd.Image;
	function bump_map_to_normal_map(?p_bump_scale:Float = 1.):Void;
	function compute_image_metrics(p_compared_image:gd.Image, p_use_luma:Bool):gd.Dictionary;
	function blit_rect(p_src:gd.Image, p_src_rect:gd.Rect2i, p_dst:gd.Vector2i):Void;
	function blit_rect_mask(p_src:gd.Image, p_mask:gd.Image, p_src_rect:gd.Rect2i, p_dst:gd.Vector2i):Void;
	function blend_rect(p_src:gd.Image, p_src_rect:gd.Rect2i, p_dst:gd.Vector2i):Void;
	function blend_rect_mask(p_src:gd.Image, p_mask:gd.Image, p_src_rect:gd.Rect2i, p_dst:gd.Vector2i):Void;
	function fill(p_color:gd.Color):Void;
	function fill_rect(p_rect:gd.Rect2i, p_color:gd.Color):Void;
	function get_used_rect():gd.Rect2i;
	function get_region(p_region:gd.Rect2i):gd.Image;
	function copy_from(p_src:gd.Image):Void;
	function get_pixelv(p_point:gd.Vector2i):gd.Color;
	function get_pixel(p_x:Int, p_y:Int):gd.Color;
	function set_pixelv(p_point:gd.Vector2i, p_color:gd.Color):Void;
	function set_pixel(p_x:Int, p_y:Int, p_color:gd.Color):Void;
	function adjust_bcs(p_brightness:Float, p_contrast:Float, p_saturation:Float):Void;
	function load_png_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_jpg_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_webp_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_tga_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_bmp_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_ktx_from_buffer(p_buffer:gd.PackedByteArray):gd.Error;
	function load_svg_from_buffer(p_buffer:gd.PackedByteArray, ?p_scale:Float = 1.):gd.Error;
	function load_svg_from_string(p_svg_str:std.String, ?p_scale:Float = 1.):gd.Error;
}