package gd;
extern class OS extends gd.Object {
	function new(?owner:Dynamic);
	static final singleton : gd.OS;
	function get_entropy(p_size:Int):gd.PackedByteArray;
	function get_system_ca_certificates():std.String;
	function get_connected_midi_inputs():gd.PackedStringArray;
	function open_midi_inputs():Void;
	function close_midi_inputs():Void;
	function alert(p_text:std.String, ?p_title:std.String):Void;
	function crash(p_message:std.String):Void;
	function set_low_processor_usage_mode(p_enable:Bool):Bool;
	function is_in_low_processor_usage_mode():Bool;
	function set_low_processor_usage_mode_sleep_usec(p_usec:Int):Int;
	function get_low_processor_usage_mode_sleep_usec():Int;
	function set_delta_smoothing(p_delta_smoothing_enabled:Bool):Bool;
	function is_delta_smoothing_enabled():Bool;
	function get_processor_count():Int;
	function get_processor_name():std.String;
	function get_system_fonts():gd.PackedStringArray;
	function get_system_font_path(p_font_name:std.String, ?p_weight:Int, ?p_stretch:Int, ?p_italic:Bool):std.String;
	function get_system_font_path_for_text(p_font_name:std.String, p_text:std.String, ?p_locale:std.String, ?p_script:std.String, ?p_weight:Int, ?p_stretch:Int, ?p_italic:Bool):gd.PackedStringArray;
	function get_executable_path():std.String;
	function read_string_from_stdin():std.String;
	function execute(p_path:std.String, p_arguments:gd.PackedStringArray, ?p_output:gd.Array, ?p_read_stderr:Bool, ?p_open_console:Bool):Int;
	function execute_with_pipe(p_path:std.String, p_arguments:gd.PackedStringArray):gd.Dictionary;
	function create_process(p_path:std.String, p_arguments:gd.PackedStringArray, ?p_open_console:Bool):Int;
	function create_instance(p_arguments:gd.PackedStringArray):Int;
	function kill(p_pid:Int):gd.Error;
	function shell_open(p_uri:std.String):gd.Error;
	function shell_show_in_file_manager(p_file_or_dir_path:std.String, ?p_open_folder:Bool):gd.Error;
	function is_process_running(p_pid:Int):Bool;
	function get_process_exit_code(p_pid:Int):Int;
	function get_process_id():Int;
	function has_environment(p_variable:std.String):Bool;
	function get_environment(p_variable:std.String):std.String;
	function set_environment(p_variable:std.String, p_value:std.String):Void;
	function unset_environment(p_variable:std.String):Void;
	function get_name():std.String;
	function get_distribution_name():std.String;
	function get_version():std.String;
	function get_cmdline_args():gd.PackedStringArray;
	function get_cmdline_user_args():gd.PackedStringArray;
	function get_video_adapter_driver_info():gd.PackedStringArray;
	function set_restart_on_exit(p_restart:Bool, ?p_arguments:gd.PackedStringArray):Void;
	function is_restart_on_exit_set():Bool;
	function get_restart_on_exit_arguments():gd.PackedStringArray;
	function delay_usec(p_usec:Int):Void;
	function delay_msec(p_msec:Int):Void;
	function get_locale():std.String;
	function get_locale_language():std.String;
	function get_model_name():std.String;
	function is_userfs_persistent():Bool;
	function is_stdout_verbose():Bool;
	function is_debug_build():Bool;
	function get_static_memory_usage():Int;
	function get_static_memory_peak_usage():Int;
	function get_memory_info():gd.Dictionary;
	function move_to_trash(p_path:std.String):gd.Error;
	function get_user_data_dir():std.String;
	function get_system_dir(p_dir:gd.os.SystemDir, ?p_shared_storage:Bool):std.String;
	function get_config_dir():std.String;
	function get_data_dir():std.String;
	function get_cache_dir():std.String;
	function get_unique_id():std.String;
	function get_keycode_string(p_code:gd.Key):std.String;
	function is_keycode_unicode(p_code:Int):Bool;
	function find_keycode_from_string(p_string:std.String):gd.Key;
	function set_use_file_access_save_and_swap(p_enabled:Bool):Void;
	function set_thread_name(p_name:std.String):gd.Error;
	function get_thread_caller_id():Int;
	function get_main_thread_id():Int;
	function has_feature(p_tag_name:std.String):Bool;
	function is_sandboxed():Bool;
	function request_permission(p_name:std.String):Bool;
	function request_permissions():Bool;
	function get_granted_permissions():gd.PackedStringArray;
	function revoke_granted_permissions():Void;
	var low_processor_usage_mode(get, set) : Bool;
	function get_low_processor_usage_mode():Bool;
	var low_processor_usage_mode_sleep_usec(get, set) : Int;
	var delta_smoothing(get, set) : Bool;
	function get_delta_smoothing():Bool;
}