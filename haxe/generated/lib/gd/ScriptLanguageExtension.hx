package gd;
extern class ScriptLanguageExtension extends gd.ScriptLanguage {
	function new(?owner:Dynamic);
	function _get_name():std.String;
	function _init():Void;
	function _get_type():std.String;
	function _get_extension():std.String;
	function _finish():Void;
	function _get_reserved_words():gd.PackedStringArray;
	function _is_control_flow_keyword(p_keyword:std.String):Bool;
	function _get_comment_delimiters():gd.PackedStringArray;
	function _get_doc_comment_delimiters():gd.PackedStringArray;
	function _get_string_delimiters():gd.PackedStringArray;
	function _make_template(p_template:std.String, p_class_name:std.String, p_base_class_name:std.String):gd.Script;
	function _is_using_templates():Bool;
	function _validate(p_script:std.String, p_path:std.String, p_validate_functions:Bool, p_validate_errors:Bool, p_validate_warnings:Bool, p_validate_safe_lines:Bool):gd.Dictionary;
	function _validate_path(p_path:std.String):std.String;
	function _create_script():gd.Object;
	function _has_named_classes():Bool;
	function _supports_builtin_mode():Bool;
	function _supports_documentation():Bool;
	function _can_inherit_from_file():Bool;
	function _find_function(p_function:std.String, p_code:std.String):Int;
	function _make_function(p_class_name:std.String, p_function_name:std.String, p_function_args:gd.PackedStringArray):std.String;
	function _can_make_function():Bool;
	function _open_in_external_editor(p_script:gd.Script, p_line:Int, p_column:Int):gd.Error;
	function _overrides_external_editor():Bool;
	function _preferred_file_name_casing():gd.scriptlanguage.ScriptNameCasing;
	function _complete_code(p_code:std.String, p_path:std.String, p_owner:gd.Object):gd.Dictionary;
	function _lookup_code(p_code:std.String, p_symbol:std.String, p_path:std.String, p_owner:gd.Object):gd.Dictionary;
	function _auto_indent_code(p_code:std.String, p_from_line:Int, p_to_line:Int):std.String;
	function _add_global_constant(p_name:std.String, p_value:gd.Variant):Void;
	function _add_named_global_constant(p_name:std.String, p_value:gd.Variant):Void;
	function _remove_named_global_constant(p_name:std.String):Void;
	function _thread_enter():Void;
	function _thread_exit():Void;
	function _debug_get_error():std.String;
	function _debug_get_stack_level_count():Int;
	function _debug_get_stack_level_line(p_level:Int):Int;
	function _debug_get_stack_level_function(p_level:Int):std.String;
	function _debug_get_stack_level_source(p_level:Int):std.String;
	function _debug_get_stack_level_locals(p_level:Int, p_max_subitems:Int, p_max_depth:Int):gd.Dictionary;
	function _debug_get_stack_level_members(p_level:Int, p_max_subitems:Int, p_max_depth:Int):gd.Dictionary;
	function _debug_get_globals(p_max_subitems:Int, p_max_depth:Int):gd.Dictionary;
	function _debug_parse_stack_level_expression(p_level:Int, p_expression:std.String, p_max_subitems:Int, p_max_depth:Int):std.String;
	function _reload_all_scripts():Void;
	function _reload_tool_script(p_script:gd.Script, p_soft_reload:Bool):Void;
	function _get_recognized_extensions():gd.PackedStringArray;
	function _get_public_constants():gd.Dictionary;
	function _profiling_start():Void;
	function _profiling_stop():Void;
	function _profiling_set_save_native_calls(p_enable:Bool):Void;
	function _frame():Void;
	function _handles_global_class_type(p_type:std.String):Bool;
	function _get_global_class_name(p_path:std.String):gd.Dictionary;
}