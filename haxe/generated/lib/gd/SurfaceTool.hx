package gd;
extern class SurfaceTool extends gd.RefCounted {
	function new(?owner:Dynamic);
	function set_skin_weight_count(p_count:gd.surfacetool.SkinWeightCount):Void;
	function get_skin_weight_count():gd.surfacetool.SkinWeightCount;
	function set_custom_format(p_channel_index:Int, p_format:gd.surfacetool.CustomFormat):Void;
	function get_custom_format(p_channel_index:Int):gd.surfacetool.CustomFormat;
	function begin(p_primitive:gd.mesh.PrimitiveType):Void;
	function add_vertex(p_vertex:gd.Vector3):Void;
	function set_color(p_color:gd.Color):Void;
	function set_normal(p_normal:gd.Vector3):Void;
	function set_tangent(p_tangent:gd.Plane):Void;
	function set_uv(p_uv:gd.Vector2):Void;
	function set_uv2(p_uv2:gd.Vector2):Void;
	function set_bones(p_bones:gd.PackedInt32Array):Void;
	function set_weights(p_weights:gd.PackedFloat32Array):Void;
	function set_custom(p_channel_index:Int, p_custom_color:gd.Color):Void;
	function set_smooth_group(p_index:Int):Void;
	function add_index(p_index:Int):Void;
	function index():Void;
	function deindex():Void;
	function generate_normals(?p_flip:Bool):Void;
	function generate_tangents():Void;
	function optimize_indices_for_cache():Void;
	function get_aabb():gd.AABB;
	function generate_lod(p_nd_threshold:Float, ?p_target_index_count:Int):gd.PackedInt32Array;
	function set_material(p_material:gd.Material):Void;
	function get_primitive_type():gd.mesh.PrimitiveType;
	function clear():Void;
	function create_from(p_existing:gd.Mesh, p_surface:Int):Void;
	function create_from_arrays(p_arrays:gd.Array, ?p_primitive_type:gd.mesh.PrimitiveType):Void;
	function create_from_blend_shape(p_existing:gd.Mesh, p_surface:Int, p_blend_shape:std.String):Void;
	function append_from(p_existing:gd.Mesh, p_surface:Int, p_transform:gd.Transform3D):Void;
	function commit(?p_existing:gd.ArrayMesh, ?p_flags:Int):gd.ArrayMesh;
	function commit_to_arrays():gd.Array;
}