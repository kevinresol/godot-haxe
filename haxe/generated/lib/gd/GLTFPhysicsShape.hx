package gd;
extern class GLTFPhysicsShape extends gd.Resource {
	function new(?owner:Dynamic);
	static function from_node(p_shape_node:gd.CollisionShape3D):gd.GLTFPhysicsShape;
	function to_node(?p_cache_shapes:Bool = false):gd.CollisionShape3D;
	static function from_resource(p_shape_resource:gd.Shape3D):gd.GLTFPhysicsShape;
	function to_resource(?p_cache_shapes:Bool = false):gd.Shape3D;
	static function from_dictionary(p_dictionary:gd.Dictionary):gd.GLTFPhysicsShape;
	function to_dictionary():gd.Dictionary;
	function get_shape_type():std.String;
	function set_shape_type(p_shape_type:std.String):std.String;
	function get_size():gd.Vector3;
	function set_size(p_size:gd.Vector3):gd.Vector3;
	function get_radius():Float;
	function set_radius(p_radius:Float):Float;
	function get_height():Float;
	function set_height(p_height:Float):Float;
	function get_is_trigger():Bool;
	function set_is_trigger(p_is_trigger:Bool):Bool;
	function get_mesh_index():Int;
	function set_mesh_index(p_mesh_index:Int):Int;
	function get_importer_mesh():gd.ImporterMesh;
	function set_importer_mesh(p_importer_mesh:gd.ImporterMesh):gd.ImporterMesh;
	var shape_type(get, set) : std.String;
	var size(get, set) : gd.Vector3;
	var radius(get, set) : Float;
	var height(get, set) : Float;
	var is_trigger(get, set) : Bool;
	var mesh_index(get, set) : Int;
	var importer_mesh(get, set) : gd.ImporterMesh;
}