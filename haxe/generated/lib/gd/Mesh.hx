package gd;
extern class Mesh extends gd.Resource {
	function new(?owner:Dynamic);
	function _get_surface_count():Int;
	function _surface_get_array_len(p_index:Int):Int;
	function _surface_get_array_index_len(p_index:Int):Int;
	function _surface_get_arrays(p_index:Int):gd.Array;
	function _surface_get_lods(p_index:Int):gd.Dictionary;
	function _surface_get_format(p_index:Int):Int;
	function _surface_get_primitive_type(p_index:Int):Int;
	function _surface_set_material(p_index:Int, p_material:gd.Material):Void;
	function _surface_get_material(p_index:Int):gd.Material;
	function _get_blend_shape_count():Int;
	function _get_blend_shape_name(p_index:Int):std.String;
	function _set_blend_shape_name(p_index:Int, p_name:std.String):Void;
	function _get_aabb():gd.AABB;
	function set_lightmap_size_hint(p_size:gd.Vector2i):gd.Vector2i;
	function get_lightmap_size_hint():gd.Vector2i;
	function get_aabb():gd.AABB;
	function get_faces():gd.PackedVector3Array;
	function get_surface_count():Int;
	function surface_get_arrays(p_surf_idx:Int):gd.Array;
	function surface_set_material(p_surf_idx:Int, p_material:gd.Material):Void;
	function surface_get_material(p_surf_idx:Int):gd.Material;
	function create_placeholder():gd.Resource;
	function create_trimesh_shape():gd.ConcavePolygonShape3D;
	function create_convex_shape(?p_clean:Bool = true, ?p_simplify:Bool = false):gd.ConvexPolygonShape3D;
	function create_outline(p_margin:Float):gd.Mesh;
	function generate_triangle_mesh():gd.TriangleMesh;
	var lightmap_size_hint(get, set) : gd.Vector2i;
}