package gd;
extern class Camera3D extends gd.Node3D {
	function new(?owner:Dynamic);
	function project_ray_normal(p_screen_point:gd.Vector2):gd.Vector3;
	function project_local_ray_normal(p_screen_point:gd.Vector2):gd.Vector3;
	function project_ray_origin(p_screen_point:gd.Vector2):gd.Vector3;
	function unproject_position(p_world_point:gd.Vector3):gd.Vector2;
	function is_position_behind(p_world_point:gd.Vector3):Bool;
	function project_position(p_screen_point:gd.Vector2, p_z_depth:Float):gd.Vector3;
	function set_perspective(p_fov:Float, p_z_near:Float, p_z_far:Float):Void;
	function set_orthogonal(p_size:Float, p_z_near:Float, p_z_far:Float):Void;
	function set_frustum(p_size:Float, p_offset:gd.Vector2, p_z_near:Float, p_z_far:Float):Void;
	function make_current():Void;
	function clear_current(?p_enable_next:Bool):Void;
	function set_current(p_enabled:Bool):Bool;
	function is_current():Bool;
	function get_camera_transform():gd.Transform3D;
	function get_fov():Float;
	function get_frustum_offset():gd.Vector2;
	function get_size():Float;
	function get_far():Float;
	function get_near():Float;
	function set_fov(p_fov:Float):Float;
	function set_frustum_offset(p_offset:gd.Vector2):gd.Vector2;
	function set_size(p_size:Float):Float;
	function set_far(p_far:Float):Float;
	function set_near(p_near:Float):Float;
	function get_projection():gd.camera3d.ProjectionType;
	function set_projection(p_mode:gd.camera3d.ProjectionType):gd.camera3d.ProjectionType;
	function set_h_offset(p_offset:Float):Float;
	function get_h_offset():Float;
	function set_v_offset(p_offset:Float):Float;
	function get_v_offset():Float;
	function set_cull_mask(p_mask:Int):Int;
	function get_cull_mask():Int;
	function set_environment(p_env:gd.Environment):gd.Environment;
	function get_environment():gd.Environment;
	function set_attributes(p_env:gd.CameraAttributes):gd.CameraAttributes;
	function get_attributes():gd.CameraAttributes;
	function set_compositor(p_compositor:gd.Compositor):gd.Compositor;
	function get_compositor():gd.Compositor;
	function set_keep_aspect_mode(p_mode:gd.camera3d.KeepAspect):Void;
	function get_keep_aspect_mode():gd.camera3d.KeepAspect;
	function set_doppler_tracking(p_mode:gd.camera3d.DopplerTracking):gd.camera3d.DopplerTracking;
	function get_doppler_tracking():gd.camera3d.DopplerTracking;
	function is_position_in_frustum(p_world_point:gd.Vector3):Bool;
	function get_camera_rid():gd.RID;
	function get_pyramid_shape_rid():gd.RID;
	function set_cull_mask_value(p_layer_number:Int, p_value:Bool):Void;
	function get_cull_mask_value(p_layer_number:Int):Bool;
	var keep_aspect(get, set) : gd.camera3d.KeepAspect;
	function get_keep_aspect():gd.camera3d.KeepAspect;
	function set_keep_aspect(v:gd.camera3d.KeepAspect):gd.camera3d.KeepAspect;
	var cull_mask(get, set) : Int;
	var environment(get, set) : gd.Environment;
	var attributes(get, set) : gd.CameraAttributes;
	var compositor(get, set) : gd.Compositor;
	var h_offset(get, set) : Float;
	var v_offset(get, set) : Float;
	var doppler_tracking(get, set) : gd.camera3d.DopplerTracking;
	var projection(get, set) : gd.camera3d.ProjectionType;
	var current(get, set) : Bool;
	function get_current():Bool;
	var fov(get, set) : Float;
	var size(get, set) : Float;
	var frustum_offset(get, set) : gd.Vector2;
	var near(get, set) : Float;
	var far(get, set) : Float;
}