package gd;
extern class PhysicsServer2D extends gd.Object {
	function new(?owner:Dynamic);
	static var singleton(get, null) : gd.PhysicsServer2D;
	static function get_singleton():gd.PhysicsServer2D;
	function world_boundary_shape_create():gd.RID;
	function separation_ray_shape_create():gd.RID;
	function segment_shape_create():gd.RID;
	function circle_shape_create():gd.RID;
	function rectangle_shape_create():gd.RID;
	function capsule_shape_create():gd.RID;
	function convex_polygon_shape_create():gd.RID;
	function concave_polygon_shape_create():gd.RID;
	function shape_set_data(p_shape:gd.RID, p_data:gd.Variant):Void;
	function shape_get_type(p_shape:gd.RID):gd.physicsserver2d.ShapeType;
	function shape_get_data(p_shape:gd.RID):gd.Variant;
	function space_create():gd.RID;
	function space_set_active(p_space:gd.RID, p_active:Bool):Void;
	function space_is_active(p_space:gd.RID):Bool;
	function space_set_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter, p_value:Float):Void;
	function space_get_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter):Float;
	function space_get_direct_state(p_space:gd.RID):gd.PhysicsDirectSpaceState2D;
	function area_create():gd.RID;
	function area_set_space(p_area:gd.RID, p_space:gd.RID):Void;
	function area_get_space(p_area:gd.RID):gd.RID;
	function area_add_shape(p_area:gd.RID, p_shape:gd.RID, ?p_transform:gd.Transform2D, ?p_disabled:Bool):Void;
	function area_set_shape(p_area:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void;
	function area_set_shape_transform(p_area:gd.RID, p_shape_idx:Int, p_transform:gd.Transform2D):Void;
	function area_set_shape_disabled(p_area:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void;
	function area_get_shape_count(p_area:gd.RID):Int;
	function area_get_shape(p_area:gd.RID, p_shape_idx:Int):gd.RID;
	function area_get_shape_transform(p_area:gd.RID, p_shape_idx:Int):gd.Transform2D;
	function area_remove_shape(p_area:gd.RID, p_shape_idx:Int):Void;
	function area_clear_shapes(p_area:gd.RID):Void;
	function area_set_collision_layer(p_area:gd.RID, p_layer:Int):Void;
	function area_get_collision_layer(p_area:gd.RID):Int;
	function area_set_collision_mask(p_area:gd.RID, p_mask:Int):Void;
	function area_get_collision_mask(p_area:gd.RID):Int;
	function area_set_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter, p_value:gd.Variant):Void;
	function area_set_transform(p_area:gd.RID, p_transform:gd.Transform2D):Void;
	function area_get_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter):gd.Variant;
	function area_get_transform(p_area:gd.RID):gd.Transform2D;
	function area_attach_object_instance_id(p_area:gd.RID, p_id:Int):Void;
	function area_get_object_instance_id(p_area:gd.RID):Int;
	function area_attach_canvas_instance_id(p_area:gd.RID, p_id:Int):Void;
	function area_get_canvas_instance_id(p_area:gd.RID):Int;
	function area_set_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void;
	function area_set_area_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void;
	function area_set_monitorable(p_area:gd.RID, p_monitorable:Bool):Void;
	function body_create():gd.RID;
	function body_set_space(p_body:gd.RID, p_space:gd.RID):Void;
	function body_get_space(p_body:gd.RID):gd.RID;
	function body_set_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.BodyMode):Void;
	function body_get_mode(p_body:gd.RID):gd.physicsserver2d.BodyMode;
	function body_add_shape(p_body:gd.RID, p_shape:gd.RID, ?p_transform:gd.Transform2D, ?p_disabled:Bool):Void;
	function body_set_shape(p_body:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void;
	function body_set_shape_transform(p_body:gd.RID, p_shape_idx:Int, p_transform:gd.Transform2D):Void;
	function body_get_shape_count(p_body:gd.RID):Int;
	function body_get_shape(p_body:gd.RID, p_shape_idx:Int):gd.RID;
	function body_get_shape_transform(p_body:gd.RID, p_shape_idx:Int):gd.Transform2D;
	function body_remove_shape(p_body:gd.RID, p_shape_idx:Int):Void;
	function body_clear_shapes(p_body:gd.RID):Void;
	function body_set_shape_disabled(p_body:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void;
	function body_set_shape_as_one_way_collision(p_body:gd.RID, p_shape_idx:Int, p_enable:Bool, p_margin:Float):Void;
	function body_attach_object_instance_id(p_body:gd.RID, p_id:Int):Void;
	function body_get_object_instance_id(p_body:gd.RID):Int;
	function body_attach_canvas_instance_id(p_body:gd.RID, p_id:Int):Void;
	function body_get_canvas_instance_id(p_body:gd.RID):Int;
	function body_set_continuous_collision_detection_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.CCDMode):Void;
	function body_get_continuous_collision_detection_mode(p_body:gd.RID):gd.physicsserver2d.CCDMode;
	function body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void;
	function body_get_collision_layer(p_body:gd.RID):Int;
	function body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void;
	function body_get_collision_mask(p_body:gd.RID):Int;
	function body_set_collision_priority(p_body:gd.RID, p_priority:Float):Void;
	function body_get_collision_priority(p_body:gd.RID):Float;
	function body_set_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter, p_value:gd.Variant):Void;
	function body_get_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter):gd.Variant;
	function body_reset_mass_properties(p_body:gd.RID):Void;
	function body_set_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState, p_value:gd.Variant):Void;
	function body_get_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState):gd.Variant;
	function body_apply_central_impulse(p_body:gd.RID, p_impulse:gd.Vector2):Void;
	function body_apply_torque_impulse(p_body:gd.RID, p_impulse:Float):Void;
	function body_apply_impulse(p_body:gd.RID, p_impulse:gd.Vector2, ?p_position:gd.Vector2):Void;
	function body_apply_central_force(p_body:gd.RID, p_force:gd.Vector2):Void;
	function body_apply_force(p_body:gd.RID, p_force:gd.Vector2, ?p_position:gd.Vector2):Void;
	function body_apply_torque(p_body:gd.RID, p_torque:Float):Void;
	function body_add_constant_central_force(p_body:gd.RID, p_force:gd.Vector2):Void;
	function body_add_constant_force(p_body:gd.RID, p_force:gd.Vector2, ?p_position:gd.Vector2):Void;
	function body_add_constant_torque(p_body:gd.RID, p_torque:Float):Void;
	function body_set_constant_force(p_body:gd.RID, p_force:gd.Vector2):Void;
	function body_get_constant_force(p_body:gd.RID):gd.Vector2;
	function body_set_constant_torque(p_body:gd.RID, p_torque:Float):Void;
	function body_get_constant_torque(p_body:gd.RID):Float;
	function body_set_axis_velocity(p_body:gd.RID, p_axis_velocity:gd.Vector2):Void;
	function body_add_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void;
	function body_remove_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void;
	function body_set_max_contacts_reported(p_body:gd.RID, p_amount:Int):Void;
	function body_get_max_contacts_reported(p_body:gd.RID):Int;
	function body_set_omit_force_integration(p_body:gd.RID, p_enable:Bool):Void;
	function body_is_omitting_force_integration(p_body:gd.RID):Bool;
	function body_set_state_sync_callback(p_body:gd.RID, p_callable:gd.Callable):Void;
	function body_set_force_integration_callback(p_body:gd.RID, p_callable:gd.Callable, ?p_userdata:gd.Variant):Void;
	function body_test_motion(p_body:gd.RID, p_parameters:gd.PhysicsTestMotionParameters2D, ?p_result:gd.PhysicsTestMotionResult2D):Bool;
	function body_get_direct_state(p_body:gd.RID):gd.PhysicsDirectBodyState2D;
	function joint_create():gd.RID;
	function joint_clear(p_joint:gd.RID):Void;
	function joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam, p_value:Float):Void;
	function joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam):Float;
	function joint_disable_collisions_between_bodies(p_joint:gd.RID, p_disable:Bool):Void;
	function joint_is_disabled_collisions_between_bodies(p_joint:gd.RID):Bool;
	function joint_make_pin(p_joint:gd.RID, p_anchor:gd.Vector2, p_body_a:gd.RID, ?p_body_b:gd.RID):Void;
	function joint_make_groove(p_joint:gd.RID, p_groove1_a:gd.Vector2, p_groove2_a:gd.Vector2, p_anchor_b:gd.Vector2, ?p_body_a:gd.RID, ?p_body_b:gd.RID):Void;
	function joint_make_damped_spring(p_joint:gd.RID, p_anchor_a:gd.Vector2, p_anchor_b:gd.Vector2, p_body_a:gd.RID, ?p_body_b:gd.RID):Void;
	function pin_joint_set_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag, p_enabled:Bool):Void;
	function pin_joint_get_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag):Bool;
	function pin_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam, p_value:Float):Void;
	function pin_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam):Float;
	function damped_spring_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam, p_value:Float):Void;
	function damped_spring_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam):Float;
	function joint_get_type(p_joint:gd.RID):gd.physicsserver2d.JointType;
	function free_rid(p_rid:gd.RID):Void;
	function set_active(p_active:Bool):Void;
	function get_process_info(p_process_info:gd.physicsserver2d.ProcessInfo):Int;
}