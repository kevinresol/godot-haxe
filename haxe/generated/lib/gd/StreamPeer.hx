package gd;
extern class StreamPeer extends gd.RefCounted {
	function new(?owner:Dynamic);
	function put_data(p_data:gd.PackedByteArray):gd.Error;
	function put_partial_data(p_data:gd.PackedByteArray):gd.Array;
	function get_data(p_bytes:Int):gd.Array;
	function get_partial_data(p_bytes:Int):gd.Array;
	function get_available_bytes():Int;
	function set_big_endian(p_enable:Bool):Bool;
	function is_big_endian_enabled():Bool;
	function put_8(p_value:Int):Void;
	function put_u8(p_value:Int):Void;
	function put_16(p_value:Int):Void;
	function put_u16(p_value:Int):Void;
	function put_32(p_value:Int):Void;
	function put_u32(p_value:Int):Void;
	function put_64(p_value:Int):Void;
	function put_u64(p_value:Int):Void;
	function put_float(p_value:Float):Void;
	function put_double(p_value:Float):Void;
	function put_string(p_value:std.String):Void;
	function put_utf8_string(p_value:std.String):Void;
	function put_var(p_value:gd.Variant, ?p_full_objects:Bool):Void;
	function get_8():Int;
	function get_u8():Int;
	function get_16():Int;
	function get_u16():Int;
	function get_32():Int;
	function get_u32():Int;
	function get_64():Int;
	function get_u64():Int;
	function get_float():Float;
	function get_double():Float;
	function get_string(?p_bytes:Int):std.String;
	function get_utf8_string(?p_bytes:Int):std.String;
	function get_var(?p_allow_objects:Bool):gd.Variant;
	var big_endian(get, set) : Bool;
	function get_big_endian():Bool;
}