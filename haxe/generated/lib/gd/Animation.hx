package gd;
extern class Animation extends gd.Resource {
	function new(?owner:Dynamic);
	function add_track(p_type:gd.animation.TrackType, ?p_at_position:Int = -1):Int;
	function remove_track(p_track_idx:Int):Void;
	function get_track_count():Int;
	function track_get_type(p_track_idx:Int):gd.animation.TrackType;
	function track_get_path(p_track_idx:Int):std.String;
	function track_set_path(p_track_idx:Int, p_path:std.String):Void;
	function find_track(p_path:std.String, p_type:gd.animation.TrackType):Int;
	function track_move_up(p_track_idx:Int):Void;
	function track_move_down(p_track_idx:Int):Void;
	function track_move_to(p_track_idx:Int, p_to_idx:Int):Void;
	function track_swap(p_track_idx:Int, p_with_idx:Int):Void;
	function track_set_imported(p_track_idx:Int, p_imported:Bool):Void;
	function track_is_imported(p_track_idx:Int):Bool;
	function track_set_enabled(p_track_idx:Int, p_enabled:Bool):Void;
	function track_is_enabled(p_track_idx:Int):Bool;
	function position_track_insert_key(p_track_idx:Int, p_time:Float, p_position:gd.Vector3):Int;
	function rotation_track_insert_key(p_track_idx:Int, p_time:Float, p_rotation:gd.Quaternion):Int;
	function scale_track_insert_key(p_track_idx:Int, p_time:Float, p_scale:gd.Vector3):Int;
	function blend_shape_track_insert_key(p_track_idx:Int, p_time:Float, p_amount:Float):Int;
	function position_track_interpolate(p_track_idx:Int, p_time_sec:Float, ?p_backward:Bool = false):gd.Vector3;
	function rotation_track_interpolate(p_track_idx:Int, p_time_sec:Float, ?p_backward:Bool = false):gd.Quaternion;
	function scale_track_interpolate(p_track_idx:Int, p_time_sec:Float, ?p_backward:Bool = false):gd.Vector3;
	function blend_shape_track_interpolate(p_track_idx:Int, p_time_sec:Float, ?p_backward:Bool = false):Float;
	function track_insert_key(p_track_idx:Int, p_time:Float, p_key:gd.Variant, ?p_transition:Float = 1.):Int;
	function track_remove_key(p_track_idx:Int, p_key_idx:Int):Void;
	function track_remove_key_at_time(p_track_idx:Int, p_time:Float):Void;
	function track_set_key_value(p_track_idx:Int, p_key:Int, p_value:gd.Variant):Void;
	function track_set_key_transition(p_track_idx:Int, p_key_idx:Int, p_transition:Float):Void;
	function track_set_key_time(p_track_idx:Int, p_key_idx:Int, p_time:Float):Void;
	function track_get_key_transition(p_track_idx:Int, p_key_idx:Int):Float;
	function track_get_key_count(p_track_idx:Int):Int;
	function track_get_key_value(p_track_idx:Int, p_key_idx:Int):gd.Variant;
	function track_get_key_time(p_track_idx:Int, p_key_idx:Int):Float;
	function track_set_interpolation_type(p_track_idx:Int, p_interpolation:gd.animation.InterpolationType):Void;
	function track_get_interpolation_type(p_track_idx:Int):gd.animation.InterpolationType;
	function track_set_interpolation_loop_wrap(p_track_idx:Int, p_interpolation:Bool):Void;
	function track_get_interpolation_loop_wrap(p_track_idx:Int):Bool;
	function track_is_compressed(p_track_idx:Int):Bool;
	function value_track_set_update_mode(p_track_idx:Int, p_mode:gd.animation.UpdateMode):Void;
	function value_track_get_update_mode(p_track_idx:Int):gd.animation.UpdateMode;
	function value_track_interpolate(p_track_idx:Int, p_time_sec:Float, ?p_backward:Bool = false):gd.Variant;
	function method_track_get_name(p_track_idx:Int, p_key_idx:Int):std.String;
	function method_track_get_params(p_track_idx:Int, p_key_idx:Int):gd.Array;
	function bezier_track_set_key_value(p_track_idx:Int, p_key_idx:Int, p_value:Float):Void;
	function bezier_track_set_key_in_handle(p_track_idx:Int, p_key_idx:Int, p_in_handle:gd.Vector2, ?p_balanced_value_time_ratio:Float = 1.):Void;
	function bezier_track_set_key_out_handle(p_track_idx:Int, p_key_idx:Int, p_out_handle:gd.Vector2, ?p_balanced_value_time_ratio:Float = 1.):Void;
	function bezier_track_get_key_value(p_track_idx:Int, p_key_idx:Int):Float;
	function bezier_track_get_key_in_handle(p_track_idx:Int, p_key_idx:Int):gd.Vector2;
	function bezier_track_get_key_out_handle(p_track_idx:Int, p_key_idx:Int):gd.Vector2;
	function bezier_track_interpolate(p_track_idx:Int, p_time:Float):Float;
	function audio_track_insert_key(p_track_idx:Int, p_time:Float, p_stream:gd.Resource, ?p_start_offset:Float = 0., ?p_end_offset:Float = 0.):Int;
	function audio_track_set_key_stream(p_track_idx:Int, p_key_idx:Int, p_stream:gd.Resource):Void;
	function audio_track_set_key_start_offset(p_track_idx:Int, p_key_idx:Int, p_offset:Float):Void;
	function audio_track_set_key_end_offset(p_track_idx:Int, p_key_idx:Int, p_offset:Float):Void;
	function audio_track_get_key_stream(p_track_idx:Int, p_key_idx:Int):gd.Resource;
	function audio_track_get_key_start_offset(p_track_idx:Int, p_key_idx:Int):Float;
	function audio_track_get_key_end_offset(p_track_idx:Int, p_key_idx:Int):Float;
	function audio_track_set_use_blend(p_track_idx:Int, p_enable:Bool):Void;
	function audio_track_is_use_blend(p_track_idx:Int):Bool;
	function animation_track_insert_key(p_track_idx:Int, p_time:Float, p_animation:std.String):Int;
	function animation_track_set_key_animation(p_track_idx:Int, p_key_idx:Int, p_animation:std.String):Void;
	function animation_track_get_key_animation(p_track_idx:Int, p_key_idx:Int):std.String;
	function set_length(p_time_sec:Float):Float;
	function get_length():Float;
	function set_loop_mode(p_loop_mode:gd.animation.LoopMode):gd.animation.LoopMode;
	function get_loop_mode():gd.animation.LoopMode;
	function set_step(p_size_sec:Float):Float;
	function get_step():Float;
	function clear():Void;
	function copy_track(p_track_idx:Int, p_to_animation:gd.Animation):Void;
	function compress(?p_page_size:Int = 8192, ?p_fps:Int = 120, ?p_split_tolerance:Float = 4.):Void;
	function is_capture_included():Bool;
	var length(get, set) : Float;
	var loop_mode(get, set) : gd.animation.LoopMode;
	var step(get, set) : Float;
}