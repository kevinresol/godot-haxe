package gd;
extern class Engine extends gd.Object {
	function new(?owner:Dynamic);
	static final singleton : gd.Engine;
	function set_physics_ticks_per_second(p_physics_ticks_per_second:Int):Int;
	function get_physics_ticks_per_second():Int;
	function set_max_physics_steps_per_frame(p_max_physics_steps:Int):Int;
	function get_max_physics_steps_per_frame():Int;
	function set_physics_jitter_fix(p_physics_jitter_fix:Float):Float;
	function get_physics_jitter_fix():Float;
	function get_physics_interpolation_fraction():Float;
	function set_max_fps(p_max_fps:Int):Int;
	function get_max_fps():Int;
	function set_time_scale(p_time_scale:Float):Float;
	function get_time_scale():Float;
	function get_frames_drawn():Int;
	function get_frames_per_second():Float;
	function get_physics_frames():Int;
	function get_process_frames():Int;
	function get_main_loop():gd.MainLoop;
	function get_version_info():gd.Dictionary;
	function get_author_info():gd.Dictionary;
	function get_donor_info():gd.Dictionary;
	function get_license_info():gd.Dictionary;
	function get_license_text():std.String;
	function get_architecture_name():std.String;
	function is_in_physics_frame():Bool;
	function has_singleton(p_name:std.String):Bool;
	function get_singleton(p_name:std.String):gd.Object;
	function register_singleton(p_name:std.String, p_instance:gd.Object):Void;
	function unregister_singleton(p_name:std.String):Void;
	function get_singleton_list():gd.PackedStringArray;
	function register_script_language(p_language:gd.ScriptLanguage):gd.Error;
	function unregister_script_language(p_language:gd.ScriptLanguage):gd.Error;
	function get_script_language_count():Int;
	function get_script_language(p_index:Int):gd.ScriptLanguage;
	function is_editor_hint():Bool;
	function get_write_movie_path():std.String;
	function set_print_error_messages(p_enabled:Bool):Bool;
	function is_printing_error_messages():Bool;
	var print_error_messages(get, set) : Bool;
	function get_print_error_messages():Bool;
	var physics_ticks_per_second(get, set) : Int;
	var max_physics_steps_per_frame(get, set) : Int;
	var max_fps(get, set) : Int;
	var time_scale(get, set) : Float;
	var physics_jitter_fix(get, set) : Float;
}