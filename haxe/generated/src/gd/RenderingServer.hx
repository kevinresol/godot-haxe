package gd;
class RenderingServer extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.RenderingServer.RenderingServer_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "RenderingServer");
			trace("Allocating RenderingServer");
			native = gdnative.RenderingServer.RenderingServer_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public var singleton(get, null) : gd.RenderingServer;
	static function get_singleton():gd.RenderingServer {
		if (singleton == null) singleton = new gd.RenderingServer(gdnative.RenderingServer.RenderingServer_extern.get_singleton());
		return singleton;
	}
	extern inline function __renderingserver_ptr():cpp.Pointer<gdnative.RenderingServer.RenderingServer_extern> return cast __gd.ptr;
	static public final NO_INDEX_ARRAY : Int = -1;
	static public final ARRAY_WEIGHTS_SIZE : Int = 4;
	static public final CANVAS_ITEM_Z_MIN : Int = -4096;
	static public final CANVAS_ITEM_Z_MAX : Int = 4096;
	static public final MAX_GLOW_LEVELS : Int = 7;
	static public final MAX_CURSORS : Int = 8;
	static public final MAX_2D_DIRECTIONAL_LIGHTS : Int = 8;
	static public final MAX_MESH_SURFACES : Int = 256;
	static public final MATERIAL_RENDER_PRIORITY_MIN : Int = -128;
	static public final MATERIAL_RENDER_PRIORITY_MAX : Int = 127;
	static public final ARRAY_CUSTOM_COUNT : Int = 4;
	static public final PARTICLES_EMIT_FLAG_POSITION : Int = 1;
	static public final PARTICLES_EMIT_FLAG_ROTATION_SCALE : Int = 2;
	static public final PARTICLES_EMIT_FLAG_VELOCITY : Int = 4;
	static public final PARTICLES_EMIT_FLAG_COLOR : Int = 8;
	static public final PARTICLES_EMIT_FLAG_CUSTOM : Int = 16;
	public function texture_2d_create(p_image:gd.Image):gd.RID return __renderingserver_ptr().value.texture_2d_create(((p_image : gd.Image)));
	public function texture_proxy_create(p_base:gd.RID):gd.RID return __renderingserver_ptr().value.texture_proxy_create(((p_base : gd.RID)));
	public function texture_2d_update(p_texture:gd.RID, p_image:gd.Image, p_layer:Int):Void __renderingserver_ptr().value.texture_2d_update(((p_texture : gd.RID)), ((p_image : gd.Image)), ((p_layer : Int)));
	public function texture_proxy_update(p_texture:gd.RID, p_proxy_to:gd.RID):Void __renderingserver_ptr().value.texture_proxy_update(((p_texture : gd.RID)), ((p_proxy_to : gd.RID)));
	public function texture_2d_placeholder_create():gd.RID return __renderingserver_ptr().value.texture_2d_placeholder_create();
	public function texture_2d_layered_placeholder_create(p_layered_type:gd.renderingserver.TextureLayeredType):gd.RID return __renderingserver_ptr().value.texture_2d_layered_placeholder_create(((p_layered_type : gd.renderingserver.TextureLayeredType)));
	public function texture_3d_placeholder_create():gd.RID return __renderingserver_ptr().value.texture_3d_placeholder_create();
	public function texture_2d_get(p_texture:gd.RID):gd.Image return __renderingserver_ptr().value.texture_2d_get(((p_texture : gd.RID)));
	public function texture_2d_layer_get(p_texture:gd.RID, p_layer:Int):gd.Image return __renderingserver_ptr().value.texture_2d_layer_get(((p_texture : gd.RID)), ((p_layer : Int)));
	public function texture_replace(p_texture:gd.RID, p_by_texture:gd.RID):Void __renderingserver_ptr().value.texture_replace(((p_texture : gd.RID)), ((p_by_texture : gd.RID)));
	public function texture_set_size_override(p_texture:gd.RID, p_width:Int, p_height:Int):Void __renderingserver_ptr().value.texture_set_size_override(((p_texture : gd.RID)), ((p_width : Int)), ((p_height : Int)));
	public function texture_set_path(p_texture:gd.RID, p_path:std.String):Void __renderingserver_ptr().value.texture_set_path(((p_texture : gd.RID)), ((p_path : std.String)));
	public function texture_get_path(p_texture:gd.RID):std.String return __renderingserver_ptr().value.texture_get_path(((p_texture : gd.RID)));
	public function texture_get_format(p_texture:gd.RID):gd.image.Format return __renderingserver_ptr().value.texture_get_format(((p_texture : gd.RID)));
	public function texture_set_force_redraw_if_visible(p_texture:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.texture_set_force_redraw_if_visible(((p_texture : gd.RID)), ((p_enable : Bool)));
	public function texture_rd_create(p_rd_texture:gd.RID, ?p_layer_type:gd.renderingserver.TextureLayeredType):gd.RID return switch [p_rd_texture, p_layer_type] {
		case [_, null]:__renderingserver_ptr().value.texture_rd_create(((p_rd_texture : gd.RID)));
		default:__renderingserver_ptr().value.texture_rd_create(((p_rd_texture : gd.RID)), ((p_layer_type : gd.renderingserver.TextureLayeredType)));
	};
	public function texture_get_rd_texture(p_texture:gd.RID, ?p_srgb:Bool):gd.RID return switch [p_texture, p_srgb] {
		case [_, null]:__renderingserver_ptr().value.texture_get_rd_texture(((p_texture : gd.RID)));
		default:__renderingserver_ptr().value.texture_get_rd_texture(((p_texture : gd.RID)), ((p_srgb : Bool)));
	};
	public function texture_get_native_handle(p_texture:gd.RID, ?p_srgb:Bool):Int return switch [p_texture, p_srgb] {
		case [_, null]:__renderingserver_ptr().value.texture_get_native_handle(((p_texture : gd.RID)));
		default:__renderingserver_ptr().value.texture_get_native_handle(((p_texture : gd.RID)), ((p_srgb : Bool)));
	};
	public function shader_create():gd.RID return __renderingserver_ptr().value.shader_create();
	public function shader_set_code(p_shader:gd.RID, p_code:std.String):Void __renderingserver_ptr().value.shader_set_code(((p_shader : gd.RID)), ((p_code : std.String)));
	public function shader_set_path_hint(p_shader:gd.RID, p_path:std.String):Void __renderingserver_ptr().value.shader_set_path_hint(((p_shader : gd.RID)), ((p_path : std.String)));
	public function shader_get_code(p_shader:gd.RID):std.String return __renderingserver_ptr().value.shader_get_code(((p_shader : gd.RID)));
	public function shader_get_parameter_default(p_shader:gd.RID, p_name:std.String):gd.Variant return __renderingserver_ptr().value.shader_get_parameter_default(((p_shader : gd.RID)), ((p_name : std.String)));
	public function shader_set_default_texture_parameter(p_shader:gd.RID, p_name:std.String, p_texture:gd.RID, ?p_index:Int):Void switch [p_shader, p_name, p_texture, p_index] {
		case [_, _, _, null]:__renderingserver_ptr().value.shader_set_default_texture_parameter(((p_shader : gd.RID)), ((p_name : std.String)), ((p_texture : gd.RID)));
		default:__renderingserver_ptr().value.shader_set_default_texture_parameter(((p_shader : gd.RID)), ((p_name : std.String)), ((p_texture : gd.RID)), ((p_index : Int)));
	};
	public function shader_get_default_texture_parameter(p_shader:gd.RID, p_name:std.String, ?p_index:Int):gd.RID return switch [p_shader, p_name, p_index] {
		case [_, _, null]:__renderingserver_ptr().value.shader_get_default_texture_parameter(((p_shader : gd.RID)), ((p_name : std.String)));
		default:__renderingserver_ptr().value.shader_get_default_texture_parameter(((p_shader : gd.RID)), ((p_name : std.String)), ((p_index : Int)));
	};
	public function material_create():gd.RID return __renderingserver_ptr().value.material_create();
	public function material_set_shader(p_shader_material:gd.RID, p_shader:gd.RID):Void __renderingserver_ptr().value.material_set_shader(((p_shader_material : gd.RID)), ((p_shader : gd.RID)));
	public function material_set_param(p_material:gd.RID, p_parameter:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.material_set_param(((p_material : gd.RID)), ((p_parameter : std.String)), ((p_value : gd.Variant)));
	public function material_get_param(p_material:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.material_get_param(((p_material : gd.RID)), ((p_parameter : std.String)));
	public function material_set_render_priority(p_material:gd.RID, p_priority:Int):Void __renderingserver_ptr().value.material_set_render_priority(((p_material : gd.RID)), ((p_priority : Int)));
	public function material_set_next_pass(p_material:gd.RID, p_next_material:gd.RID):Void __renderingserver_ptr().value.material_set_next_pass(((p_material : gd.RID)), ((p_next_material : gd.RID)));
	public function mesh_create():gd.RID return __renderingserver_ptr().value.mesh_create();
	public function mesh_surface_get_format_offset(p_format:Int, p_vertex_count:Int, p_array_index:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_offset(((p_format : Int)), ((p_vertex_count : Int)), ((p_array_index : Int)));
	public function mesh_surface_get_format_vertex_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_vertex_stride(((p_format : Int)), ((p_vertex_count : Int)));
	public function mesh_surface_get_format_normal_tangent_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_normal_tangent_stride(((p_format : Int)), ((p_vertex_count : Int)));
	public function mesh_surface_get_format_attribute_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_attribute_stride(((p_format : Int)), ((p_vertex_count : Int)));
	public function mesh_surface_get_format_skin_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_skin_stride(((p_format : Int)), ((p_vertex_count : Int)));
	public function mesh_add_surface(p_mesh:gd.RID, p_surface:gd.Dictionary):Void __renderingserver_ptr().value.mesh_add_surface(((p_mesh : gd.RID)), ((p_surface : gd.Dictionary)));
	public function mesh_add_surface_from_arrays(p_mesh:gd.RID, p_primitive:gd.renderingserver.PrimitiveType, p_arrays:gd.Array, ?p_blend_shapes:gd.Array, ?p_lods:gd.Dictionary, ?p_compress_format:Int):Void switch [p_mesh, p_primitive, p_arrays, p_blend_shapes, p_lods, p_compress_format] {
		case [_, _, _, null, _, _]:__renderingserver_ptr().value.mesh_add_surface_from_arrays(((p_mesh : gd.RID)), ((p_primitive : gd.renderingserver.PrimitiveType)), ((p_arrays : gd.Array)));
		case [_, _, _, _, null, _]:__renderingserver_ptr().value.mesh_add_surface_from_arrays(((p_mesh : gd.RID)), ((p_primitive : gd.renderingserver.PrimitiveType)), ((p_arrays : gd.Array)), ((p_blend_shapes : gd.Array)));
		case [_, _, _, _, _, null]:__renderingserver_ptr().value.mesh_add_surface_from_arrays(((p_mesh : gd.RID)), ((p_primitive : gd.renderingserver.PrimitiveType)), ((p_arrays : gd.Array)), ((p_blend_shapes : gd.Array)), ((p_lods : gd.Dictionary)));
		default:__renderingserver_ptr().value.mesh_add_surface_from_arrays(((p_mesh : gd.RID)), ((p_primitive : gd.renderingserver.PrimitiveType)), ((p_arrays : gd.Array)), ((p_blend_shapes : gd.Array)), ((p_lods : gd.Dictionary)), ((p_compress_format : Int)));
	};
	public function mesh_get_blend_shape_count(p_mesh:gd.RID):Int return __renderingserver_ptr().value.mesh_get_blend_shape_count(((p_mesh : gd.RID)));
	public function mesh_set_blend_shape_mode(p_mesh:gd.RID, p_mode:gd.renderingserver.BlendShapeMode):Void __renderingserver_ptr().value.mesh_set_blend_shape_mode(((p_mesh : gd.RID)), ((p_mode : gd.renderingserver.BlendShapeMode)));
	public function mesh_get_blend_shape_mode(p_mesh:gd.RID):gd.renderingserver.BlendShapeMode return __renderingserver_ptr().value.mesh_get_blend_shape_mode(((p_mesh : gd.RID)));
	public function mesh_surface_set_material(p_mesh:gd.RID, p_surface:Int, p_material:gd.RID):Void __renderingserver_ptr().value.mesh_surface_set_material(((p_mesh : gd.RID)), ((p_surface : Int)), ((p_material : gd.RID)));
	public function mesh_surface_get_material(p_mesh:gd.RID, p_surface:Int):gd.RID return __renderingserver_ptr().value.mesh_surface_get_material(((p_mesh : gd.RID)), ((p_surface : Int)));
	public function mesh_get_surface(p_mesh:gd.RID, p_surface:Int):gd.Dictionary return __renderingserver_ptr().value.mesh_get_surface(((p_mesh : gd.RID)), ((p_surface : Int)));
	public function mesh_surface_get_arrays(p_mesh:gd.RID, p_surface:Int):gd.Array return __renderingserver_ptr().value.mesh_surface_get_arrays(((p_mesh : gd.RID)), ((p_surface : Int)));
	public function mesh_get_surface_count(p_mesh:gd.RID):Int return __renderingserver_ptr().value.mesh_get_surface_count(((p_mesh : gd.RID)));
	public function mesh_set_custom_aabb(p_mesh:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.mesh_set_custom_aabb(((p_mesh : gd.RID)), ((p_aabb : gd.AABB)));
	public function mesh_get_custom_aabb(p_mesh:gd.RID):gd.AABB return __renderingserver_ptr().value.mesh_get_custom_aabb(((p_mesh : gd.RID)));
	public function mesh_clear(p_mesh:gd.RID):Void __renderingserver_ptr().value.mesh_clear(((p_mesh : gd.RID)));
	public function mesh_surface_update_vertex_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_vertex_region(((p_mesh : gd.RID)), ((p_surface : Int)), ((p_offset : Int)), ((p_data : gd.PackedByteArray)));
	public function mesh_surface_update_attribute_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_attribute_region(((p_mesh : gd.RID)), ((p_surface : Int)), ((p_offset : Int)), ((p_data : gd.PackedByteArray)));
	public function mesh_surface_update_skin_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_skin_region(((p_mesh : gd.RID)), ((p_surface : Int)), ((p_offset : Int)), ((p_data : gd.PackedByteArray)));
	public function mesh_set_shadow_mesh(p_mesh:gd.RID, p_shadow_mesh:gd.RID):Void __renderingserver_ptr().value.mesh_set_shadow_mesh(((p_mesh : gd.RID)), ((p_shadow_mesh : gd.RID)));
	public function multimesh_create():gd.RID return __renderingserver_ptr().value.multimesh_create();
	public function multimesh_allocate_data(p_multimesh:gd.RID, p_instances:Int, p_transform_format:gd.renderingserver.MultimeshTransformFormat, ?p_color_format:Bool, ?p_custom_data_format:Bool):Void switch [p_multimesh, p_instances, p_transform_format, p_color_format, p_custom_data_format] {
		case [_, _, _, null, _]:__renderingserver_ptr().value.multimesh_allocate_data(((p_multimesh : gd.RID)), ((p_instances : Int)), ((p_transform_format : gd.renderingserver.MultimeshTransformFormat)));
		case [_, _, _, _, null]:__renderingserver_ptr().value.multimesh_allocate_data(((p_multimesh : gd.RID)), ((p_instances : Int)), ((p_transform_format : gd.renderingserver.MultimeshTransformFormat)), ((p_color_format : Bool)));
		default:__renderingserver_ptr().value.multimesh_allocate_data(((p_multimesh : gd.RID)), ((p_instances : Int)), ((p_transform_format : gd.renderingserver.MultimeshTransformFormat)), ((p_color_format : Bool)), ((p_custom_data_format : Bool)));
	};
	public function multimesh_get_instance_count(p_multimesh:gd.RID):Int return __renderingserver_ptr().value.multimesh_get_instance_count(((p_multimesh : gd.RID)));
	public function multimesh_set_mesh(p_multimesh:gd.RID, p_mesh:gd.RID):Void __renderingserver_ptr().value.multimesh_set_mesh(((p_multimesh : gd.RID)), ((p_mesh : gd.RID)));
	public function multimesh_instance_set_transform(p_multimesh:gd.RID, p_index:Int, p_transform:gd.Transform3D):Void __renderingserver_ptr().value.multimesh_instance_set_transform(((p_multimesh : gd.RID)), ((p_index : Int)), ((p_transform : gd.Transform3D)));
	public function multimesh_instance_set_transform_2d(p_multimesh:gd.RID, p_index:Int, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.multimesh_instance_set_transform_2d(((p_multimesh : gd.RID)), ((p_index : Int)), ((p_transform : gd.Transform2D)));
	public function multimesh_instance_set_color(p_multimesh:gd.RID, p_index:Int, p_color:gd.Color):Void __renderingserver_ptr().value.multimesh_instance_set_color(((p_multimesh : gd.RID)), ((p_index : Int)), ((p_color : gd.Color)));
	public function multimesh_instance_set_custom_data(p_multimesh:gd.RID, p_index:Int, p_custom_data:gd.Color):Void __renderingserver_ptr().value.multimesh_instance_set_custom_data(((p_multimesh : gd.RID)), ((p_index : Int)), ((p_custom_data : gd.Color)));
	public function multimesh_get_mesh(p_multimesh:gd.RID):gd.RID return __renderingserver_ptr().value.multimesh_get_mesh(((p_multimesh : gd.RID)));
	public function multimesh_get_aabb(p_multimesh:gd.RID):gd.AABB return __renderingserver_ptr().value.multimesh_get_aabb(((p_multimesh : gd.RID)));
	public function multimesh_set_custom_aabb(p_multimesh:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.multimesh_set_custom_aabb(((p_multimesh : gd.RID)), ((p_aabb : gd.AABB)));
	public function multimesh_get_custom_aabb(p_multimesh:gd.RID):gd.AABB return __renderingserver_ptr().value.multimesh_get_custom_aabb(((p_multimesh : gd.RID)));
	public function multimesh_instance_get_transform(p_multimesh:gd.RID, p_index:Int):gd.Transform3D return __renderingserver_ptr().value.multimesh_instance_get_transform(((p_multimesh : gd.RID)), ((p_index : Int)));
	public function multimesh_instance_get_transform_2d(p_multimesh:gd.RID, p_index:Int):gd.Transform2D return __renderingserver_ptr().value.multimesh_instance_get_transform_2d(((p_multimesh : gd.RID)), ((p_index : Int)));
	public function multimesh_instance_get_color(p_multimesh:gd.RID, p_index:Int):gd.Color return __renderingserver_ptr().value.multimesh_instance_get_color(((p_multimesh : gd.RID)), ((p_index : Int)));
	public function multimesh_instance_get_custom_data(p_multimesh:gd.RID, p_index:Int):gd.Color return __renderingserver_ptr().value.multimesh_instance_get_custom_data(((p_multimesh : gd.RID)), ((p_index : Int)));
	public function multimesh_set_visible_instances(p_multimesh:gd.RID, p_visible:Int):Void __renderingserver_ptr().value.multimesh_set_visible_instances(((p_multimesh : gd.RID)), ((p_visible : Int)));
	public function multimesh_get_visible_instances(p_multimesh:gd.RID):Int return __renderingserver_ptr().value.multimesh_get_visible_instances(((p_multimesh : gd.RID)));
	public function multimesh_set_buffer(p_multimesh:gd.RID, p_buffer:gd.PackedFloat32Array):Void __renderingserver_ptr().value.multimesh_set_buffer(((p_multimesh : gd.RID)), ((p_buffer : gd.PackedFloat32Array)));
	public function multimesh_get_buffer(p_multimesh:gd.RID):gd.PackedFloat32Array return __renderingserver_ptr().value.multimesh_get_buffer(((p_multimesh : gd.RID)));
	public function skeleton_create():gd.RID return __renderingserver_ptr().value.skeleton_create();
	public function skeleton_allocate_data(p_skeleton:gd.RID, p_bones:Int, ?p_is_2d_skeleton:Bool):Void switch [p_skeleton, p_bones, p_is_2d_skeleton] {
		case [_, _, null]:__renderingserver_ptr().value.skeleton_allocate_data(((p_skeleton : gd.RID)), ((p_bones : Int)));
		default:__renderingserver_ptr().value.skeleton_allocate_data(((p_skeleton : gd.RID)), ((p_bones : Int)), ((p_is_2d_skeleton : Bool)));
	};
	public function skeleton_get_bone_count(p_skeleton:gd.RID):Int return __renderingserver_ptr().value.skeleton_get_bone_count(((p_skeleton : gd.RID)));
	public function skeleton_bone_set_transform(p_skeleton:gd.RID, p_bone:Int, p_transform:gd.Transform3D):Void __renderingserver_ptr().value.skeleton_bone_set_transform(((p_skeleton : gd.RID)), ((p_bone : Int)), ((p_transform : gd.Transform3D)));
	public function skeleton_bone_get_transform(p_skeleton:gd.RID, p_bone:Int):gd.Transform3D return __renderingserver_ptr().value.skeleton_bone_get_transform(((p_skeleton : gd.RID)), ((p_bone : Int)));
	public function skeleton_bone_set_transform_2d(p_skeleton:gd.RID, p_bone:Int, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.skeleton_bone_set_transform_2d(((p_skeleton : gd.RID)), ((p_bone : Int)), ((p_transform : gd.Transform2D)));
	public function skeleton_bone_get_transform_2d(p_skeleton:gd.RID, p_bone:Int):gd.Transform2D return __renderingserver_ptr().value.skeleton_bone_get_transform_2d(((p_skeleton : gd.RID)), ((p_bone : Int)));
	public function skeleton_set_base_transform_2d(p_skeleton:gd.RID, p_base_transform:gd.Transform2D):Void __renderingserver_ptr().value.skeleton_set_base_transform_2d(((p_skeleton : gd.RID)), ((p_base_transform : gd.Transform2D)));
	public function directional_light_create():gd.RID return __renderingserver_ptr().value.directional_light_create();
	public function omni_light_create():gd.RID return __renderingserver_ptr().value.omni_light_create();
	public function spot_light_create():gd.RID return __renderingserver_ptr().value.spot_light_create();
	public function light_set_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.light_set_color(((p_light : gd.RID)), ((p_color : gd.Color)));
	public function light_set_param(p_light:gd.RID, p_param:gd.renderingserver.LightParam, p_value:Float):Void __renderingserver_ptr().value.light_set_param(((p_light : gd.RID)), ((p_param : gd.renderingserver.LightParam)), ((p_value : Float)));
	public function light_set_shadow(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.light_set_shadow(((p_light : gd.RID)), ((p_enabled : Bool)));
	public function light_set_projector(p_light:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.light_set_projector(((p_light : gd.RID)), ((p_texture : gd.RID)));
	public function light_set_negative(p_light:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.light_set_negative(((p_light : gd.RID)), ((p_enable : Bool)));
	public function light_set_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.light_set_cull_mask(((p_light : gd.RID)), ((p_mask : Int)));
	public function light_set_distance_fade(p_decal:gd.RID, p_enabled:Bool, p_begin:Float, p_shadow:Float, p_length:Float):Void __renderingserver_ptr().value.light_set_distance_fade(((p_decal : gd.RID)), ((p_enabled : Bool)), ((p_begin : Float)), ((p_shadow : Float)), ((p_length : Float)));
	public function light_set_reverse_cull_face_mode(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.light_set_reverse_cull_face_mode(((p_light : gd.RID)), ((p_enabled : Bool)));
	public function light_set_bake_mode(p_light:gd.RID, p_bake_mode:gd.renderingserver.LightBakeMode):Void __renderingserver_ptr().value.light_set_bake_mode(((p_light : gd.RID)), ((p_bake_mode : gd.renderingserver.LightBakeMode)));
	public function light_set_max_sdfgi_cascade(p_light:gd.RID, p_cascade:Int):Void __renderingserver_ptr().value.light_set_max_sdfgi_cascade(((p_light : gd.RID)), ((p_cascade : Int)));
	public function light_omni_set_shadow_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightOmniShadowMode):Void __renderingserver_ptr().value.light_omni_set_shadow_mode(((p_light : gd.RID)), ((p_mode : gd.renderingserver.LightOmniShadowMode)));
	public function light_directional_set_shadow_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightDirectionalShadowMode):Void __renderingserver_ptr().value.light_directional_set_shadow_mode(((p_light : gd.RID)), ((p_mode : gd.renderingserver.LightDirectionalShadowMode)));
	public function light_directional_set_blend_splits(p_light:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.light_directional_set_blend_splits(((p_light : gd.RID)), ((p_enable : Bool)));
	public function light_directional_set_sky_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightDirectionalSkyMode):Void __renderingserver_ptr().value.light_directional_set_sky_mode(((p_light : gd.RID)), ((p_mode : gd.renderingserver.LightDirectionalSkyMode)));
	public function light_projectors_set_filter(p_filter:gd.renderingserver.LightProjectorFilter):Void __renderingserver_ptr().value.light_projectors_set_filter(((p_filter : gd.renderingserver.LightProjectorFilter)));
	public function positional_soft_shadow_filter_set_quality(p_quality:gd.renderingserver.ShadowQuality):Void __renderingserver_ptr().value.positional_soft_shadow_filter_set_quality(((p_quality : gd.renderingserver.ShadowQuality)));
	public function directional_soft_shadow_filter_set_quality(p_quality:gd.renderingserver.ShadowQuality):Void __renderingserver_ptr().value.directional_soft_shadow_filter_set_quality(((p_quality : gd.renderingserver.ShadowQuality)));
	public function directional_shadow_atlas_set_size(p_size:Int, p_is_16bits:Bool):Void __renderingserver_ptr().value.directional_shadow_atlas_set_size(((p_size : Int)), ((p_is_16bits : Bool)));
	public function reflection_probe_create():gd.RID return __renderingserver_ptr().value.reflection_probe_create();
	public function reflection_probe_set_update_mode(p_probe:gd.RID, p_mode:gd.renderingserver.ReflectionProbeUpdateMode):Void __renderingserver_ptr().value.reflection_probe_set_update_mode(((p_probe : gd.RID)), ((p_mode : gd.renderingserver.ReflectionProbeUpdateMode)));
	public function reflection_probe_set_intensity(p_probe:gd.RID, p_intensity:Float):Void __renderingserver_ptr().value.reflection_probe_set_intensity(((p_probe : gd.RID)), ((p_intensity : Float)));
	public function reflection_probe_set_ambient_mode(p_probe:gd.RID, p_mode:gd.renderingserver.ReflectionProbeAmbientMode):Void __renderingserver_ptr().value.reflection_probe_set_ambient_mode(((p_probe : gd.RID)), ((p_mode : gd.renderingserver.ReflectionProbeAmbientMode)));
	public function reflection_probe_set_ambient_color(p_probe:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.reflection_probe_set_ambient_color(((p_probe : gd.RID)), ((p_color : gd.Color)));
	public function reflection_probe_set_ambient_energy(p_probe:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.reflection_probe_set_ambient_energy(((p_probe : gd.RID)), ((p_energy : Float)));
	public function reflection_probe_set_max_distance(p_probe:gd.RID, p_distance:Float):Void __renderingserver_ptr().value.reflection_probe_set_max_distance(((p_probe : gd.RID)), ((p_distance : Float)));
	public function reflection_probe_set_size(p_probe:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.reflection_probe_set_size(((p_probe : gd.RID)), ((p_size : gd.Vector3)));
	public function reflection_probe_set_origin_offset(p_probe:gd.RID, p_offset:gd.Vector3):Void __renderingserver_ptr().value.reflection_probe_set_origin_offset(((p_probe : gd.RID)), ((p_offset : gd.Vector3)));
	public function reflection_probe_set_as_interior(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_as_interior(((p_probe : gd.RID)), ((p_enable : Bool)));
	public function reflection_probe_set_enable_box_projection(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_enable_box_projection(((p_probe : gd.RID)), ((p_enable : Bool)));
	public function reflection_probe_set_enable_shadows(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_enable_shadows(((p_probe : gd.RID)), ((p_enable : Bool)));
	public function reflection_probe_set_cull_mask(p_probe:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.reflection_probe_set_cull_mask(((p_probe : gd.RID)), ((p_layers : Int)));
	public function reflection_probe_set_reflection_mask(p_probe:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.reflection_probe_set_reflection_mask(((p_probe : gd.RID)), ((p_layers : Int)));
	public function reflection_probe_set_resolution(p_probe:gd.RID, p_resolution:Int):Void __renderingserver_ptr().value.reflection_probe_set_resolution(((p_probe : gd.RID)), ((p_resolution : Int)));
	public function reflection_probe_set_mesh_lod_threshold(p_probe:gd.RID, p_pixels:Float):Void __renderingserver_ptr().value.reflection_probe_set_mesh_lod_threshold(((p_probe : gd.RID)), ((p_pixels : Float)));
	public function decal_create():gd.RID return __renderingserver_ptr().value.decal_create();
	public function decal_set_size(p_decal:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.decal_set_size(((p_decal : gd.RID)), ((p_size : gd.Vector3)));
	public function decal_set_texture(p_decal:gd.RID, p_type:gd.renderingserver.DecalTexture, p_texture:gd.RID):Void __renderingserver_ptr().value.decal_set_texture(((p_decal : gd.RID)), ((p_type : gd.renderingserver.DecalTexture)), ((p_texture : gd.RID)));
	public function decal_set_emission_energy(p_decal:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.decal_set_emission_energy(((p_decal : gd.RID)), ((p_energy : Float)));
	public function decal_set_albedo_mix(p_decal:gd.RID, p_albedo_mix:Float):Void __renderingserver_ptr().value.decal_set_albedo_mix(((p_decal : gd.RID)), ((p_albedo_mix : Float)));
	public function decal_set_modulate(p_decal:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.decal_set_modulate(((p_decal : gd.RID)), ((p_color : gd.Color)));
	public function decal_set_cull_mask(p_decal:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.decal_set_cull_mask(((p_decal : gd.RID)), ((p_mask : Int)));
	public function decal_set_distance_fade(p_decal:gd.RID, p_enabled:Bool, p_begin:Float, p_length:Float):Void __renderingserver_ptr().value.decal_set_distance_fade(((p_decal : gd.RID)), ((p_enabled : Bool)), ((p_begin : Float)), ((p_length : Float)));
	public function decal_set_fade(p_decal:gd.RID, p_above:Float, p_below:Float):Void __renderingserver_ptr().value.decal_set_fade(((p_decal : gd.RID)), ((p_above : Float)), ((p_below : Float)));
	public function decal_set_normal_fade(p_decal:gd.RID, p_fade:Float):Void __renderingserver_ptr().value.decal_set_normal_fade(((p_decal : gd.RID)), ((p_fade : Float)));
	public function decals_set_filter(p_filter:gd.renderingserver.DecalFilter):Void __renderingserver_ptr().value.decals_set_filter(((p_filter : gd.renderingserver.DecalFilter)));
	public function gi_set_use_half_resolution(p_half_resolution:Bool):Void __renderingserver_ptr().value.gi_set_use_half_resolution(((p_half_resolution : Bool)));
	public function voxel_gi_create():gd.RID return __renderingserver_ptr().value.voxel_gi_create();
	public function voxel_gi_allocate_data(p_voxel_gi:gd.RID, p_to_cell_xform:gd.Transform3D, p_aabb:gd.AABB, p_octree_size:gd.Vector3i, p_octree_cells:gd.PackedByteArray, p_data_cells:gd.PackedByteArray, p_distance_field:gd.PackedByteArray, p_level_counts:gd.PackedInt32Array):Void __renderingserver_ptr().value.voxel_gi_allocate_data(((p_voxel_gi : gd.RID)), ((p_to_cell_xform : gd.Transform3D)), ((p_aabb : gd.AABB)), ((p_octree_size : gd.Vector3i)), ((p_octree_cells : gd.PackedByteArray)), ((p_data_cells : gd.PackedByteArray)), ((p_distance_field : gd.PackedByteArray)), ((p_level_counts : gd.PackedInt32Array)));
	public function voxel_gi_get_octree_size(p_voxel_gi:gd.RID):gd.Vector3i return __renderingserver_ptr().value.voxel_gi_get_octree_size(((p_voxel_gi : gd.RID)));
	public function voxel_gi_get_octree_cells(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_octree_cells(((p_voxel_gi : gd.RID)));
	public function voxel_gi_get_data_cells(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_data_cells(((p_voxel_gi : gd.RID)));
	public function voxel_gi_get_distance_field(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_distance_field(((p_voxel_gi : gd.RID)));
	public function voxel_gi_get_level_counts(p_voxel_gi:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.voxel_gi_get_level_counts(((p_voxel_gi : gd.RID)));
	public function voxel_gi_get_to_cell_xform(p_voxel_gi:gd.RID):gd.Transform3D return __renderingserver_ptr().value.voxel_gi_get_to_cell_xform(((p_voxel_gi : gd.RID)));
	public function voxel_gi_set_dynamic_range(p_voxel_gi:gd.RID, p_range:Float):Void __renderingserver_ptr().value.voxel_gi_set_dynamic_range(((p_voxel_gi : gd.RID)), ((p_range : Float)));
	public function voxel_gi_set_propagation(p_voxel_gi:gd.RID, p_amount:Float):Void __renderingserver_ptr().value.voxel_gi_set_propagation(((p_voxel_gi : gd.RID)), ((p_amount : Float)));
	public function voxel_gi_set_energy(p_voxel_gi:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.voxel_gi_set_energy(((p_voxel_gi : gd.RID)), ((p_energy : Float)));
	public function voxel_gi_set_baked_exposure_normalization(p_voxel_gi:gd.RID, p_baked_exposure:Float):Void __renderingserver_ptr().value.voxel_gi_set_baked_exposure_normalization(((p_voxel_gi : gd.RID)), ((p_baked_exposure : Float)));
	public function voxel_gi_set_bias(p_voxel_gi:gd.RID, p_bias:Float):Void __renderingserver_ptr().value.voxel_gi_set_bias(((p_voxel_gi : gd.RID)), ((p_bias : Float)));
	public function voxel_gi_set_normal_bias(p_voxel_gi:gd.RID, p_bias:Float):Void __renderingserver_ptr().value.voxel_gi_set_normal_bias(((p_voxel_gi : gd.RID)), ((p_bias : Float)));
	public function voxel_gi_set_interior(p_voxel_gi:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.voxel_gi_set_interior(((p_voxel_gi : gd.RID)), ((p_enable : Bool)));
	public function voxel_gi_set_use_two_bounces(p_voxel_gi:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.voxel_gi_set_use_two_bounces(((p_voxel_gi : gd.RID)), ((p_enable : Bool)));
	public function voxel_gi_set_quality(p_quality:gd.renderingserver.VoxelGIQuality):Void __renderingserver_ptr().value.voxel_gi_set_quality(((p_quality : gd.renderingserver.VoxelGIQuality)));
	public function lightmap_create():gd.RID return __renderingserver_ptr().value.lightmap_create();
	public function lightmap_set_textures(p_lightmap:gd.RID, p_light:gd.RID, p_uses_sh:Bool):Void __renderingserver_ptr().value.lightmap_set_textures(((p_lightmap : gd.RID)), ((p_light : gd.RID)), ((p_uses_sh : Bool)));
	public function lightmap_set_probe_bounds(p_lightmap:gd.RID, p_bounds:gd.AABB):Void __renderingserver_ptr().value.lightmap_set_probe_bounds(((p_lightmap : gd.RID)), ((p_bounds : gd.AABB)));
	public function lightmap_set_probe_interior(p_lightmap:gd.RID, p_interior:Bool):Void __renderingserver_ptr().value.lightmap_set_probe_interior(((p_lightmap : gd.RID)), ((p_interior : Bool)));
	public function lightmap_set_probe_capture_data(p_lightmap:gd.RID, p_points:gd.PackedVector3Array, p_point_sh:gd.PackedColorArray, p_tetrahedra:gd.PackedInt32Array, p_bsp_tree:gd.PackedInt32Array):Void __renderingserver_ptr().value.lightmap_set_probe_capture_data(((p_lightmap : gd.RID)), ((p_points : gd.PackedVector3Array)), ((p_point_sh : gd.PackedColorArray)), ((p_tetrahedra : gd.PackedInt32Array)), ((p_bsp_tree : gd.PackedInt32Array)));
	public function lightmap_get_probe_capture_points(p_lightmap:gd.RID):gd.PackedVector3Array return __renderingserver_ptr().value.lightmap_get_probe_capture_points(((p_lightmap : gd.RID)));
	public function lightmap_get_probe_capture_sh(p_lightmap:gd.RID):gd.PackedColorArray return __renderingserver_ptr().value.lightmap_get_probe_capture_sh(((p_lightmap : gd.RID)));
	public function lightmap_get_probe_capture_tetrahedra(p_lightmap:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.lightmap_get_probe_capture_tetrahedra(((p_lightmap : gd.RID)));
	public function lightmap_get_probe_capture_bsp_tree(p_lightmap:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.lightmap_get_probe_capture_bsp_tree(((p_lightmap : gd.RID)));
	public function lightmap_set_baked_exposure_normalization(p_lightmap:gd.RID, p_baked_exposure:Float):Void __renderingserver_ptr().value.lightmap_set_baked_exposure_normalization(((p_lightmap : gd.RID)), ((p_baked_exposure : Float)));
	public function lightmap_set_probe_capture_update_speed(p_speed:Float):Void __renderingserver_ptr().value.lightmap_set_probe_capture_update_speed(((p_speed : Float)));
	public function particles_create():gd.RID return __renderingserver_ptr().value.particles_create();
	public function particles_set_mode(p_particles:gd.RID, p_mode:gd.renderingserver.ParticlesMode):Void __renderingserver_ptr().value.particles_set_mode(((p_particles : gd.RID)), ((p_mode : gd.renderingserver.ParticlesMode)));
	public function particles_set_emitting(p_particles:gd.RID, p_emitting:Bool):Void __renderingserver_ptr().value.particles_set_emitting(((p_particles : gd.RID)), ((p_emitting : Bool)));
	public function particles_get_emitting(p_particles:gd.RID):Bool return __renderingserver_ptr().value.particles_get_emitting(((p_particles : gd.RID)));
	public function particles_set_amount(p_particles:gd.RID, p_amount:Int):Void __renderingserver_ptr().value.particles_set_amount(((p_particles : gd.RID)), ((p_amount : Int)));
	public function particles_set_amount_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_amount_ratio(((p_particles : gd.RID)), ((p_ratio : Float)));
	public function particles_set_lifetime(p_particles:gd.RID, p_lifetime:Float):Void __renderingserver_ptr().value.particles_set_lifetime(((p_particles : gd.RID)), ((p_lifetime : Float)));
	public function particles_set_one_shot(p_particles:gd.RID, p_one_shot:Bool):Void __renderingserver_ptr().value.particles_set_one_shot(((p_particles : gd.RID)), ((p_one_shot : Bool)));
	public function particles_set_pre_process_time(p_particles:gd.RID, p_time:Float):Void __renderingserver_ptr().value.particles_set_pre_process_time(((p_particles : gd.RID)), ((p_time : Float)));
	public function particles_set_explosiveness_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_explosiveness_ratio(((p_particles : gd.RID)), ((p_ratio : Float)));
	public function particles_set_randomness_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_randomness_ratio(((p_particles : gd.RID)), ((p_ratio : Float)));
	public function particles_set_interp_to_end(p_particles:gd.RID, p_factor:Float):Void __renderingserver_ptr().value.particles_set_interp_to_end(((p_particles : gd.RID)), ((p_factor : Float)));
	public function particles_set_emitter_velocity(p_particles:gd.RID, p_velocity:gd.Vector3):Void __renderingserver_ptr().value.particles_set_emitter_velocity(((p_particles : gd.RID)), ((p_velocity : gd.Vector3)));
	public function particles_set_custom_aabb(p_particles:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.particles_set_custom_aabb(((p_particles : gd.RID)), ((p_aabb : gd.AABB)));
	public function particles_set_speed_scale(p_particles:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.particles_set_speed_scale(((p_particles : gd.RID)), ((p_scale : Float)));
	public function particles_set_use_local_coordinates(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_use_local_coordinates(((p_particles : gd.RID)), ((p_enable : Bool)));
	public function particles_set_process_material(p_particles:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.particles_set_process_material(((p_particles : gd.RID)), ((p_material : gd.RID)));
	public function particles_set_fixed_fps(p_particles:gd.RID, p_fps:Int):Void __renderingserver_ptr().value.particles_set_fixed_fps(((p_particles : gd.RID)), ((p_fps : Int)));
	public function particles_set_interpolate(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_interpolate(((p_particles : gd.RID)), ((p_enable : Bool)));
	public function particles_set_fractional_delta(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_fractional_delta(((p_particles : gd.RID)), ((p_enable : Bool)));
	public function particles_set_collision_base_size(p_particles:gd.RID, p_size:Float):Void __renderingserver_ptr().value.particles_set_collision_base_size(((p_particles : gd.RID)), ((p_size : Float)));
	public function particles_set_transform_align(p_particles:gd.RID, p_align:gd.renderingserver.ParticlesTransformAlign):Void __renderingserver_ptr().value.particles_set_transform_align(((p_particles : gd.RID)), ((p_align : gd.renderingserver.ParticlesTransformAlign)));
	public function particles_set_trails(p_particles:gd.RID, p_enable:Bool, p_length_sec:Float):Void __renderingserver_ptr().value.particles_set_trails(((p_particles : gd.RID)), ((p_enable : Bool)), ((p_length_sec : Float)));
	public function particles_is_inactive(p_particles:gd.RID):Bool return __renderingserver_ptr().value.particles_is_inactive(((p_particles : gd.RID)));
	public function particles_request_process(p_particles:gd.RID):Void __renderingserver_ptr().value.particles_request_process(((p_particles : gd.RID)));
	public function particles_restart(p_particles:gd.RID):Void __renderingserver_ptr().value.particles_restart(((p_particles : gd.RID)));
	public function particles_set_subemitter(p_particles:gd.RID, p_subemitter_particles:gd.RID):Void __renderingserver_ptr().value.particles_set_subemitter(((p_particles : gd.RID)), ((p_subemitter_particles : gd.RID)));
	public function particles_emit(p_particles:gd.RID, p_transform:gd.Transform3D, p_velocity:gd.Vector3, p_color:gd.Color, p_custom:gd.Color, p_emit_flags:Int):Void __renderingserver_ptr().value.particles_emit(((p_particles : gd.RID)), ((p_transform : gd.Transform3D)), ((p_velocity : gd.Vector3)), ((p_color : gd.Color)), ((p_custom : gd.Color)), ((p_emit_flags : Int)));
	public function particles_set_draw_order(p_particles:gd.RID, p_order:gd.renderingserver.ParticlesDrawOrder):Void __renderingserver_ptr().value.particles_set_draw_order(((p_particles : gd.RID)), ((p_order : gd.renderingserver.ParticlesDrawOrder)));
	public function particles_set_draw_passes(p_particles:gd.RID, p_count:Int):Void __renderingserver_ptr().value.particles_set_draw_passes(((p_particles : gd.RID)), ((p_count : Int)));
	public function particles_set_draw_pass_mesh(p_particles:gd.RID, p_pass:Int, p_mesh:gd.RID):Void __renderingserver_ptr().value.particles_set_draw_pass_mesh(((p_particles : gd.RID)), ((p_pass : Int)), ((p_mesh : gd.RID)));
	public function particles_get_current_aabb(p_particles:gd.RID):gd.AABB return __renderingserver_ptr().value.particles_get_current_aabb(((p_particles : gd.RID)));
	public function particles_set_emission_transform(p_particles:gd.RID, p_transform:gd.Transform3D):Void __renderingserver_ptr().value.particles_set_emission_transform(((p_particles : gd.RID)), ((p_transform : gd.Transform3D)));
	public function particles_collision_create():gd.RID return __renderingserver_ptr().value.particles_collision_create();
	public function particles_collision_set_collision_type(p_particles_collision:gd.RID, p_type:gd.renderingserver.ParticlesCollisionType):Void __renderingserver_ptr().value.particles_collision_set_collision_type(((p_particles_collision : gd.RID)), ((p_type : gd.renderingserver.ParticlesCollisionType)));
	public function particles_collision_set_cull_mask(p_particles_collision:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.particles_collision_set_cull_mask(((p_particles_collision : gd.RID)), ((p_mask : Int)));
	public function particles_collision_set_sphere_radius(p_particles_collision:gd.RID, p_radius:Float):Void __renderingserver_ptr().value.particles_collision_set_sphere_radius(((p_particles_collision : gd.RID)), ((p_radius : Float)));
	public function particles_collision_set_box_extents(p_particles_collision:gd.RID, p_extents:gd.Vector3):Void __renderingserver_ptr().value.particles_collision_set_box_extents(((p_particles_collision : gd.RID)), ((p_extents : gd.Vector3)));
	public function particles_collision_set_attractor_strength(p_particles_collision:gd.RID, p_strength:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_strength(((p_particles_collision : gd.RID)), ((p_strength : Float)));
	public function particles_collision_set_attractor_directionality(p_particles_collision:gd.RID, p_amount:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_directionality(((p_particles_collision : gd.RID)), ((p_amount : Float)));
	public function particles_collision_set_attractor_attenuation(p_particles_collision:gd.RID, p_curve:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_attenuation(((p_particles_collision : gd.RID)), ((p_curve : Float)));
	public function particles_collision_set_field_texture(p_particles_collision:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.particles_collision_set_field_texture(((p_particles_collision : gd.RID)), ((p_texture : gd.RID)));
	public function particles_collision_height_field_update(p_particles_collision:gd.RID):Void __renderingserver_ptr().value.particles_collision_height_field_update(((p_particles_collision : gd.RID)));
	public function particles_collision_set_height_field_resolution(p_particles_collision:gd.RID, p_resolution:gd.renderingserver.ParticlesCollisionHeightfieldResolution):Void __renderingserver_ptr().value.particles_collision_set_height_field_resolution(((p_particles_collision : gd.RID)), ((p_resolution : gd.renderingserver.ParticlesCollisionHeightfieldResolution)));
	public function fog_volume_create():gd.RID return __renderingserver_ptr().value.fog_volume_create();
	public function fog_volume_set_shape(p_fog_volume:gd.RID, p_shape:gd.renderingserver.FogVolumeShape):Void __renderingserver_ptr().value.fog_volume_set_shape(((p_fog_volume : gd.RID)), ((p_shape : gd.renderingserver.FogVolumeShape)));
	public function fog_volume_set_size(p_fog_volume:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.fog_volume_set_size(((p_fog_volume : gd.RID)), ((p_size : gd.Vector3)));
	public function fog_volume_set_material(p_fog_volume:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.fog_volume_set_material(((p_fog_volume : gd.RID)), ((p_material : gd.RID)));
	public function visibility_notifier_create():gd.RID return __renderingserver_ptr().value.visibility_notifier_create();
	public function visibility_notifier_set_aabb(p_notifier:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.visibility_notifier_set_aabb(((p_notifier : gd.RID)), ((p_aabb : gd.AABB)));
	public function visibility_notifier_set_callbacks(p_notifier:gd.RID, p_enter_callable:gd.Callable, p_exit_callable:gd.Callable):Void __renderingserver_ptr().value.visibility_notifier_set_callbacks(((p_notifier : gd.RID)), ((p_enter_callable : gd.Callable)), ((p_exit_callable : gd.Callable)));
	public function occluder_create():gd.RID return __renderingserver_ptr().value.occluder_create();
	public function occluder_set_mesh(p_occluder:gd.RID, p_vertices:gd.PackedVector3Array, p_indices:gd.PackedInt32Array):Void __renderingserver_ptr().value.occluder_set_mesh(((p_occluder : gd.RID)), ((p_vertices : gd.PackedVector3Array)), ((p_indices : gd.PackedInt32Array)));
	public function camera_create():gd.RID return __renderingserver_ptr().value.camera_create();
	public function camera_set_perspective(p_camera:gd.RID, p_fovy_degrees:Float, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_perspective(((p_camera : gd.RID)), ((p_fovy_degrees : Float)), ((p_z_near : Float)), ((p_z_far : Float)));
	public function camera_set_orthogonal(p_camera:gd.RID, p_size:Float, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_orthogonal(((p_camera : gd.RID)), ((p_size : Float)), ((p_z_near : Float)), ((p_z_far : Float)));
	public function camera_set_frustum(p_camera:gd.RID, p_size:Float, p_offset:gd.Vector2, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_frustum(((p_camera : gd.RID)), ((p_size : Float)), ((p_offset : gd.Vector2)), ((p_z_near : Float)), ((p_z_far : Float)));
	public function camera_set_transform(p_camera:gd.RID, p_transform:gd.Transform3D):Void __renderingserver_ptr().value.camera_set_transform(((p_camera : gd.RID)), ((p_transform : gd.Transform3D)));
	public function camera_set_cull_mask(p_camera:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.camera_set_cull_mask(((p_camera : gd.RID)), ((p_layers : Int)));
	public function camera_set_environment(p_camera:gd.RID, p_env:gd.RID):Void __renderingserver_ptr().value.camera_set_environment(((p_camera : gd.RID)), ((p_env : gd.RID)));
	public function camera_set_camera_attributes(p_camera:gd.RID, p_effects:gd.RID):Void __renderingserver_ptr().value.camera_set_camera_attributes(((p_camera : gd.RID)), ((p_effects : gd.RID)));
	public function camera_set_compositor(p_camera:gd.RID, p_compositor:gd.RID):Void __renderingserver_ptr().value.camera_set_compositor(((p_camera : gd.RID)), ((p_compositor : gd.RID)));
	public function camera_set_use_vertical_aspect(p_camera:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.camera_set_use_vertical_aspect(((p_camera : gd.RID)), ((p_enable : Bool)));
	public function viewport_create():gd.RID return __renderingserver_ptr().value.viewport_create();
	public function viewport_set_use_xr(p_viewport:gd.RID, p_use_xr:Bool):Void __renderingserver_ptr().value.viewport_set_use_xr(((p_viewport : gd.RID)), ((p_use_xr : Bool)));
	public function viewport_set_size(p_viewport:gd.RID, p_width:Int, p_height:Int):Void __renderingserver_ptr().value.viewport_set_size(((p_viewport : gd.RID)), ((p_width : Int)), ((p_height : Int)));
	public function viewport_set_active(p_viewport:gd.RID, p_active:Bool):Void __renderingserver_ptr().value.viewport_set_active(((p_viewport : gd.RID)), ((p_active : Bool)));
	public function viewport_set_parent_viewport(p_viewport:gd.RID, p_parent_viewport:gd.RID):Void __renderingserver_ptr().value.viewport_set_parent_viewport(((p_viewport : gd.RID)), ((p_parent_viewport : gd.RID)));
	public function viewport_attach_to_screen(p_viewport:gd.RID, ?p_rect:gd.Rect2, ?p_screen:Int):Void switch [p_viewport, p_rect, p_screen] {
		case [_, null, _]:__renderingserver_ptr().value.viewport_attach_to_screen(((p_viewport : gd.RID)));
		case [_, _, null]:__renderingserver_ptr().value.viewport_attach_to_screen(((p_viewport : gd.RID)), ((p_rect : gd.Rect2)));
		default:__renderingserver_ptr().value.viewport_attach_to_screen(((p_viewport : gd.RID)), ((p_rect : gd.Rect2)), ((p_screen : Int)));
	};
	public function viewport_set_render_direct_to_screen(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_render_direct_to_screen(((p_viewport : gd.RID)), ((p_enabled : Bool)));
	public function viewport_set_canvas_cull_mask(p_viewport:gd.RID, p_canvas_cull_mask:Int):Void __renderingserver_ptr().value.viewport_set_canvas_cull_mask(((p_viewport : gd.RID)), ((p_canvas_cull_mask : Int)));
	public function viewport_set_scaling_3d_mode(p_viewport:gd.RID, p_scaling_3d_mode:gd.renderingserver.ViewportScaling3DMode):Void __renderingserver_ptr().value.viewport_set_scaling_3d_mode(((p_viewport : gd.RID)), ((p_scaling_3d_mode : gd.renderingserver.ViewportScaling3DMode)));
	public function viewport_set_scaling_3d_scale(p_viewport:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.viewport_set_scaling_3d_scale(((p_viewport : gd.RID)), ((p_scale : Float)));
	public function viewport_set_fsr_sharpness(p_viewport:gd.RID, p_sharpness:Float):Void __renderingserver_ptr().value.viewport_set_fsr_sharpness(((p_viewport : gd.RID)), ((p_sharpness : Float)));
	public function viewport_set_texture_mipmap_bias(p_viewport:gd.RID, p_mipmap_bias:Float):Void __renderingserver_ptr().value.viewport_set_texture_mipmap_bias(((p_viewport : gd.RID)), ((p_mipmap_bias : Float)));
	public function viewport_set_update_mode(p_viewport:gd.RID, p_update_mode:gd.renderingserver.ViewportUpdateMode):Void __renderingserver_ptr().value.viewport_set_update_mode(((p_viewport : gd.RID)), ((p_update_mode : gd.renderingserver.ViewportUpdateMode)));
	public function viewport_get_update_mode(p_viewport:gd.RID):gd.renderingserver.ViewportUpdateMode return __renderingserver_ptr().value.viewport_get_update_mode(((p_viewport : gd.RID)));
	public function viewport_set_clear_mode(p_viewport:gd.RID, p_clear_mode:gd.renderingserver.ViewportClearMode):Void __renderingserver_ptr().value.viewport_set_clear_mode(((p_viewport : gd.RID)), ((p_clear_mode : gd.renderingserver.ViewportClearMode)));
	public function viewport_get_render_target(p_viewport:gd.RID):gd.RID return __renderingserver_ptr().value.viewport_get_render_target(((p_viewport : gd.RID)));
	public function viewport_get_texture(p_viewport:gd.RID):gd.RID return __renderingserver_ptr().value.viewport_get_texture(((p_viewport : gd.RID)));
	public function viewport_set_disable_3d(p_viewport:gd.RID, p_disable:Bool):Void __renderingserver_ptr().value.viewport_set_disable_3d(((p_viewport : gd.RID)), ((p_disable : Bool)));
	public function viewport_set_disable_2d(p_viewport:gd.RID, p_disable:Bool):Void __renderingserver_ptr().value.viewport_set_disable_2d(((p_viewport : gd.RID)), ((p_disable : Bool)));
	public function viewport_set_environment_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportEnvironmentMode):Void __renderingserver_ptr().value.viewport_set_environment_mode(((p_viewport : gd.RID)), ((p_mode : gd.renderingserver.ViewportEnvironmentMode)));
	public function viewport_attach_camera(p_viewport:gd.RID, p_camera:gd.RID):Void __renderingserver_ptr().value.viewport_attach_camera(((p_viewport : gd.RID)), ((p_camera : gd.RID)));
	public function viewport_set_scenario(p_viewport:gd.RID, p_scenario:gd.RID):Void __renderingserver_ptr().value.viewport_set_scenario(((p_viewport : gd.RID)), ((p_scenario : gd.RID)));
	public function viewport_attach_canvas(p_viewport:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.viewport_attach_canvas(((p_viewport : gd.RID)), ((p_canvas : gd.RID)));
	public function viewport_remove_canvas(p_viewport:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.viewport_remove_canvas(((p_viewport : gd.RID)), ((p_canvas : gd.RID)));
	public function viewport_set_snap_2d_transforms_to_pixel(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_snap_2d_transforms_to_pixel(((p_viewport : gd.RID)), ((p_enabled : Bool)));
	public function viewport_set_snap_2d_vertices_to_pixel(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_snap_2d_vertices_to_pixel(((p_viewport : gd.RID)), ((p_enabled : Bool)));
	public function viewport_set_default_canvas_item_texture_filter(p_viewport:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.viewport_set_default_canvas_item_texture_filter(((p_viewport : gd.RID)), ((p_filter : gd.renderingserver.CanvasItemTextureFilter)));
	public function viewport_set_default_canvas_item_texture_repeat(p_viewport:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.viewport_set_default_canvas_item_texture_repeat(((p_viewport : gd.RID)), ((p_repeat : gd.renderingserver.CanvasItemTextureRepeat)));
	public function viewport_set_canvas_transform(p_viewport:gd.RID, p_canvas:gd.RID, p_offset:gd.Transform2D):Void __renderingserver_ptr().value.viewport_set_canvas_transform(((p_viewport : gd.RID)), ((p_canvas : gd.RID)), ((p_offset : gd.Transform2D)));
	public function viewport_set_canvas_stacking(p_viewport:gd.RID, p_canvas:gd.RID, p_layer:Int, p_sublayer:Int):Void __renderingserver_ptr().value.viewport_set_canvas_stacking(((p_viewport : gd.RID)), ((p_canvas : gd.RID)), ((p_layer : Int)), ((p_sublayer : Int)));
	public function viewport_set_transparent_background(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_transparent_background(((p_viewport : gd.RID)), ((p_enabled : Bool)));
	public function viewport_set_global_canvas_transform(p_viewport:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.viewport_set_global_canvas_transform(((p_viewport : gd.RID)), ((p_transform : gd.Transform2D)));
	public function viewport_set_sdf_oversize_and_scale(p_viewport:gd.RID, p_oversize:gd.renderingserver.ViewportSDFOversize, p_scale:gd.renderingserver.ViewportSDFScale):Void __renderingserver_ptr().value.viewport_set_sdf_oversize_and_scale(((p_viewport : gd.RID)), ((p_oversize : gd.renderingserver.ViewportSDFOversize)), ((p_scale : gd.renderingserver.ViewportSDFScale)));
	public function viewport_set_positional_shadow_atlas_size(p_viewport:gd.RID, p_size:Int, ?p_use_16_bits:Bool):Void switch [p_viewport, p_size, p_use_16_bits] {
		case [_, _, null]:__renderingserver_ptr().value.viewport_set_positional_shadow_atlas_size(((p_viewport : gd.RID)), ((p_size : Int)));
		default:__renderingserver_ptr().value.viewport_set_positional_shadow_atlas_size(((p_viewport : gd.RID)), ((p_size : Int)), ((p_use_16_bits : Bool)));
	};
	public function viewport_set_positional_shadow_atlas_quadrant_subdivision(p_viewport:gd.RID, p_quadrant:Int, p_subdivision:Int):Void __renderingserver_ptr().value.viewport_set_positional_shadow_atlas_quadrant_subdivision(((p_viewport : gd.RID)), ((p_quadrant : Int)), ((p_subdivision : Int)));
	public function viewport_set_msaa_3d(p_viewport:gd.RID, p_msaa:gd.renderingserver.ViewportMSAA):Void __renderingserver_ptr().value.viewport_set_msaa_3d(((p_viewport : gd.RID)), ((p_msaa : gd.renderingserver.ViewportMSAA)));
	public function viewport_set_msaa_2d(p_viewport:gd.RID, p_msaa:gd.renderingserver.ViewportMSAA):Void __renderingserver_ptr().value.viewport_set_msaa_2d(((p_viewport : gd.RID)), ((p_msaa : gd.renderingserver.ViewportMSAA)));
	public function viewport_set_use_hdr_2d(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_use_hdr_2d(((p_viewport : gd.RID)), ((p_enabled : Bool)));
	public function viewport_set_screen_space_aa(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportScreenSpaceAA):Void __renderingserver_ptr().value.viewport_set_screen_space_aa(((p_viewport : gd.RID)), ((p_mode : gd.renderingserver.ViewportScreenSpaceAA)));
	public function viewport_set_use_taa(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_taa(((p_viewport : gd.RID)), ((p_enable : Bool)));
	public function viewport_set_use_debanding(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_debanding(((p_viewport : gd.RID)), ((p_enable : Bool)));
	public function viewport_set_use_occlusion_culling(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_occlusion_culling(((p_viewport : gd.RID)), ((p_enable : Bool)));
	public function viewport_set_occlusion_rays_per_thread(p_rays_per_thread:Int):Void __renderingserver_ptr().value.viewport_set_occlusion_rays_per_thread(((p_rays_per_thread : Int)));
	public function viewport_set_occlusion_culling_build_quality(p_quality:gd.renderingserver.ViewportOcclusionCullingBuildQuality):Void __renderingserver_ptr().value.viewport_set_occlusion_culling_build_quality(((p_quality : gd.renderingserver.ViewportOcclusionCullingBuildQuality)));
	public function viewport_get_render_info(p_viewport:gd.RID, p_type:gd.renderingserver.ViewportRenderInfoType, p_info:gd.renderingserver.ViewportRenderInfo):Int return __renderingserver_ptr().value.viewport_get_render_info(((p_viewport : gd.RID)), ((p_type : gd.renderingserver.ViewportRenderInfoType)), ((p_info : gd.renderingserver.ViewportRenderInfo)));
	public function viewport_set_debug_draw(p_viewport:gd.RID, p_draw:gd.renderingserver.ViewportDebugDraw):Void __renderingserver_ptr().value.viewport_set_debug_draw(((p_viewport : gd.RID)), ((p_draw : gd.renderingserver.ViewportDebugDraw)));
	public function viewport_set_measure_render_time(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_measure_render_time(((p_viewport : gd.RID)), ((p_enable : Bool)));
	public function viewport_get_measured_render_time_cpu(p_viewport:gd.RID):Float return __renderingserver_ptr().value.viewport_get_measured_render_time_cpu(((p_viewport : gd.RID)));
	public function viewport_get_measured_render_time_gpu(p_viewport:gd.RID):Float return __renderingserver_ptr().value.viewport_get_measured_render_time_gpu(((p_viewport : gd.RID)));
	public function viewport_set_vrs_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportVRSMode):Void __renderingserver_ptr().value.viewport_set_vrs_mode(((p_viewport : gd.RID)), ((p_mode : gd.renderingserver.ViewportVRSMode)));
	public function viewport_set_vrs_update_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportVRSUpdateMode):Void __renderingserver_ptr().value.viewport_set_vrs_update_mode(((p_viewport : gd.RID)), ((p_mode : gd.renderingserver.ViewportVRSUpdateMode)));
	public function viewport_set_vrs_texture(p_viewport:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.viewport_set_vrs_texture(((p_viewport : gd.RID)), ((p_texture : gd.RID)));
	public function sky_create():gd.RID return __renderingserver_ptr().value.sky_create();
	public function sky_set_radiance_size(p_sky:gd.RID, p_radiance_size:Int):Void __renderingserver_ptr().value.sky_set_radiance_size(((p_sky : gd.RID)), ((p_radiance_size : Int)));
	public function sky_set_mode(p_sky:gd.RID, p_mode:gd.renderingserver.SkyMode):Void __renderingserver_ptr().value.sky_set_mode(((p_sky : gd.RID)), ((p_mode : gd.renderingserver.SkyMode)));
	public function sky_set_material(p_sky:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.sky_set_material(((p_sky : gd.RID)), ((p_material : gd.RID)));
	public function sky_bake_panorama(p_sky:gd.RID, p_energy:Float, p_bake_irradiance:Bool, p_size:gd.Vector2i):gd.Image return __renderingserver_ptr().value.sky_bake_panorama(((p_sky : gd.RID)), ((p_energy : Float)), ((p_bake_irradiance : Bool)), ((p_size : gd.Vector2i)));
	public function compositor_effect_create():gd.RID return __renderingserver_ptr().value.compositor_effect_create();
	public function compositor_effect_set_enabled(p_effect:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.compositor_effect_set_enabled(((p_effect : gd.RID)), ((p_enabled : Bool)));
	public function compositor_effect_set_callback(p_effect:gd.RID, p_callback_type:gd.renderingserver.CompositorEffectCallbackType, p_callback:gd.Callable):Void __renderingserver_ptr().value.compositor_effect_set_callback(((p_effect : gd.RID)), ((p_callback_type : gd.renderingserver.CompositorEffectCallbackType)), ((p_callback : gd.Callable)));
	public function compositor_effect_set_flag(p_effect:gd.RID, p_flag:gd.renderingserver.CompositorEffectFlags, p_set:Bool):Void __renderingserver_ptr().value.compositor_effect_set_flag(((p_effect : gd.RID)), ((p_flag : gd.renderingserver.CompositorEffectFlags)), ((p_set : Bool)));
	public function compositor_create():gd.RID return __renderingserver_ptr().value.compositor_create();
	public function environment_create():gd.RID return __renderingserver_ptr().value.environment_create();
	public function environment_set_background(p_env:gd.RID, p_bg:gd.renderingserver.EnvironmentBG):Void __renderingserver_ptr().value.environment_set_background(((p_env : gd.RID)), ((p_bg : gd.renderingserver.EnvironmentBG)));
	public function environment_set_sky(p_env:gd.RID, p_sky:gd.RID):Void __renderingserver_ptr().value.environment_set_sky(((p_env : gd.RID)), ((p_sky : gd.RID)));
	public function environment_set_sky_custom_fov(p_env:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.environment_set_sky_custom_fov(((p_env : gd.RID)), ((p_scale : Float)));
	public function environment_set_sky_orientation(p_env:gd.RID, p_orientation:gd.Basis):Void __renderingserver_ptr().value.environment_set_sky_orientation(((p_env : gd.RID)), ((p_orientation : gd.Basis)));
	public function environment_set_bg_color(p_env:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.environment_set_bg_color(((p_env : gd.RID)), ((p_color : gd.Color)));
	public function environment_set_bg_energy(p_env:gd.RID, p_multiplier:Float, p_exposure_value:Float):Void __renderingserver_ptr().value.environment_set_bg_energy(((p_env : gd.RID)), ((p_multiplier : Float)), ((p_exposure_value : Float)));
	public function environment_set_canvas_max_layer(p_env:gd.RID, p_max_layer:Int):Void __renderingserver_ptr().value.environment_set_canvas_max_layer(((p_env : gd.RID)), ((p_max_layer : Int)));
	public function environment_set_ambient_light(p_env:gd.RID, p_color:gd.Color, ?p_ambient:gd.renderingserver.EnvironmentAmbientSource, ?p_energy:Float, ?p_sky_contibution:Float, ?p_reflection_source:gd.renderingserver.EnvironmentReflectionSource):Void switch [p_env, p_color, p_ambient, p_energy, p_sky_contibution, p_reflection_source] {
		case [_, _, null, _, _, _]:__renderingserver_ptr().value.environment_set_ambient_light(((p_env : gd.RID)), ((p_color : gd.Color)));
		case [_, _, _, null, _, _]:__renderingserver_ptr().value.environment_set_ambient_light(((p_env : gd.RID)), ((p_color : gd.Color)), ((p_ambient : gd.renderingserver.EnvironmentAmbientSource)));
		case [_, _, _, _, null, _]:__renderingserver_ptr().value.environment_set_ambient_light(((p_env : gd.RID)), ((p_color : gd.Color)), ((p_ambient : gd.renderingserver.EnvironmentAmbientSource)), ((p_energy : Float)));
		case [_, _, _, _, _, null]:__renderingserver_ptr().value.environment_set_ambient_light(((p_env : gd.RID)), ((p_color : gd.Color)), ((p_ambient : gd.renderingserver.EnvironmentAmbientSource)), ((p_energy : Float)), ((p_sky_contibution : Float)));
		default:__renderingserver_ptr().value.environment_set_ambient_light(((p_env : gd.RID)), ((p_color : gd.Color)), ((p_ambient : gd.renderingserver.EnvironmentAmbientSource)), ((p_energy : Float)), ((p_sky_contibution : Float)), ((p_reflection_source : gd.renderingserver.EnvironmentReflectionSource)));
	};
	public function environment_set_glow(p_env:gd.RID, p_enable:Bool, p_levels:gd.PackedFloat32Array, p_intensity:Float, p_strength:Float, p_mix:Float, p_bloom_threshold:Float, p_blend_mode:gd.renderingserver.EnvironmentGlowBlendMode, p_hdr_bleed_threshold:Float, p_hdr_bleed_scale:Float, p_hdr_luminance_cap:Float, p_glow_map_strength:Float, p_glow_map:gd.RID):Void __renderingserver_ptr().value.environment_set_glow(((p_env : gd.RID)), ((p_enable : Bool)), ((p_levels : gd.PackedFloat32Array)), ((p_intensity : Float)), ((p_strength : Float)), ((p_mix : Float)), ((p_bloom_threshold : Float)), ((p_blend_mode : gd.renderingserver.EnvironmentGlowBlendMode)), ((p_hdr_bleed_threshold : Float)), ((p_hdr_bleed_scale : Float)), ((p_hdr_luminance_cap : Float)), ((p_glow_map_strength : Float)), ((p_glow_map : gd.RID)));
	public function environment_set_tonemap(p_env:gd.RID, p_tone_mapper:gd.renderingserver.EnvironmentToneMapper, p_exposure:Float, p_white:Float):Void __renderingserver_ptr().value.environment_set_tonemap(((p_env : gd.RID)), ((p_tone_mapper : gd.renderingserver.EnvironmentToneMapper)), ((p_exposure : Float)), ((p_white : Float)));
	public function environment_set_adjustment(p_env:gd.RID, p_enable:Bool, p_brightness:Float, p_contrast:Float, p_saturation:Float, p_use_1d_color_correction:Bool, p_color_correction:gd.RID):Void __renderingserver_ptr().value.environment_set_adjustment(((p_env : gd.RID)), ((p_enable : Bool)), ((p_brightness : Float)), ((p_contrast : Float)), ((p_saturation : Float)), ((p_use_1d_color_correction : Bool)), ((p_color_correction : gd.RID)));
	public function environment_set_ssr(p_env:gd.RID, p_enable:Bool, p_max_steps:Int, p_fade_in:Float, p_fade_out:Float, p_depth_tolerance:Float):Void __renderingserver_ptr().value.environment_set_ssr(((p_env : gd.RID)), ((p_enable : Bool)), ((p_max_steps : Int)), ((p_fade_in : Float)), ((p_fade_out : Float)), ((p_depth_tolerance : Float)));
	public function environment_set_ssao(p_env:gd.RID, p_enable:Bool, p_radius:Float, p_intensity:Float, p_power:Float, p_detail:Float, p_horizon:Float, p_sharpness:Float, p_light_affect:Float, p_ao_channel_affect:Float):Void __renderingserver_ptr().value.environment_set_ssao(((p_env : gd.RID)), ((p_enable : Bool)), ((p_radius : Float)), ((p_intensity : Float)), ((p_power : Float)), ((p_detail : Float)), ((p_horizon : Float)), ((p_sharpness : Float)), ((p_light_affect : Float)), ((p_ao_channel_affect : Float)));
	public function environment_set_fog(p_env:gd.RID, p_enable:Bool, p_light_color:gd.Color, p_light_energy:Float, p_sun_scatter:Float, p_density:Float, p_height:Float, p_height_density:Float, p_aerial_perspective:Float, p_sky_affect:Float, ?p_fog_mode:gd.renderingserver.EnvironmentFogMode):Void switch [p_env, p_enable, p_light_color, p_light_energy, p_sun_scatter, p_density, p_height, p_height_density, p_aerial_perspective, p_sky_affect, p_fog_mode] {
		case [_, _, _, _, _, _, _, _, _, _, null]:__renderingserver_ptr().value.environment_set_fog(((p_env : gd.RID)), ((p_enable : Bool)), ((p_light_color : gd.Color)), ((p_light_energy : Float)), ((p_sun_scatter : Float)), ((p_density : Float)), ((p_height : Float)), ((p_height_density : Float)), ((p_aerial_perspective : Float)), ((p_sky_affect : Float)));
		default:__renderingserver_ptr().value.environment_set_fog(((p_env : gd.RID)), ((p_enable : Bool)), ((p_light_color : gd.Color)), ((p_light_energy : Float)), ((p_sun_scatter : Float)), ((p_density : Float)), ((p_height : Float)), ((p_height_density : Float)), ((p_aerial_perspective : Float)), ((p_sky_affect : Float)), ((p_fog_mode : gd.renderingserver.EnvironmentFogMode)));
	};
	public function environment_set_sdfgi(p_env:gd.RID, p_enable:Bool, p_cascades:Int, p_min_cell_size:Float, p_y_scale:gd.renderingserver.EnvironmentSDFGIYScale, p_use_occlusion:Bool, p_bounce_feedback:Float, p_read_sky:Bool, p_energy:Float, p_normal_bias:Float, p_probe_bias:Float):Void __renderingserver_ptr().value.environment_set_sdfgi(((p_env : gd.RID)), ((p_enable : Bool)), ((p_cascades : Int)), ((p_min_cell_size : Float)), ((p_y_scale : gd.renderingserver.EnvironmentSDFGIYScale)), ((p_use_occlusion : Bool)), ((p_bounce_feedback : Float)), ((p_read_sky : Bool)), ((p_energy : Float)), ((p_normal_bias : Float)), ((p_probe_bias : Float)));
	public function environment_set_volumetric_fog(p_env:gd.RID, p_enable:Bool, p_density:Float, p_albedo:gd.Color, p_emission:gd.Color, p_emission_energy:Float, p_anisotropy:Float, p_length:Float, p_p_detail_spread:Float, p_gi_inject:Float, p_temporal_reprojection:Bool, p_temporal_reprojection_amount:Float, p_ambient_inject:Float, p_sky_affect:Float):Void __renderingserver_ptr().value.environment_set_volumetric_fog(((p_env : gd.RID)), ((p_enable : Bool)), ((p_density : Float)), ((p_albedo : gd.Color)), ((p_emission : gd.Color)), ((p_emission_energy : Float)), ((p_anisotropy : Float)), ((p_length : Float)), ((p_p_detail_spread : Float)), ((p_gi_inject : Float)), ((p_temporal_reprojection : Bool)), ((p_temporal_reprojection_amount : Float)), ((p_ambient_inject : Float)), ((p_sky_affect : Float)));
	public function environment_glow_set_use_bicubic_upscale(p_enable:Bool):Void __renderingserver_ptr().value.environment_glow_set_use_bicubic_upscale(((p_enable : Bool)));
	public function environment_set_ssr_roughness_quality(p_quality:gd.renderingserver.EnvironmentSSRRoughnessQuality):Void __renderingserver_ptr().value.environment_set_ssr_roughness_quality(((p_quality : gd.renderingserver.EnvironmentSSRRoughnessQuality)));
	public function environment_set_ssao_quality(p_quality:gd.renderingserver.EnvironmentSSAOQuality, p_half_size:Bool, p_adaptive_target:Float, p_blur_passes:Int, p_fadeout_from:Float, p_fadeout_to:Float):Void __renderingserver_ptr().value.environment_set_ssao_quality(((p_quality : gd.renderingserver.EnvironmentSSAOQuality)), ((p_half_size : Bool)), ((p_adaptive_target : Float)), ((p_blur_passes : Int)), ((p_fadeout_from : Float)), ((p_fadeout_to : Float)));
	public function environment_set_ssil_quality(p_quality:gd.renderingserver.EnvironmentSSILQuality, p_half_size:Bool, p_adaptive_target:Float, p_blur_passes:Int, p_fadeout_from:Float, p_fadeout_to:Float):Void __renderingserver_ptr().value.environment_set_ssil_quality(((p_quality : gd.renderingserver.EnvironmentSSILQuality)), ((p_half_size : Bool)), ((p_adaptive_target : Float)), ((p_blur_passes : Int)), ((p_fadeout_from : Float)), ((p_fadeout_to : Float)));
	public function environment_set_sdfgi_ray_count(p_ray_count:gd.renderingserver.EnvironmentSDFGIRayCount):Void __renderingserver_ptr().value.environment_set_sdfgi_ray_count(((p_ray_count : gd.renderingserver.EnvironmentSDFGIRayCount)));
	public function environment_set_sdfgi_frames_to_converge(p_frames:gd.renderingserver.EnvironmentSDFGIFramesToConverge):Void __renderingserver_ptr().value.environment_set_sdfgi_frames_to_converge(((p_frames : gd.renderingserver.EnvironmentSDFGIFramesToConverge)));
	public function environment_set_sdfgi_frames_to_update_light(p_frames:gd.renderingserver.EnvironmentSDFGIFramesToUpdateLight):Void __renderingserver_ptr().value.environment_set_sdfgi_frames_to_update_light(((p_frames : gd.renderingserver.EnvironmentSDFGIFramesToUpdateLight)));
	public function environment_set_volumetric_fog_volume_size(p_size:Int, p_depth:Int):Void __renderingserver_ptr().value.environment_set_volumetric_fog_volume_size(((p_size : Int)), ((p_depth : Int)));
	public function environment_set_volumetric_fog_filter_active(p_active:Bool):Void __renderingserver_ptr().value.environment_set_volumetric_fog_filter_active(((p_active : Bool)));
	public function environment_bake_panorama(p_environment:gd.RID, p_bake_irradiance:Bool, p_size:gd.Vector2i):gd.Image return __renderingserver_ptr().value.environment_bake_panorama(((p_environment : gd.RID)), ((p_bake_irradiance : Bool)), ((p_size : gd.Vector2i)));
	public function screen_space_roughness_limiter_set_active(p_enable:Bool, p_amount:Float, p_limit:Float):Void __renderingserver_ptr().value.screen_space_roughness_limiter_set_active(((p_enable : Bool)), ((p_amount : Float)), ((p_limit : Float)));
	public function sub_surface_scattering_set_quality(p_quality:gd.renderingserver.SubSurfaceScatteringQuality):Void __renderingserver_ptr().value.sub_surface_scattering_set_quality(((p_quality : gd.renderingserver.SubSurfaceScatteringQuality)));
	public function sub_surface_scattering_set_scale(p_scale:Float, p_depth_scale:Float):Void __renderingserver_ptr().value.sub_surface_scattering_set_scale(((p_scale : Float)), ((p_depth_scale : Float)));
	public function camera_attributes_create():gd.RID return __renderingserver_ptr().value.camera_attributes_create();
	public function camera_attributes_set_dof_blur_quality(p_quality:gd.renderingserver.DOFBlurQuality, p_use_jitter:Bool):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur_quality(((p_quality : gd.renderingserver.DOFBlurQuality)), ((p_use_jitter : Bool)));
	public function camera_attributes_set_dof_blur_bokeh_shape(p_shape:gd.renderingserver.DOFBokehShape):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur_bokeh_shape(((p_shape : gd.renderingserver.DOFBokehShape)));
	public function camera_attributes_set_dof_blur(p_camera_attributes:gd.RID, p_far_enable:Bool, p_far_distance:Float, p_far_transition:Float, p_near_enable:Bool, p_near_distance:Float, p_near_transition:Float, p_amount:Float):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur(((p_camera_attributes : gd.RID)), ((p_far_enable : Bool)), ((p_far_distance : Float)), ((p_far_transition : Float)), ((p_near_enable : Bool)), ((p_near_distance : Float)), ((p_near_transition : Float)), ((p_amount : Float)));
	public function camera_attributes_set_exposure(p_camera_attributes:gd.RID, p_multiplier:Float, p_normalization:Float):Void __renderingserver_ptr().value.camera_attributes_set_exposure(((p_camera_attributes : gd.RID)), ((p_multiplier : Float)), ((p_normalization : Float)));
	public function camera_attributes_set_auto_exposure(p_camera_attributes:gd.RID, p_enable:Bool, p_min_sensitivity:Float, p_max_sensitivity:Float, p_speed:Float, p_scale:Float):Void __renderingserver_ptr().value.camera_attributes_set_auto_exposure(((p_camera_attributes : gd.RID)), ((p_enable : Bool)), ((p_min_sensitivity : Float)), ((p_max_sensitivity : Float)), ((p_speed : Float)), ((p_scale : Float)));
	public function scenario_create():gd.RID return __renderingserver_ptr().value.scenario_create();
	public function scenario_set_environment(p_scenario:gd.RID, p_environment:gd.RID):Void __renderingserver_ptr().value.scenario_set_environment(((p_scenario : gd.RID)), ((p_environment : gd.RID)));
	public function scenario_set_fallback_environment(p_scenario:gd.RID, p_environment:gd.RID):Void __renderingserver_ptr().value.scenario_set_fallback_environment(((p_scenario : gd.RID)), ((p_environment : gd.RID)));
	public function scenario_set_camera_attributes(p_scenario:gd.RID, p_effects:gd.RID):Void __renderingserver_ptr().value.scenario_set_camera_attributes(((p_scenario : gd.RID)), ((p_effects : gd.RID)));
	public function scenario_set_compositor(p_scenario:gd.RID, p_compositor:gd.RID):Void __renderingserver_ptr().value.scenario_set_compositor(((p_scenario : gd.RID)), ((p_compositor : gd.RID)));
	public function instance_create2(p_base:gd.RID, p_scenario:gd.RID):gd.RID return __renderingserver_ptr().value.instance_create2(((p_base : gd.RID)), ((p_scenario : gd.RID)));
	public function instance_create():gd.RID return __renderingserver_ptr().value.instance_create();
	public function instance_set_base(p_instance:gd.RID, p_base:gd.RID):Void __renderingserver_ptr().value.instance_set_base(((p_instance : gd.RID)), ((p_base : gd.RID)));
	public function instance_set_scenario(p_instance:gd.RID, p_scenario:gd.RID):Void __renderingserver_ptr().value.instance_set_scenario(((p_instance : gd.RID)), ((p_scenario : gd.RID)));
	public function instance_set_layer_mask(p_instance:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.instance_set_layer_mask(((p_instance : gd.RID)), ((p_mask : Int)));
	public function instance_set_pivot_data(p_instance:gd.RID, p_sorting_offset:Float, p_use_aabb_center:Bool):Void __renderingserver_ptr().value.instance_set_pivot_data(((p_instance : gd.RID)), ((p_sorting_offset : Float)), ((p_use_aabb_center : Bool)));
	public function instance_set_transform(p_instance:gd.RID, p_transform:gd.Transform3D):Void __renderingserver_ptr().value.instance_set_transform(((p_instance : gd.RID)), ((p_transform : gd.Transform3D)));
	public function instance_attach_object_instance_id(p_instance:gd.RID, p_id:Int):Void __renderingserver_ptr().value.instance_attach_object_instance_id(((p_instance : gd.RID)), ((p_id : Int)));
	public function instance_set_blend_shape_weight(p_instance:gd.RID, p_shape:Int, p_weight:Float):Void __renderingserver_ptr().value.instance_set_blend_shape_weight(((p_instance : gd.RID)), ((p_shape : Int)), ((p_weight : Float)));
	public function instance_set_surface_override_material(p_instance:gd.RID, p_surface:Int, p_material:gd.RID):Void __renderingserver_ptr().value.instance_set_surface_override_material(((p_instance : gd.RID)), ((p_surface : Int)), ((p_material : gd.RID)));
	public function instance_set_visible(p_instance:gd.RID, p_visible:Bool):Void __renderingserver_ptr().value.instance_set_visible(((p_instance : gd.RID)), ((p_visible : Bool)));
	public function instance_geometry_set_transparency(p_instance:gd.RID, p_transparency:Float):Void __renderingserver_ptr().value.instance_geometry_set_transparency(((p_instance : gd.RID)), ((p_transparency : Float)));
	public function instance_set_custom_aabb(p_instance:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.instance_set_custom_aabb(((p_instance : gd.RID)), ((p_aabb : gd.AABB)));
	public function instance_attach_skeleton(p_instance:gd.RID, p_skeleton:gd.RID):Void __renderingserver_ptr().value.instance_attach_skeleton(((p_instance : gd.RID)), ((p_skeleton : gd.RID)));
	public function instance_set_extra_visibility_margin(p_instance:gd.RID, p_margin:Float):Void __renderingserver_ptr().value.instance_set_extra_visibility_margin(((p_instance : gd.RID)), ((p_margin : Float)));
	public function instance_set_visibility_parent(p_instance:gd.RID, p_parent:gd.RID):Void __renderingserver_ptr().value.instance_set_visibility_parent(((p_instance : gd.RID)), ((p_parent : gd.RID)));
	public function instance_set_ignore_culling(p_instance:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.instance_set_ignore_culling(((p_instance : gd.RID)), ((p_enabled : Bool)));
	public function instance_geometry_set_flag(p_instance:gd.RID, p_flag:gd.renderingserver.InstanceFlags, p_enabled:Bool):Void __renderingserver_ptr().value.instance_geometry_set_flag(((p_instance : gd.RID)), ((p_flag : gd.renderingserver.InstanceFlags)), ((p_enabled : Bool)));
	public function instance_geometry_set_cast_shadows_setting(p_instance:gd.RID, p_shadow_casting_setting:gd.renderingserver.ShadowCastingSetting):Void __renderingserver_ptr().value.instance_geometry_set_cast_shadows_setting(((p_instance : gd.RID)), ((p_shadow_casting_setting : gd.renderingserver.ShadowCastingSetting)));
	public function instance_geometry_set_material_override(p_instance:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.instance_geometry_set_material_override(((p_instance : gd.RID)), ((p_material : gd.RID)));
	public function instance_geometry_set_material_overlay(p_instance:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.instance_geometry_set_material_overlay(((p_instance : gd.RID)), ((p_material : gd.RID)));
	public function instance_geometry_set_visibility_range(p_instance:gd.RID, p_min:Float, p_max:Float, p_min_margin:Float, p_max_margin:Float, p_fade_mode:gd.renderingserver.VisibilityRangeFadeMode):Void __renderingserver_ptr().value.instance_geometry_set_visibility_range(((p_instance : gd.RID)), ((p_min : Float)), ((p_max : Float)), ((p_min_margin : Float)), ((p_max_margin : Float)), ((p_fade_mode : gd.renderingserver.VisibilityRangeFadeMode)));
	public function instance_geometry_set_lightmap(p_instance:gd.RID, p_lightmap:gd.RID, p_lightmap_uv_scale:gd.Rect2, p_lightmap_slice:Int):Void __renderingserver_ptr().value.instance_geometry_set_lightmap(((p_instance : gd.RID)), ((p_lightmap : gd.RID)), ((p_lightmap_uv_scale : gd.Rect2)), ((p_lightmap_slice : Int)));
	public function instance_geometry_set_lod_bias(p_instance:gd.RID, p_lod_bias:Float):Void __renderingserver_ptr().value.instance_geometry_set_lod_bias(((p_instance : gd.RID)), ((p_lod_bias : Float)));
	public function instance_geometry_set_shader_parameter(p_instance:gd.RID, p_parameter:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.instance_geometry_set_shader_parameter(((p_instance : gd.RID)), ((p_parameter : std.String)), ((p_value : gd.Variant)));
	public function instance_geometry_get_shader_parameter(p_instance:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.instance_geometry_get_shader_parameter(((p_instance : gd.RID)), ((p_parameter : std.String)));
	public function instance_geometry_get_shader_parameter_default_value(p_instance:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.instance_geometry_get_shader_parameter_default_value(((p_instance : gd.RID)), ((p_parameter : std.String)));
	public function instances_cull_aabb(p_aabb:gd.AABB, ?p_scenario:gd.RID):gd.PackedInt64Array return switch [p_aabb, p_scenario] {
		case [_, null]:__renderingserver_ptr().value.instances_cull_aabb(((p_aabb : gd.AABB)));
		default:__renderingserver_ptr().value.instances_cull_aabb(((p_aabb : gd.AABB)), ((p_scenario : gd.RID)));
	};
	public function instances_cull_ray(p_from:gd.Vector3, p_to:gd.Vector3, ?p_scenario:gd.RID):gd.PackedInt64Array return switch [p_from, p_to, p_scenario] {
		case [_, _, null]:__renderingserver_ptr().value.instances_cull_ray(((p_from : gd.Vector3)), ((p_to : gd.Vector3)));
		default:__renderingserver_ptr().value.instances_cull_ray(((p_from : gd.Vector3)), ((p_to : gd.Vector3)), ((p_scenario : gd.RID)));
	};
	public function canvas_create():gd.RID return __renderingserver_ptr().value.canvas_create();
	public function canvas_set_item_mirroring(p_canvas:gd.RID, p_item:gd.RID, p_mirroring:gd.Vector2):Void __renderingserver_ptr().value.canvas_set_item_mirroring(((p_canvas : gd.RID)), ((p_item : gd.RID)), ((p_mirroring : gd.Vector2)));
	public function canvas_set_item_repeat(p_item:gd.RID, p_repeat_size:gd.Vector2, p_repeat_times:Int):Void __renderingserver_ptr().value.canvas_set_item_repeat(((p_item : gd.RID)), ((p_repeat_size : gd.Vector2)), ((p_repeat_times : Int)));
	public function canvas_set_modulate(p_canvas:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_set_modulate(((p_canvas : gd.RID)), ((p_color : gd.Color)));
	public function canvas_set_disable_scale(p_disable:Bool):Void __renderingserver_ptr().value.canvas_set_disable_scale(((p_disable : Bool)));
	public function canvas_texture_create():gd.RID return __renderingserver_ptr().value.canvas_texture_create();
	public function canvas_texture_set_channel(p_canvas_texture:gd.RID, p_channel:gd.renderingserver.CanvasTextureChannel, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_texture_set_channel(((p_canvas_texture : gd.RID)), ((p_channel : gd.renderingserver.CanvasTextureChannel)), ((p_texture : gd.RID)));
	public function canvas_texture_set_shading_parameters(p_canvas_texture:gd.RID, p_base_color:gd.Color, p_shininess:Float):Void __renderingserver_ptr().value.canvas_texture_set_shading_parameters(((p_canvas_texture : gd.RID)), ((p_base_color : gd.Color)), ((p_shininess : Float)));
	public function canvas_texture_set_texture_filter(p_canvas_texture:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.canvas_texture_set_texture_filter(((p_canvas_texture : gd.RID)), ((p_filter : gd.renderingserver.CanvasItemTextureFilter)));
	public function canvas_texture_set_texture_repeat(p_canvas_texture:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.canvas_texture_set_texture_repeat(((p_canvas_texture : gd.RID)), ((p_repeat : gd.renderingserver.CanvasItemTextureRepeat)));
	public function canvas_item_create():gd.RID return __renderingserver_ptr().value.canvas_item_create();
	public function canvas_item_set_parent(p_item:gd.RID, p_parent:gd.RID):Void __renderingserver_ptr().value.canvas_item_set_parent(((p_item : gd.RID)), ((p_parent : gd.RID)));
	public function canvas_item_set_default_texture_filter(p_item:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.canvas_item_set_default_texture_filter(((p_item : gd.RID)), ((p_filter : gd.renderingserver.CanvasItemTextureFilter)));
	public function canvas_item_set_default_texture_repeat(p_item:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.canvas_item_set_default_texture_repeat(((p_item : gd.RID)), ((p_repeat : gd.renderingserver.CanvasItemTextureRepeat)));
	public function canvas_item_set_visible(p_item:gd.RID, p_visible:Bool):Void __renderingserver_ptr().value.canvas_item_set_visible(((p_item : gd.RID)), ((p_visible : Bool)));
	public function canvas_item_set_light_mask(p_item:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_item_set_light_mask(((p_item : gd.RID)), ((p_mask : Int)));
	public function canvas_item_set_visibility_layer(p_item:gd.RID, p_visibility_layer:Int):Void __renderingserver_ptr().value.canvas_item_set_visibility_layer(((p_item : gd.RID)), ((p_visibility_layer : Int)));
	public function canvas_item_set_transform(p_item:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_item_set_transform(((p_item : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_item_set_clip(p_item:gd.RID, p_clip:Bool):Void __renderingserver_ptr().value.canvas_item_set_clip(((p_item : gd.RID)), ((p_clip : Bool)));
	public function canvas_item_set_distance_field_mode(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_distance_field_mode(((p_item : gd.RID)), ((p_enabled : Bool)));
	public function canvas_item_set_custom_rect(p_item:gd.RID, p_use_custom_rect:Bool, ?p_rect:gd.Rect2):Void switch [p_item, p_use_custom_rect, p_rect] {
		case [_, _, null]:__renderingserver_ptr().value.canvas_item_set_custom_rect(((p_item : gd.RID)), ((p_use_custom_rect : Bool)));
		default:__renderingserver_ptr().value.canvas_item_set_custom_rect(((p_item : gd.RID)), ((p_use_custom_rect : Bool)), ((p_rect : gd.Rect2)));
	};
	public function canvas_item_set_modulate(p_item:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_item_set_modulate(((p_item : gd.RID)), ((p_color : gd.Color)));
	public function canvas_item_set_self_modulate(p_item:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_item_set_self_modulate(((p_item : gd.RID)), ((p_color : gd.Color)));
	public function canvas_item_set_draw_behind_parent(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_draw_behind_parent(((p_item : gd.RID)), ((p_enabled : Bool)));
	public function canvas_item_set_interpolated(p_item:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_item_set_interpolated(((p_item : gd.RID)), ((p_interpolated : Bool)));
	public function canvas_item_reset_physics_interpolation(p_item:gd.RID):Void __renderingserver_ptr().value.canvas_item_reset_physics_interpolation(((p_item : gd.RID)));
	public function canvas_item_transform_physics_interpolation(p_item:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_item_transform_physics_interpolation(((p_item : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_item_add_line(p_item:gd.RID, p_from:gd.Vector2, p_to:gd.Vector2, p_color:gd.Color, ?p_width:Float, ?p_antialiased:Bool):Void switch [p_item, p_from, p_to, p_color, p_width, p_antialiased] {
		case [_, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_line(((p_item : gd.RID)), ((p_from : gd.Vector2)), ((p_to : gd.Vector2)), ((p_color : gd.Color)));
		case [_, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_line(((p_item : gd.RID)), ((p_from : gd.Vector2)), ((p_to : gd.Vector2)), ((p_color : gd.Color)), ((p_width : Float)));
		default:__renderingserver_ptr().value.canvas_item_add_line(((p_item : gd.RID)), ((p_from : gd.Vector2)), ((p_to : gd.Vector2)), ((p_color : gd.Color)), ((p_width : Float)), ((p_antialiased : Bool)));
	};
	public function canvas_item_add_polyline(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_width:Float, ?p_antialiased:Bool):Void switch [p_item, p_points, p_colors, p_width, p_antialiased] {
		case [_, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_polyline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)));
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_polyline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_width : Float)));
		default:__renderingserver_ptr().value.canvas_item_add_polyline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_width : Float)), ((p_antialiased : Bool)));
	};
	public function canvas_item_add_multiline(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_width:Float, ?p_antialiased:Bool):Void switch [p_item, p_points, p_colors, p_width, p_antialiased] {
		case [_, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_multiline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)));
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_multiline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_width : Float)));
		default:__renderingserver_ptr().value.canvas_item_add_multiline(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_width : Float)), ((p_antialiased : Bool)));
	};
	public function canvas_item_add_rect(p_item:gd.RID, p_rect:gd.Rect2, p_color:gd.Color, ?p_antialiased:Bool):Void switch [p_item, p_rect, p_color, p_antialiased] {
		case [_, _, _, null]:__renderingserver_ptr().value.canvas_item_add_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_color : gd.Color)));
		default:__renderingserver_ptr().value.canvas_item_add_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_color : gd.Color)), ((p_antialiased : Bool)));
	};
	public function canvas_item_add_circle(p_item:gd.RID, p_pos:gd.Vector2, p_radius:Float, p_color:gd.Color, ?p_antialiased:Bool):Void switch [p_item, p_pos, p_radius, p_color, p_antialiased] {
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_circle(((p_item : gd.RID)), ((p_pos : gd.Vector2)), ((p_radius : Float)), ((p_color : gd.Color)));
		default:__renderingserver_ptr().value.canvas_item_add_circle(((p_item : gd.RID)), ((p_pos : gd.Vector2)), ((p_radius : Float)), ((p_color : gd.Color)), ((p_antialiased : Bool)));
	};
	public function canvas_item_add_texture_rect(p_item:gd.RID, p_rect:gd.Rect2, p_texture:gd.RID, ?p_tile:Bool, ?p_modulate:gd.Color, ?p_transpose:Bool):Void switch [p_item, p_rect, p_texture, p_tile, p_modulate, p_transpose] {
		case [_, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_texture_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)));
		case [_, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_texture_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_tile : Bool)));
		case [_, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_texture_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_tile : Bool)), ((p_modulate : gd.Color)));
		default:__renderingserver_ptr().value.canvas_item_add_texture_rect(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_tile : Bool)), ((p_modulate : gd.Color)), ((p_transpose : Bool)));
	};
	public function canvas_item_add_msdf_texture_rect_region(p_item:gd.RID, p_rect:gd.Rect2, p_texture:gd.RID, p_src_rect:gd.Rect2, ?p_modulate:gd.Color, ?p_outline_size:Int, ?p_px_range:Float, ?p_scale:Float):Void switch [p_item, p_rect, p_texture, p_src_rect, p_modulate, p_outline_size, p_px_range, p_scale] {
		case [_, _, _, _, null, _, _, _]:__renderingserver_ptr().value.canvas_item_add_msdf_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)));
		case [_, _, _, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_msdf_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)));
		case [_, _, _, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_msdf_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)), ((p_outline_size : Int)));
		case [_, _, _, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_msdf_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)), ((p_outline_size : Int)), ((p_px_range : Float)));
		default:__renderingserver_ptr().value.canvas_item_add_msdf_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)), ((p_outline_size : Int)), ((p_px_range : Float)), ((p_scale : Float)));
	};
	public function canvas_item_add_lcd_texture_rect_region(p_item:gd.RID, p_rect:gd.Rect2, p_texture:gd.RID, p_src_rect:gd.Rect2, p_modulate:gd.Color):Void __renderingserver_ptr().value.canvas_item_add_lcd_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)));
	public function canvas_item_add_texture_rect_region(p_item:gd.RID, p_rect:gd.Rect2, p_texture:gd.RID, p_src_rect:gd.Rect2, ?p_modulate:gd.Color, ?p_transpose:Bool, ?p_clip_uv:Bool):Void switch [p_item, p_rect, p_texture, p_src_rect, p_modulate, p_transpose, p_clip_uv] {
		case [_, _, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)));
		case [_, _, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)));
		case [_, _, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)), ((p_transpose : Bool)));
		default:__renderingserver_ptr().value.canvas_item_add_texture_rect_region(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_texture : gd.RID)), ((p_src_rect : gd.Rect2)), ((p_modulate : gd.Color)), ((p_transpose : Bool)), ((p_clip_uv : Bool)));
	};
	public function canvas_item_add_nine_patch(p_item:gd.RID, p_rect:gd.Rect2, p_source:gd.Rect2, p_texture:gd.RID, p_topleft:gd.Vector2, p_bottomright:gd.Vector2, ?p_x_axis_mode:gd.renderingserver.NinePatchAxisMode, ?p_y_axis_mode:gd.renderingserver.NinePatchAxisMode, ?p_draw_center:Bool, ?p_modulate:gd.Color):Void switch [p_item, p_rect, p_source, p_texture, p_topleft, p_bottomright, p_x_axis_mode, p_y_axis_mode, p_draw_center, p_modulate] {
		case [_, _, _, _, _, _, null, _, _, _]:__renderingserver_ptr().value.canvas_item_add_nine_patch(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_source : gd.Rect2)), ((p_texture : gd.RID)), ((p_topleft : gd.Vector2)), ((p_bottomright : gd.Vector2)));
		case [_, _, _, _, _, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_nine_patch(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_source : gd.Rect2)), ((p_texture : gd.RID)), ((p_topleft : gd.Vector2)), ((p_bottomright : gd.Vector2)), ((p_x_axis_mode : gd.renderingserver.NinePatchAxisMode)));
		case [_, _, _, _, _, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_nine_patch(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_source : gd.Rect2)), ((p_texture : gd.RID)), ((p_topleft : gd.Vector2)), ((p_bottomright : gd.Vector2)), ((p_x_axis_mode : gd.renderingserver.NinePatchAxisMode)), ((p_y_axis_mode : gd.renderingserver.NinePatchAxisMode)));
		case [_, _, _, _, _, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_nine_patch(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_source : gd.Rect2)), ((p_texture : gd.RID)), ((p_topleft : gd.Vector2)), ((p_bottomright : gd.Vector2)), ((p_x_axis_mode : gd.renderingserver.NinePatchAxisMode)), ((p_y_axis_mode : gd.renderingserver.NinePatchAxisMode)), ((p_draw_center : Bool)));
		default:__renderingserver_ptr().value.canvas_item_add_nine_patch(((p_item : gd.RID)), ((p_rect : gd.Rect2)), ((p_source : gd.Rect2)), ((p_texture : gd.RID)), ((p_topleft : gd.Vector2)), ((p_bottomright : gd.Vector2)), ((p_x_axis_mode : gd.renderingserver.NinePatchAxisMode)), ((p_y_axis_mode : gd.renderingserver.NinePatchAxisMode)), ((p_draw_center : Bool)), ((p_modulate : gd.Color)));
	};
	public function canvas_item_add_primitive(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, p_uvs:gd.PackedVector2Array, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_item_add_primitive(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_texture : gd.RID)));
	public function canvas_item_add_polygon(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_uvs:gd.PackedVector2Array, ?p_texture:gd.RID):Void switch [p_item, p_points, p_colors, p_uvs, p_texture] {
		case [_, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_polygon(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)));
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_polygon(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)));
		default:__renderingserver_ptr().value.canvas_item_add_polygon(((p_item : gd.RID)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_texture : gd.RID)));
	};
	public function canvas_item_add_triangle_array(p_item:gd.RID, p_indices:gd.PackedInt32Array, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_uvs:gd.PackedVector2Array, ?p_bones:gd.PackedInt32Array, ?p_weights:gd.PackedFloat32Array, ?p_texture:gd.RID, ?p_count:Int):Void switch [p_item, p_indices, p_points, p_colors, p_uvs, p_bones, p_weights, p_texture, p_count] {
		case [_, _, _, _, null, _, _, _, _]:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)));
		case [_, _, _, _, _, null, _, _, _]:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)));
		case [_, _, _, _, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_bones : gd.PackedInt32Array)));
		case [_, _, _, _, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_bones : gd.PackedInt32Array)), ((p_weights : gd.PackedFloat32Array)));
		case [_, _, _, _, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_bones : gd.PackedInt32Array)), ((p_weights : gd.PackedFloat32Array)), ((p_texture : gd.RID)));
		default:__renderingserver_ptr().value.canvas_item_add_triangle_array(((p_item : gd.RID)), ((p_indices : gd.PackedInt32Array)), ((p_points : gd.PackedVector2Array)), ((p_colors : gd.PackedColorArray)), ((p_uvs : gd.PackedVector2Array)), ((p_bones : gd.PackedInt32Array)), ((p_weights : gd.PackedFloat32Array)), ((p_texture : gd.RID)), ((p_count : Int)));
	};
	public function canvas_item_add_mesh(p_item:gd.RID, p_mesh:gd.RID, ?p_transform:gd.Transform2D, ?p_modulate:gd.Color, ?p_texture:gd.RID):Void switch [p_item, p_mesh, p_transform, p_modulate, p_texture] {
		case [_, _, null, _, _]:__renderingserver_ptr().value.canvas_item_add_mesh(((p_item : gd.RID)), ((p_mesh : gd.RID)));
		case [_, _, _, null, _]:__renderingserver_ptr().value.canvas_item_add_mesh(((p_item : gd.RID)), ((p_mesh : gd.RID)), ((p_transform : gd.Transform2D)));
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_mesh(((p_item : gd.RID)), ((p_mesh : gd.RID)), ((p_transform : gd.Transform2D)), ((p_modulate : gd.Color)));
		default:__renderingserver_ptr().value.canvas_item_add_mesh(((p_item : gd.RID)), ((p_mesh : gd.RID)), ((p_transform : gd.Transform2D)), ((p_modulate : gd.Color)), ((p_texture : gd.RID)));
	};
	public function canvas_item_add_multimesh(p_item:gd.RID, p_mesh:gd.RID, ?p_texture:gd.RID):Void switch [p_item, p_mesh, p_texture] {
		case [_, _, null]:__renderingserver_ptr().value.canvas_item_add_multimesh(((p_item : gd.RID)), ((p_mesh : gd.RID)));
		default:__renderingserver_ptr().value.canvas_item_add_multimesh(((p_item : gd.RID)), ((p_mesh : gd.RID)), ((p_texture : gd.RID)));
	};
	public function canvas_item_add_particles(p_item:gd.RID, p_particles:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_item_add_particles(((p_item : gd.RID)), ((p_particles : gd.RID)), ((p_texture : gd.RID)));
	public function canvas_item_add_set_transform(p_item:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_item_add_set_transform(((p_item : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_item_add_clip_ignore(p_item:gd.RID, p_ignore:Bool):Void __renderingserver_ptr().value.canvas_item_add_clip_ignore(((p_item : gd.RID)), ((p_ignore : Bool)));
	public function canvas_item_add_animation_slice(p_item:gd.RID, p_animation_length:Float, p_slice_begin:Float, p_slice_end:Float, ?p_offset:Float):Void switch [p_item, p_animation_length, p_slice_begin, p_slice_end, p_offset] {
		case [_, _, _, _, null]:__renderingserver_ptr().value.canvas_item_add_animation_slice(((p_item : gd.RID)), ((p_animation_length : Float)), ((p_slice_begin : Float)), ((p_slice_end : Float)));
		default:__renderingserver_ptr().value.canvas_item_add_animation_slice(((p_item : gd.RID)), ((p_animation_length : Float)), ((p_slice_begin : Float)), ((p_slice_end : Float)), ((p_offset : Float)));
	};
	public function canvas_item_set_sort_children_by_y(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_sort_children_by_y(((p_item : gd.RID)), ((p_enabled : Bool)));
	public function canvas_item_set_z_index(p_item:gd.RID, p_z_index:Int):Void __renderingserver_ptr().value.canvas_item_set_z_index(((p_item : gd.RID)), ((p_z_index : Int)));
	public function canvas_item_set_z_as_relative_to_parent(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_z_as_relative_to_parent(((p_item : gd.RID)), ((p_enabled : Bool)));
	public function canvas_item_set_copy_to_backbuffer(p_item:gd.RID, p_enabled:Bool, p_rect:gd.Rect2):Void __renderingserver_ptr().value.canvas_item_set_copy_to_backbuffer(((p_item : gd.RID)), ((p_enabled : Bool)), ((p_rect : gd.Rect2)));
	public function canvas_item_clear(p_item:gd.RID):Void __renderingserver_ptr().value.canvas_item_clear(((p_item : gd.RID)));
	public function canvas_item_set_draw_index(p_item:gd.RID, p_index:Int):Void __renderingserver_ptr().value.canvas_item_set_draw_index(((p_item : gd.RID)), ((p_index : Int)));
	public function canvas_item_set_material(p_item:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.canvas_item_set_material(((p_item : gd.RID)), ((p_material : gd.RID)));
	public function canvas_item_set_use_parent_material(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_use_parent_material(((p_item : gd.RID)), ((p_enabled : Bool)));
	public function canvas_item_set_visibility_notifier(p_item:gd.RID, p_enable:Bool, p_area:gd.Rect2, p_enter_callable:gd.Callable, p_exit_callable:gd.Callable):Void __renderingserver_ptr().value.canvas_item_set_visibility_notifier(((p_item : gd.RID)), ((p_enable : Bool)), ((p_area : gd.Rect2)), ((p_enter_callable : gd.Callable)), ((p_exit_callable : gd.Callable)));
	public function canvas_item_set_canvas_group_mode(p_item:gd.RID, p_mode:gd.renderingserver.CanvasGroupMode, ?p_clear_margin:Float, ?p_fit_empty:Bool, ?p_fit_margin:Float, ?p_blur_mipmaps:Bool):Void switch [p_item, p_mode, p_clear_margin, p_fit_empty, p_fit_margin, p_blur_mipmaps] {
		case [_, _, null, _, _, _]:__renderingserver_ptr().value.canvas_item_set_canvas_group_mode(((p_item : gd.RID)), ((p_mode : gd.renderingserver.CanvasGroupMode)));
		case [_, _, _, null, _, _]:__renderingserver_ptr().value.canvas_item_set_canvas_group_mode(((p_item : gd.RID)), ((p_mode : gd.renderingserver.CanvasGroupMode)), ((p_clear_margin : Float)));
		case [_, _, _, _, null, _]:__renderingserver_ptr().value.canvas_item_set_canvas_group_mode(((p_item : gd.RID)), ((p_mode : gd.renderingserver.CanvasGroupMode)), ((p_clear_margin : Float)), ((p_fit_empty : Bool)));
		case [_, _, _, _, _, null]:__renderingserver_ptr().value.canvas_item_set_canvas_group_mode(((p_item : gd.RID)), ((p_mode : gd.renderingserver.CanvasGroupMode)), ((p_clear_margin : Float)), ((p_fit_empty : Bool)), ((p_fit_margin : Float)));
		default:__renderingserver_ptr().value.canvas_item_set_canvas_group_mode(((p_item : gd.RID)), ((p_mode : gd.renderingserver.CanvasGroupMode)), ((p_clear_margin : Float)), ((p_fit_empty : Bool)), ((p_fit_margin : Float)), ((p_blur_mipmaps : Bool)));
	};
	public function debug_canvas_item_get_rect(p_item:gd.RID):gd.Rect2 return __renderingserver_ptr().value.debug_canvas_item_get_rect(((p_item : gd.RID)));
	public function canvas_light_create():gd.RID return __renderingserver_ptr().value.canvas_light_create();
	public function canvas_light_attach_to_canvas(p_light:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.canvas_light_attach_to_canvas(((p_light : gd.RID)), ((p_canvas : gd.RID)));
	public function canvas_light_set_enabled(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_set_enabled(((p_light : gd.RID)), ((p_enabled : Bool)));
	public function canvas_light_set_texture_scale(p_light:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.canvas_light_set_texture_scale(((p_light : gd.RID)), ((p_scale : Float)));
	public function canvas_light_set_transform(p_light:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_light_set_transform(((p_light : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_light_set_texture(p_light:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_light_set_texture(((p_light : gd.RID)), ((p_texture : gd.RID)));
	public function canvas_light_set_texture_offset(p_light:gd.RID, p_offset:gd.Vector2):Void __renderingserver_ptr().value.canvas_light_set_texture_offset(((p_light : gd.RID)), ((p_offset : gd.Vector2)));
	public function canvas_light_set_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_light_set_color(((p_light : gd.RID)), ((p_color : gd.Color)));
	public function canvas_light_set_height(p_light:gd.RID, p_height:Float):Void __renderingserver_ptr().value.canvas_light_set_height(((p_light : gd.RID)), ((p_height : Float)));
	public function canvas_light_set_energy(p_light:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.canvas_light_set_energy(((p_light : gd.RID)), ((p_energy : Float)));
	public function canvas_light_set_z_range(p_light:gd.RID, p_min_z:Int, p_max_z:Int):Void __renderingserver_ptr().value.canvas_light_set_z_range(((p_light : gd.RID)), ((p_min_z : Int)), ((p_max_z : Int)));
	public function canvas_light_set_layer_range(p_light:gd.RID, p_min_layer:Int, p_max_layer:Int):Void __renderingserver_ptr().value.canvas_light_set_layer_range(((p_light : gd.RID)), ((p_min_layer : Int)), ((p_max_layer : Int)));
	public function canvas_light_set_item_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_set_item_cull_mask(((p_light : gd.RID)), ((p_mask : Int)));
	public function canvas_light_set_item_shadow_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_set_item_shadow_cull_mask(((p_light : gd.RID)), ((p_mask : Int)));
	public function canvas_light_set_mode(p_light:gd.RID, p_mode:gd.renderingserver.CanvasLightMode):Void __renderingserver_ptr().value.canvas_light_set_mode(((p_light : gd.RID)), ((p_mode : gd.renderingserver.CanvasLightMode)));
	public function canvas_light_set_shadow_enabled(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_set_shadow_enabled(((p_light : gd.RID)), ((p_enabled : Bool)));
	public function canvas_light_set_shadow_filter(p_light:gd.RID, p_filter:gd.renderingserver.CanvasLightShadowFilter):Void __renderingserver_ptr().value.canvas_light_set_shadow_filter(((p_light : gd.RID)), ((p_filter : gd.renderingserver.CanvasLightShadowFilter)));
	public function canvas_light_set_shadow_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_light_set_shadow_color(((p_light : gd.RID)), ((p_color : gd.Color)));
	public function canvas_light_set_shadow_smooth(p_light:gd.RID, p_smooth:Float):Void __renderingserver_ptr().value.canvas_light_set_shadow_smooth(((p_light : gd.RID)), ((p_smooth : Float)));
	public function canvas_light_set_blend_mode(p_light:gd.RID, p_mode:gd.renderingserver.CanvasLightBlendMode):Void __renderingserver_ptr().value.canvas_light_set_blend_mode(((p_light : gd.RID)), ((p_mode : gd.renderingserver.CanvasLightBlendMode)));
	public function canvas_light_set_interpolated(p_light:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_light_set_interpolated(((p_light : gd.RID)), ((p_interpolated : Bool)));
	public function canvas_light_reset_physics_interpolation(p_light:gd.RID):Void __renderingserver_ptr().value.canvas_light_reset_physics_interpolation(((p_light : gd.RID)));
	public function canvas_light_transform_physics_interpolation(p_light:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_light_transform_physics_interpolation(((p_light : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_light_occluder_create():gd.RID return __renderingserver_ptr().value.canvas_light_occluder_create();
	public function canvas_light_occluder_attach_to_canvas(p_occluder:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_attach_to_canvas(((p_occluder : gd.RID)), ((p_canvas : gd.RID)));
	public function canvas_light_occluder_set_enabled(p_occluder:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_enabled(((p_occluder : gd.RID)), ((p_enabled : Bool)));
	public function canvas_light_occluder_set_polygon(p_occluder:gd.RID, p_polygon:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_set_polygon(((p_occluder : gd.RID)), ((p_polygon : gd.RID)));
	public function canvas_light_occluder_set_as_sdf_collision(p_occluder:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_as_sdf_collision(((p_occluder : gd.RID)), ((p_enable : Bool)));
	public function canvas_light_occluder_set_transform(p_occluder:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_light_occluder_set_transform(((p_occluder : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_light_occluder_set_light_mask(p_occluder:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_occluder_set_light_mask(((p_occluder : gd.RID)), ((p_mask : Int)));
	public function canvas_light_occluder_set_interpolated(p_occluder:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_interpolated(((p_occluder : gd.RID)), ((p_interpolated : Bool)));
	public function canvas_light_occluder_reset_physics_interpolation(p_occluder:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_reset_physics_interpolation(((p_occluder : gd.RID)));
	public function canvas_light_occluder_transform_physics_interpolation(p_occluder:gd.RID, p_transform:gd.Transform2D):Void __renderingserver_ptr().value.canvas_light_occluder_transform_physics_interpolation(((p_occluder : gd.RID)), ((p_transform : gd.Transform2D)));
	public function canvas_occluder_polygon_create():gd.RID return __renderingserver_ptr().value.canvas_occluder_polygon_create();
	public function canvas_occluder_polygon_set_shape(p_occluder_polygon:gd.RID, p_shape:gd.PackedVector2Array, p_closed:Bool):Void __renderingserver_ptr().value.canvas_occluder_polygon_set_shape(((p_occluder_polygon : gd.RID)), ((p_shape : gd.PackedVector2Array)), ((p_closed : Bool)));
	public function canvas_occluder_polygon_set_cull_mode(p_occluder_polygon:gd.RID, p_mode:gd.renderingserver.CanvasOccluderPolygonCullMode):Void __renderingserver_ptr().value.canvas_occluder_polygon_set_cull_mode(((p_occluder_polygon : gd.RID)), ((p_mode : gd.renderingserver.CanvasOccluderPolygonCullMode)));
	public function canvas_set_shadow_texture_size(p_size:Int):Void __renderingserver_ptr().value.canvas_set_shadow_texture_size(((p_size : Int)));
	public function global_shader_parameter_add(p_name:std.String, p_type:gd.renderingserver.GlobalShaderParameterType, p_default_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_add(((p_name : std.String)), ((p_type : gd.renderingserver.GlobalShaderParameterType)), ((p_default_value : gd.Variant)));
	public function global_shader_parameter_remove(p_name:std.String):Void __renderingserver_ptr().value.global_shader_parameter_remove(((p_name : std.String)));
	public function global_shader_parameter_set(p_name:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_set(((p_name : std.String)), ((p_value : gd.Variant)));
	public function global_shader_parameter_set_override(p_name:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_set_override(((p_name : std.String)), ((p_value : gd.Variant)));
	public function global_shader_parameter_get(p_name:std.String):gd.Variant return __renderingserver_ptr().value.global_shader_parameter_get(((p_name : std.String)));
	public function global_shader_parameter_get_type(p_name:std.String):gd.renderingserver.GlobalShaderParameterType return __renderingserver_ptr().value.global_shader_parameter_get_type(((p_name : std.String)));
	public function free_rid(p_rid:gd.RID):Void __renderingserver_ptr().value.free_rid(((p_rid : gd.RID)));
	public function request_frame_drawn_callback(p_callable:gd.Callable):Void __renderingserver_ptr().value.request_frame_drawn_callback(((p_callable : gd.Callable)));
	public function has_changed():Bool return __renderingserver_ptr().value.has_changed();
	public function get_rendering_info(p_info:gd.renderingserver.RenderingInfo):Int return __renderingserver_ptr().value.get_rendering_info(((p_info : gd.renderingserver.RenderingInfo)));
	public function get_video_adapter_name():std.String return __renderingserver_ptr().value.get_video_adapter_name();
	public function get_video_adapter_vendor():std.String return __renderingserver_ptr().value.get_video_adapter_vendor();
	public function get_video_adapter_type():gd.renderingdevice.DeviceType return __renderingserver_ptr().value.get_video_adapter_type();
	public function get_video_adapter_api_version():std.String return __renderingserver_ptr().value.get_video_adapter_api_version();
	public function make_sphere_mesh(p_latitudes:Int, p_longitudes:Int, p_radius:Float):gd.RID return __renderingserver_ptr().value.make_sphere_mesh(((p_latitudes : Int)), ((p_longitudes : Int)), ((p_radius : Float)));
	public function get_test_cube():gd.RID return __renderingserver_ptr().value.get_test_cube();
	public function get_test_texture():gd.RID return __renderingserver_ptr().value.get_test_texture();
	public function get_white_texture():gd.RID return __renderingserver_ptr().value.get_white_texture();
	public function set_boot_image(p_image:gd.Image, p_color:gd.Color, p_scale:Bool, ?p_use_filter:Bool):Void switch [p_image, p_color, p_scale, p_use_filter] {
		case [_, _, _, null]:__renderingserver_ptr().value.set_boot_image(((p_image : gd.Image)), ((p_color : gd.Color)), ((p_scale : Bool)));
		default:__renderingserver_ptr().value.set_boot_image(((p_image : gd.Image)), ((p_color : gd.Color)), ((p_scale : Bool)), ((p_use_filter : Bool)));
	};
	public function get_default_clear_color():gd.Color return __renderingserver_ptr().value.get_default_clear_color();
	public function set_default_clear_color(p_color:gd.Color):Void __renderingserver_ptr().value.set_default_clear_color(((p_color : gd.Color)));
	public function has_os_feature(p_feature:std.String):Bool return __renderingserver_ptr().value.has_os_feature(((p_feature : std.String)));
	public function set_debug_generate_wireframes(p_generate:Bool):Void __renderingserver_ptr().value.set_debug_generate_wireframes(((p_generate : Bool)));
	public function is_render_loop_enabled():Bool return __renderingserver_ptr().value.is_render_loop_enabled();
	public function set_render_loop_enabled(p_enabled:Bool):Bool {
		__renderingserver_ptr().value.set_render_loop_enabled(((p_enabled : Bool)));
		return p_enabled;
	}
	public function get_frame_setup_time_cpu():Float return __renderingserver_ptr().value.get_frame_setup_time_cpu();
	public function force_sync():Void __renderingserver_ptr().value.force_sync();
	public function force_draw(?p_swap_buffers:Bool, ?p_frame_step:Float):Void switch [p_swap_buffers, p_frame_step] {
		case [null, _]:__renderingserver_ptr().value.force_draw();
		case [_, null]:__renderingserver_ptr().value.force_draw(((p_swap_buffers : Bool)));
		default:__renderingserver_ptr().value.force_draw(((p_swap_buffers : Bool)), ((p_frame_step : Float)));
	};
	public function get_rendering_device():gd.RenderingDevice return __renderingserver_ptr().value.get_rendering_device();
	public function create_local_rendering_device():gd.RenderingDevice return __renderingserver_ptr().value.create_local_rendering_device();
	public function is_on_render_thread():Bool return __renderingserver_ptr().value.is_on_render_thread();
	public function call_on_render_thread(p_callable:gd.Callable):Void __renderingserver_ptr().value.call_on_render_thread(((p_callable : gd.Callable)));
	public function has_feature(p_feature:gd.renderingserver.Features):Bool return __renderingserver_ptr().value.has_feature(((p_feature : gd.renderingserver.Features)));
	public var render_loop_enabled(get, set) : Bool;
	function get_render_loop_enabled():Bool return is_render_loop_enabled();
}