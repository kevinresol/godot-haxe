package gd;
class RenderingServer extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.RenderingServer.RenderingServer_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "RenderingServer");
			trace("Allocating RenderingServer");
			native = gdnative.RenderingServer.RenderingServer_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.RenderingServer = new RenderingServer(gdnative.RenderingServer.RenderingServer_extern.get_singleton());
	extern inline function __renderingserver_ptr():cpp.Pointer<gdnative.RenderingServer.RenderingServer_extern> return cast __gd.ptr;
	public function texture_2d_create(p_image:gd.Image):gd.RID return __renderingserver_ptr().value.texture_2d_create(p_image);
	public function texture_proxy_create(p_base:gd.RID):gd.RID return __renderingserver_ptr().value.texture_proxy_create(p_base);
	public function texture_2d_update(p_texture:gd.RID, p_image:gd.Image, p_layer:Int):Void __renderingserver_ptr().value.texture_2d_update(p_texture, p_image, p_layer);
	public function texture_proxy_update(p_texture:gd.RID, p_proxy_to:gd.RID):Void __renderingserver_ptr().value.texture_proxy_update(p_texture, p_proxy_to);
	public function texture_2d_placeholder_create():gd.RID return __renderingserver_ptr().value.texture_2d_placeholder_create();
	public function texture_2d_layered_placeholder_create(p_layered_type:gd.renderingserver.TextureLayeredType):gd.RID return __renderingserver_ptr().value.texture_2d_layered_placeholder_create(p_layered_type);
	public function texture_3d_placeholder_create():gd.RID return __renderingserver_ptr().value.texture_3d_placeholder_create();
	public function texture_2d_get(p_texture:gd.RID):gd.Image return __renderingserver_ptr().value.texture_2d_get(p_texture);
	public function texture_2d_layer_get(p_texture:gd.RID, p_layer:Int):gd.Image return __renderingserver_ptr().value.texture_2d_layer_get(p_texture, p_layer);
	public function texture_replace(p_texture:gd.RID, p_by_texture:gd.RID):Void __renderingserver_ptr().value.texture_replace(p_texture, p_by_texture);
	public function texture_set_size_override(p_texture:gd.RID, p_width:Int, p_height:Int):Void __renderingserver_ptr().value.texture_set_size_override(p_texture, p_width, p_height);
	public function texture_set_path(p_texture:gd.RID, p_path:std.String):Void __renderingserver_ptr().value.texture_set_path(p_texture, p_path);
	public function texture_get_path(p_texture:gd.RID):std.String return __renderingserver_ptr().value.texture_get_path(p_texture);
	public function texture_get_format(p_texture:gd.RID):gd.image.Format return __renderingserver_ptr().value.texture_get_format(p_texture);
	public function texture_set_force_redraw_if_visible(p_texture:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.texture_set_force_redraw_if_visible(p_texture, p_enable);
	public function texture_get_rd_texture(p_texture:gd.RID, ?p_srgb:Bool = false):gd.RID return __renderingserver_ptr().value.texture_get_rd_texture(p_texture, p_srgb);
	public function texture_get_native_handle(p_texture:gd.RID, ?p_srgb:Bool = false):Int return __renderingserver_ptr().value.texture_get_native_handle(p_texture, p_srgb);
	public function shader_create():gd.RID return __renderingserver_ptr().value.shader_create();
	public function shader_set_code(p_shader:gd.RID, p_code:std.String):Void __renderingserver_ptr().value.shader_set_code(p_shader, p_code);
	public function shader_set_path_hint(p_shader:gd.RID, p_path:std.String):Void __renderingserver_ptr().value.shader_set_path_hint(p_shader, p_path);
	public function shader_get_code(p_shader:gd.RID):std.String return __renderingserver_ptr().value.shader_get_code(p_shader);
	public function shader_get_parameter_default(p_shader:gd.RID, p_name:std.String):gd.Variant return __renderingserver_ptr().value.shader_get_parameter_default(p_shader, p_name);
	public function shader_set_default_texture_parameter(p_shader:gd.RID, p_name:std.String, p_texture:gd.RID, ?p_index:Int = 0):Void __renderingserver_ptr().value.shader_set_default_texture_parameter(p_shader, p_name, p_texture, p_index);
	public function shader_get_default_texture_parameter(p_shader:gd.RID, p_name:std.String, ?p_index:Int = 0):gd.RID return __renderingserver_ptr().value.shader_get_default_texture_parameter(p_shader, p_name, p_index);
	public function material_create():gd.RID return __renderingserver_ptr().value.material_create();
	public function material_set_shader(p_shader_material:gd.RID, p_shader:gd.RID):Void __renderingserver_ptr().value.material_set_shader(p_shader_material, p_shader);
	public function material_set_param(p_material:gd.RID, p_parameter:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.material_set_param(p_material, p_parameter, p_value);
	public function material_get_param(p_material:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.material_get_param(p_material, p_parameter);
	public function material_set_render_priority(p_material:gd.RID, p_priority:Int):Void __renderingserver_ptr().value.material_set_render_priority(p_material, p_priority);
	public function material_set_next_pass(p_material:gd.RID, p_next_material:gd.RID):Void __renderingserver_ptr().value.material_set_next_pass(p_material, p_next_material);
	public function mesh_create():gd.RID return __renderingserver_ptr().value.mesh_create();
	public function mesh_surface_get_format_offset(p_format:Int, p_vertex_count:Int, p_array_index:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_offset(p_format, p_vertex_count, p_array_index);
	public function mesh_surface_get_format_vertex_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_vertex_stride(p_format, p_vertex_count);
	public function mesh_surface_get_format_normal_tangent_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_normal_tangent_stride(p_format, p_vertex_count);
	public function mesh_surface_get_format_attribute_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_attribute_stride(p_format, p_vertex_count);
	public function mesh_surface_get_format_skin_stride(p_format:Int, p_vertex_count:Int):Int return __renderingserver_ptr().value.mesh_surface_get_format_skin_stride(p_format, p_vertex_count);
	public function mesh_add_surface(p_mesh:gd.RID, p_surface:gd.Dictionary):Void __renderingserver_ptr().value.mesh_add_surface(p_mesh, p_surface);
	public function mesh_get_blend_shape_count(p_mesh:gd.RID):Int return __renderingserver_ptr().value.mesh_get_blend_shape_count(p_mesh);
	public function mesh_set_blend_shape_mode(p_mesh:gd.RID, p_mode:gd.renderingserver.BlendShapeMode):Void __renderingserver_ptr().value.mesh_set_blend_shape_mode(p_mesh, p_mode);
	public function mesh_get_blend_shape_mode(p_mesh:gd.RID):gd.renderingserver.BlendShapeMode return __renderingserver_ptr().value.mesh_get_blend_shape_mode(p_mesh);
	public function mesh_surface_set_material(p_mesh:gd.RID, p_surface:Int, p_material:gd.RID):Void __renderingserver_ptr().value.mesh_surface_set_material(p_mesh, p_surface, p_material);
	public function mesh_surface_get_material(p_mesh:gd.RID, p_surface:Int):gd.RID return __renderingserver_ptr().value.mesh_surface_get_material(p_mesh, p_surface);
	public function mesh_get_surface(p_mesh:gd.RID, p_surface:Int):gd.Dictionary return __renderingserver_ptr().value.mesh_get_surface(p_mesh, p_surface);
	public function mesh_surface_get_arrays(p_mesh:gd.RID, p_surface:Int):gd.Array return __renderingserver_ptr().value.mesh_surface_get_arrays(p_mesh, p_surface);
	public function mesh_get_surface_count(p_mesh:gd.RID):Int return __renderingserver_ptr().value.mesh_get_surface_count(p_mesh);
	public function mesh_set_custom_aabb(p_mesh:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.mesh_set_custom_aabb(p_mesh, p_aabb);
	public function mesh_get_custom_aabb(p_mesh:gd.RID):gd.AABB return __renderingserver_ptr().value.mesh_get_custom_aabb(p_mesh);
	public function mesh_clear(p_mesh:gd.RID):Void __renderingserver_ptr().value.mesh_clear(p_mesh);
	public function mesh_surface_update_vertex_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_vertex_region(p_mesh, p_surface, p_offset, p_data);
	public function mesh_surface_update_attribute_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_attribute_region(p_mesh, p_surface, p_offset, p_data);
	public function mesh_surface_update_skin_region(p_mesh:gd.RID, p_surface:Int, p_offset:Int, p_data:gd.PackedByteArray):Void __renderingserver_ptr().value.mesh_surface_update_skin_region(p_mesh, p_surface, p_offset, p_data);
	public function mesh_set_shadow_mesh(p_mesh:gd.RID, p_shadow_mesh:gd.RID):Void __renderingserver_ptr().value.mesh_set_shadow_mesh(p_mesh, p_shadow_mesh);
	public function multimesh_create():gd.RID return __renderingserver_ptr().value.multimesh_create();
	public function multimesh_allocate_data(p_multimesh:gd.RID, p_instances:Int, p_transform_format:gd.renderingserver.MultimeshTransformFormat, ?p_color_format:Bool = false, ?p_custom_data_format:Bool = false):Void __renderingserver_ptr().value.multimesh_allocate_data(p_multimesh, p_instances, p_transform_format, p_color_format, p_custom_data_format);
	public function multimesh_get_instance_count(p_multimesh:gd.RID):Int return __renderingserver_ptr().value.multimesh_get_instance_count(p_multimesh);
	public function multimesh_set_mesh(p_multimesh:gd.RID, p_mesh:gd.RID):Void __renderingserver_ptr().value.multimesh_set_mesh(p_multimesh, p_mesh);
	public function multimesh_instance_set_color(p_multimesh:gd.RID, p_index:Int, p_color:gd.Color):Void __renderingserver_ptr().value.multimesh_instance_set_color(p_multimesh, p_index, p_color);
	public function multimesh_instance_set_custom_data(p_multimesh:gd.RID, p_index:Int, p_custom_data:gd.Color):Void __renderingserver_ptr().value.multimesh_instance_set_custom_data(p_multimesh, p_index, p_custom_data);
	public function multimesh_get_mesh(p_multimesh:gd.RID):gd.RID return __renderingserver_ptr().value.multimesh_get_mesh(p_multimesh);
	public function multimesh_get_aabb(p_multimesh:gd.RID):gd.AABB return __renderingserver_ptr().value.multimesh_get_aabb(p_multimesh);
	public function multimesh_set_custom_aabb(p_multimesh:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.multimesh_set_custom_aabb(p_multimesh, p_aabb);
	public function multimesh_get_custom_aabb(p_multimesh:gd.RID):gd.AABB return __renderingserver_ptr().value.multimesh_get_custom_aabb(p_multimesh);
	public function multimesh_instance_get_color(p_multimesh:gd.RID, p_index:Int):gd.Color return __renderingserver_ptr().value.multimesh_instance_get_color(p_multimesh, p_index);
	public function multimesh_instance_get_custom_data(p_multimesh:gd.RID, p_index:Int):gd.Color return __renderingserver_ptr().value.multimesh_instance_get_custom_data(p_multimesh, p_index);
	public function multimesh_set_visible_instances(p_multimesh:gd.RID, p_visible:Int):Void __renderingserver_ptr().value.multimesh_set_visible_instances(p_multimesh, p_visible);
	public function multimesh_get_visible_instances(p_multimesh:gd.RID):Int return __renderingserver_ptr().value.multimesh_get_visible_instances(p_multimesh);
	public function multimesh_set_buffer(p_multimesh:gd.RID, p_buffer:gd.PackedFloat32Array):Void __renderingserver_ptr().value.multimesh_set_buffer(p_multimesh, p_buffer);
	public function multimesh_get_buffer(p_multimesh:gd.RID):gd.PackedFloat32Array return __renderingserver_ptr().value.multimesh_get_buffer(p_multimesh);
	public function skeleton_create():gd.RID return __renderingserver_ptr().value.skeleton_create();
	public function skeleton_allocate_data(p_skeleton:gd.RID, p_bones:Int, ?p_is_2d_skeleton:Bool = false):Void __renderingserver_ptr().value.skeleton_allocate_data(p_skeleton, p_bones, p_is_2d_skeleton);
	public function skeleton_get_bone_count(p_skeleton:gd.RID):Int return __renderingserver_ptr().value.skeleton_get_bone_count(p_skeleton);
	public function directional_light_create():gd.RID return __renderingserver_ptr().value.directional_light_create();
	public function omni_light_create():gd.RID return __renderingserver_ptr().value.omni_light_create();
	public function spot_light_create():gd.RID return __renderingserver_ptr().value.spot_light_create();
	public function light_set_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.light_set_color(p_light, p_color);
	public function light_set_param(p_light:gd.RID, p_param:gd.renderingserver.LightParam, p_value:Float):Void __renderingserver_ptr().value.light_set_param(p_light, p_param, p_value);
	public function light_set_shadow(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.light_set_shadow(p_light, p_enabled);
	public function light_set_projector(p_light:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.light_set_projector(p_light, p_texture);
	public function light_set_negative(p_light:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.light_set_negative(p_light, p_enable);
	public function light_set_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.light_set_cull_mask(p_light, p_mask);
	public function light_set_distance_fade(p_decal:gd.RID, p_enabled:Bool, p_begin:Float, p_shadow:Float, p_length:Float):Void __renderingserver_ptr().value.light_set_distance_fade(p_decal, p_enabled, p_begin, p_shadow, p_length);
	public function light_set_reverse_cull_face_mode(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.light_set_reverse_cull_face_mode(p_light, p_enabled);
	public function light_set_bake_mode(p_light:gd.RID, p_bake_mode:gd.renderingserver.LightBakeMode):Void __renderingserver_ptr().value.light_set_bake_mode(p_light, p_bake_mode);
	public function light_set_max_sdfgi_cascade(p_light:gd.RID, p_cascade:Int):Void __renderingserver_ptr().value.light_set_max_sdfgi_cascade(p_light, p_cascade);
	public function light_omni_set_shadow_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightOmniShadowMode):Void __renderingserver_ptr().value.light_omni_set_shadow_mode(p_light, p_mode);
	public function light_directional_set_shadow_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightDirectionalShadowMode):Void __renderingserver_ptr().value.light_directional_set_shadow_mode(p_light, p_mode);
	public function light_directional_set_blend_splits(p_light:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.light_directional_set_blend_splits(p_light, p_enable);
	public function light_directional_set_sky_mode(p_light:gd.RID, p_mode:gd.renderingserver.LightDirectionalSkyMode):Void __renderingserver_ptr().value.light_directional_set_sky_mode(p_light, p_mode);
	public function light_projectors_set_filter(p_filter:gd.renderingserver.LightProjectorFilter):Void __renderingserver_ptr().value.light_projectors_set_filter(p_filter);
	public function positional_soft_shadow_filter_set_quality(p_quality:gd.renderingserver.ShadowQuality):Void __renderingserver_ptr().value.positional_soft_shadow_filter_set_quality(p_quality);
	public function directional_soft_shadow_filter_set_quality(p_quality:gd.renderingserver.ShadowQuality):Void __renderingserver_ptr().value.directional_soft_shadow_filter_set_quality(p_quality);
	public function directional_shadow_atlas_set_size(p_size:Int, p_is_16bits:Bool):Void __renderingserver_ptr().value.directional_shadow_atlas_set_size(p_size, p_is_16bits);
	public function reflection_probe_create():gd.RID return __renderingserver_ptr().value.reflection_probe_create();
	public function reflection_probe_set_update_mode(p_probe:gd.RID, p_mode:gd.renderingserver.ReflectionProbeUpdateMode):Void __renderingserver_ptr().value.reflection_probe_set_update_mode(p_probe, p_mode);
	public function reflection_probe_set_intensity(p_probe:gd.RID, p_intensity:Float):Void __renderingserver_ptr().value.reflection_probe_set_intensity(p_probe, p_intensity);
	public function reflection_probe_set_ambient_mode(p_probe:gd.RID, p_mode:gd.renderingserver.ReflectionProbeAmbientMode):Void __renderingserver_ptr().value.reflection_probe_set_ambient_mode(p_probe, p_mode);
	public function reflection_probe_set_ambient_color(p_probe:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.reflection_probe_set_ambient_color(p_probe, p_color);
	public function reflection_probe_set_ambient_energy(p_probe:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.reflection_probe_set_ambient_energy(p_probe, p_energy);
	public function reflection_probe_set_max_distance(p_probe:gd.RID, p_distance:Float):Void __renderingserver_ptr().value.reflection_probe_set_max_distance(p_probe, p_distance);
	public function reflection_probe_set_size(p_probe:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.reflection_probe_set_size(p_probe, p_size);
	public function reflection_probe_set_origin_offset(p_probe:gd.RID, p_offset:gd.Vector3):Void __renderingserver_ptr().value.reflection_probe_set_origin_offset(p_probe, p_offset);
	public function reflection_probe_set_as_interior(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_as_interior(p_probe, p_enable);
	public function reflection_probe_set_enable_box_projection(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_enable_box_projection(p_probe, p_enable);
	public function reflection_probe_set_enable_shadows(p_probe:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.reflection_probe_set_enable_shadows(p_probe, p_enable);
	public function reflection_probe_set_cull_mask(p_probe:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.reflection_probe_set_cull_mask(p_probe, p_layers);
	public function reflection_probe_set_reflection_mask(p_probe:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.reflection_probe_set_reflection_mask(p_probe, p_layers);
	public function reflection_probe_set_resolution(p_probe:gd.RID, p_resolution:Int):Void __renderingserver_ptr().value.reflection_probe_set_resolution(p_probe, p_resolution);
	public function reflection_probe_set_mesh_lod_threshold(p_probe:gd.RID, p_pixels:Float):Void __renderingserver_ptr().value.reflection_probe_set_mesh_lod_threshold(p_probe, p_pixels);
	public function decal_create():gd.RID return __renderingserver_ptr().value.decal_create();
	public function decal_set_size(p_decal:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.decal_set_size(p_decal, p_size);
	public function decal_set_texture(p_decal:gd.RID, p_type:gd.renderingserver.DecalTexture, p_texture:gd.RID):Void __renderingserver_ptr().value.decal_set_texture(p_decal, p_type, p_texture);
	public function decal_set_emission_energy(p_decal:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.decal_set_emission_energy(p_decal, p_energy);
	public function decal_set_albedo_mix(p_decal:gd.RID, p_albedo_mix:Float):Void __renderingserver_ptr().value.decal_set_albedo_mix(p_decal, p_albedo_mix);
	public function decal_set_modulate(p_decal:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.decal_set_modulate(p_decal, p_color);
	public function decal_set_cull_mask(p_decal:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.decal_set_cull_mask(p_decal, p_mask);
	public function decal_set_distance_fade(p_decal:gd.RID, p_enabled:Bool, p_begin:Float, p_length:Float):Void __renderingserver_ptr().value.decal_set_distance_fade(p_decal, p_enabled, p_begin, p_length);
	public function decal_set_fade(p_decal:gd.RID, p_above:Float, p_below:Float):Void __renderingserver_ptr().value.decal_set_fade(p_decal, p_above, p_below);
	public function decal_set_normal_fade(p_decal:gd.RID, p_fade:Float):Void __renderingserver_ptr().value.decal_set_normal_fade(p_decal, p_fade);
	public function decals_set_filter(p_filter:gd.renderingserver.DecalFilter):Void __renderingserver_ptr().value.decals_set_filter(p_filter);
	public function gi_set_use_half_resolution(p_half_resolution:Bool):Void __renderingserver_ptr().value.gi_set_use_half_resolution(p_half_resolution);
	public function voxel_gi_create():gd.RID return __renderingserver_ptr().value.voxel_gi_create();
	public function voxel_gi_get_octree_size(p_voxel_gi:gd.RID):gd.Vector3i return __renderingserver_ptr().value.voxel_gi_get_octree_size(p_voxel_gi);
	public function voxel_gi_get_octree_cells(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_octree_cells(p_voxel_gi);
	public function voxel_gi_get_data_cells(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_data_cells(p_voxel_gi);
	public function voxel_gi_get_distance_field(p_voxel_gi:gd.RID):gd.PackedByteArray return __renderingserver_ptr().value.voxel_gi_get_distance_field(p_voxel_gi);
	public function voxel_gi_get_level_counts(p_voxel_gi:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.voxel_gi_get_level_counts(p_voxel_gi);
	public function voxel_gi_set_dynamic_range(p_voxel_gi:gd.RID, p_range:Float):Void __renderingserver_ptr().value.voxel_gi_set_dynamic_range(p_voxel_gi, p_range);
	public function voxel_gi_set_propagation(p_voxel_gi:gd.RID, p_amount:Float):Void __renderingserver_ptr().value.voxel_gi_set_propagation(p_voxel_gi, p_amount);
	public function voxel_gi_set_energy(p_voxel_gi:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.voxel_gi_set_energy(p_voxel_gi, p_energy);
	public function voxel_gi_set_baked_exposure_normalization(p_voxel_gi:gd.RID, p_baked_exposure:Float):Void __renderingserver_ptr().value.voxel_gi_set_baked_exposure_normalization(p_voxel_gi, p_baked_exposure);
	public function voxel_gi_set_bias(p_voxel_gi:gd.RID, p_bias:Float):Void __renderingserver_ptr().value.voxel_gi_set_bias(p_voxel_gi, p_bias);
	public function voxel_gi_set_normal_bias(p_voxel_gi:gd.RID, p_bias:Float):Void __renderingserver_ptr().value.voxel_gi_set_normal_bias(p_voxel_gi, p_bias);
	public function voxel_gi_set_interior(p_voxel_gi:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.voxel_gi_set_interior(p_voxel_gi, p_enable);
	public function voxel_gi_set_use_two_bounces(p_voxel_gi:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.voxel_gi_set_use_two_bounces(p_voxel_gi, p_enable);
	public function voxel_gi_set_quality(p_quality:gd.renderingserver.VoxelGIQuality):Void __renderingserver_ptr().value.voxel_gi_set_quality(p_quality);
	public function lightmap_create():gd.RID return __renderingserver_ptr().value.lightmap_create();
	public function lightmap_set_textures(p_lightmap:gd.RID, p_light:gd.RID, p_uses_sh:Bool):Void __renderingserver_ptr().value.lightmap_set_textures(p_lightmap, p_light, p_uses_sh);
	public function lightmap_set_probe_bounds(p_lightmap:gd.RID, p_bounds:gd.AABB):Void __renderingserver_ptr().value.lightmap_set_probe_bounds(p_lightmap, p_bounds);
	public function lightmap_set_probe_interior(p_lightmap:gd.RID, p_interior:Bool):Void __renderingserver_ptr().value.lightmap_set_probe_interior(p_lightmap, p_interior);
	public function lightmap_set_probe_capture_data(p_lightmap:gd.RID, p_points:gd.PackedVector3Array, p_point_sh:gd.PackedColorArray, p_tetrahedra:gd.PackedInt32Array, p_bsp_tree:gd.PackedInt32Array):Void __renderingserver_ptr().value.lightmap_set_probe_capture_data(p_lightmap, p_points, p_point_sh, p_tetrahedra, p_bsp_tree);
	public function lightmap_get_probe_capture_points(p_lightmap:gd.RID):gd.PackedVector3Array return __renderingserver_ptr().value.lightmap_get_probe_capture_points(p_lightmap);
	public function lightmap_get_probe_capture_sh(p_lightmap:gd.RID):gd.PackedColorArray return __renderingserver_ptr().value.lightmap_get_probe_capture_sh(p_lightmap);
	public function lightmap_get_probe_capture_tetrahedra(p_lightmap:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.lightmap_get_probe_capture_tetrahedra(p_lightmap);
	public function lightmap_get_probe_capture_bsp_tree(p_lightmap:gd.RID):gd.PackedInt32Array return __renderingserver_ptr().value.lightmap_get_probe_capture_bsp_tree(p_lightmap);
	public function lightmap_set_baked_exposure_normalization(p_lightmap:gd.RID, p_baked_exposure:Float):Void __renderingserver_ptr().value.lightmap_set_baked_exposure_normalization(p_lightmap, p_baked_exposure);
	public function lightmap_set_probe_capture_update_speed(p_speed:Float):Void __renderingserver_ptr().value.lightmap_set_probe_capture_update_speed(p_speed);
	public function particles_create():gd.RID return __renderingserver_ptr().value.particles_create();
	public function particles_set_mode(p_particles:gd.RID, p_mode:gd.renderingserver.ParticlesMode):Void __renderingserver_ptr().value.particles_set_mode(p_particles, p_mode);
	public function particles_set_emitting(p_particles:gd.RID, p_emitting:Bool):Void __renderingserver_ptr().value.particles_set_emitting(p_particles, p_emitting);
	public function particles_get_emitting(p_particles:gd.RID):Bool return __renderingserver_ptr().value.particles_get_emitting(p_particles);
	public function particles_set_amount(p_particles:gd.RID, p_amount:Int):Void __renderingserver_ptr().value.particles_set_amount(p_particles, p_amount);
	public function particles_set_amount_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_amount_ratio(p_particles, p_ratio);
	public function particles_set_lifetime(p_particles:gd.RID, p_lifetime:Float):Void __renderingserver_ptr().value.particles_set_lifetime(p_particles, p_lifetime);
	public function particles_set_one_shot(p_particles:gd.RID, p_one_shot:Bool):Void __renderingserver_ptr().value.particles_set_one_shot(p_particles, p_one_shot);
	public function particles_set_pre_process_time(p_particles:gd.RID, p_time:Float):Void __renderingserver_ptr().value.particles_set_pre_process_time(p_particles, p_time);
	public function particles_set_explosiveness_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_explosiveness_ratio(p_particles, p_ratio);
	public function particles_set_randomness_ratio(p_particles:gd.RID, p_ratio:Float):Void __renderingserver_ptr().value.particles_set_randomness_ratio(p_particles, p_ratio);
	public function particles_set_interp_to_end(p_particles:gd.RID, p_factor:Float):Void __renderingserver_ptr().value.particles_set_interp_to_end(p_particles, p_factor);
	public function particles_set_emitter_velocity(p_particles:gd.RID, p_velocity:gd.Vector3):Void __renderingserver_ptr().value.particles_set_emitter_velocity(p_particles, p_velocity);
	public function particles_set_custom_aabb(p_particles:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.particles_set_custom_aabb(p_particles, p_aabb);
	public function particles_set_speed_scale(p_particles:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.particles_set_speed_scale(p_particles, p_scale);
	public function particles_set_use_local_coordinates(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_use_local_coordinates(p_particles, p_enable);
	public function particles_set_process_material(p_particles:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.particles_set_process_material(p_particles, p_material);
	public function particles_set_fixed_fps(p_particles:gd.RID, p_fps:Int):Void __renderingserver_ptr().value.particles_set_fixed_fps(p_particles, p_fps);
	public function particles_set_interpolate(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_interpolate(p_particles, p_enable);
	public function particles_set_fractional_delta(p_particles:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.particles_set_fractional_delta(p_particles, p_enable);
	public function particles_set_collision_base_size(p_particles:gd.RID, p_size:Float):Void __renderingserver_ptr().value.particles_set_collision_base_size(p_particles, p_size);
	public function particles_set_transform_align(p_particles:gd.RID, p_align:gd.renderingserver.ParticlesTransformAlign):Void __renderingserver_ptr().value.particles_set_transform_align(p_particles, p_align);
	public function particles_set_trails(p_particles:gd.RID, p_enable:Bool, p_length_sec:Float):Void __renderingserver_ptr().value.particles_set_trails(p_particles, p_enable, p_length_sec);
	public function particles_is_inactive(p_particles:gd.RID):Bool return __renderingserver_ptr().value.particles_is_inactive(p_particles);
	public function particles_request_process(p_particles:gd.RID):Void __renderingserver_ptr().value.particles_request_process(p_particles);
	public function particles_restart(p_particles:gd.RID):Void __renderingserver_ptr().value.particles_restart(p_particles);
	public function particles_set_subemitter(p_particles:gd.RID, p_subemitter_particles:gd.RID):Void __renderingserver_ptr().value.particles_set_subemitter(p_particles, p_subemitter_particles);
	public function particles_set_draw_order(p_particles:gd.RID, p_order:gd.renderingserver.ParticlesDrawOrder):Void __renderingserver_ptr().value.particles_set_draw_order(p_particles, p_order);
	public function particles_set_draw_passes(p_particles:gd.RID, p_count:Int):Void __renderingserver_ptr().value.particles_set_draw_passes(p_particles, p_count);
	public function particles_set_draw_pass_mesh(p_particles:gd.RID, p_pass:Int, p_mesh:gd.RID):Void __renderingserver_ptr().value.particles_set_draw_pass_mesh(p_particles, p_pass, p_mesh);
	public function particles_get_current_aabb(p_particles:gd.RID):gd.AABB return __renderingserver_ptr().value.particles_get_current_aabb(p_particles);
	public function particles_collision_create():gd.RID return __renderingserver_ptr().value.particles_collision_create();
	public function particles_collision_set_collision_type(p_particles_collision:gd.RID, p_type:gd.renderingserver.ParticlesCollisionType):Void __renderingserver_ptr().value.particles_collision_set_collision_type(p_particles_collision, p_type);
	public function particles_collision_set_cull_mask(p_particles_collision:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.particles_collision_set_cull_mask(p_particles_collision, p_mask);
	public function particles_collision_set_sphere_radius(p_particles_collision:gd.RID, p_radius:Float):Void __renderingserver_ptr().value.particles_collision_set_sphere_radius(p_particles_collision, p_radius);
	public function particles_collision_set_box_extents(p_particles_collision:gd.RID, p_extents:gd.Vector3):Void __renderingserver_ptr().value.particles_collision_set_box_extents(p_particles_collision, p_extents);
	public function particles_collision_set_attractor_strength(p_particles_collision:gd.RID, p_strength:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_strength(p_particles_collision, p_strength);
	public function particles_collision_set_attractor_directionality(p_particles_collision:gd.RID, p_amount:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_directionality(p_particles_collision, p_amount);
	public function particles_collision_set_attractor_attenuation(p_particles_collision:gd.RID, p_curve:Float):Void __renderingserver_ptr().value.particles_collision_set_attractor_attenuation(p_particles_collision, p_curve);
	public function particles_collision_set_field_texture(p_particles_collision:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.particles_collision_set_field_texture(p_particles_collision, p_texture);
	public function particles_collision_height_field_update(p_particles_collision:gd.RID):Void __renderingserver_ptr().value.particles_collision_height_field_update(p_particles_collision);
	public function particles_collision_set_height_field_resolution(p_particles_collision:gd.RID, p_resolution:gd.renderingserver.ParticlesCollisionHeightfieldResolution):Void __renderingserver_ptr().value.particles_collision_set_height_field_resolution(p_particles_collision, p_resolution);
	public function fog_volume_create():gd.RID return __renderingserver_ptr().value.fog_volume_create();
	public function fog_volume_set_shape(p_fog_volume:gd.RID, p_shape:gd.renderingserver.FogVolumeShape):Void __renderingserver_ptr().value.fog_volume_set_shape(p_fog_volume, p_shape);
	public function fog_volume_set_size(p_fog_volume:gd.RID, p_size:gd.Vector3):Void __renderingserver_ptr().value.fog_volume_set_size(p_fog_volume, p_size);
	public function fog_volume_set_material(p_fog_volume:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.fog_volume_set_material(p_fog_volume, p_material);
	public function visibility_notifier_create():gd.RID return __renderingserver_ptr().value.visibility_notifier_create();
	public function visibility_notifier_set_aabb(p_notifier:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.visibility_notifier_set_aabb(p_notifier, p_aabb);
	public function visibility_notifier_set_callbacks(p_notifier:gd.RID, p_enter_callable:gd.Callable, p_exit_callable:gd.Callable):Void __renderingserver_ptr().value.visibility_notifier_set_callbacks(p_notifier, p_enter_callable, p_exit_callable);
	public function occluder_create():gd.RID return __renderingserver_ptr().value.occluder_create();
	public function occluder_set_mesh(p_occluder:gd.RID, p_vertices:gd.PackedVector3Array, p_indices:gd.PackedInt32Array):Void __renderingserver_ptr().value.occluder_set_mesh(p_occluder, p_vertices, p_indices);
	public function camera_create():gd.RID return __renderingserver_ptr().value.camera_create();
	public function camera_set_perspective(p_camera:gd.RID, p_fovy_degrees:Float, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_perspective(p_camera, p_fovy_degrees, p_z_near, p_z_far);
	public function camera_set_orthogonal(p_camera:gd.RID, p_size:Float, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_orthogonal(p_camera, p_size, p_z_near, p_z_far);
	public function camera_set_frustum(p_camera:gd.RID, p_size:Float, p_offset:gd.Vector2, p_z_near:Float, p_z_far:Float):Void __renderingserver_ptr().value.camera_set_frustum(p_camera, p_size, p_offset, p_z_near, p_z_far);
	public function camera_set_cull_mask(p_camera:gd.RID, p_layers:Int):Void __renderingserver_ptr().value.camera_set_cull_mask(p_camera, p_layers);
	public function camera_set_environment(p_camera:gd.RID, p_env:gd.RID):Void __renderingserver_ptr().value.camera_set_environment(p_camera, p_env);
	public function camera_set_camera_attributes(p_camera:gd.RID, p_effects:gd.RID):Void __renderingserver_ptr().value.camera_set_camera_attributes(p_camera, p_effects);
	public function camera_set_compositor(p_camera:gd.RID, p_compositor:gd.RID):Void __renderingserver_ptr().value.camera_set_compositor(p_camera, p_compositor);
	public function camera_set_use_vertical_aspect(p_camera:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.camera_set_use_vertical_aspect(p_camera, p_enable);
	public function viewport_create():gd.RID return __renderingserver_ptr().value.viewport_create();
	public function viewport_set_use_xr(p_viewport:gd.RID, p_use_xr:Bool):Void __renderingserver_ptr().value.viewport_set_use_xr(p_viewport, p_use_xr);
	public function viewport_set_size(p_viewport:gd.RID, p_width:Int, p_height:Int):Void __renderingserver_ptr().value.viewport_set_size(p_viewport, p_width, p_height);
	public function viewport_set_active(p_viewport:gd.RID, p_active:Bool):Void __renderingserver_ptr().value.viewport_set_active(p_viewport, p_active);
	public function viewport_set_parent_viewport(p_viewport:gd.RID, p_parent_viewport:gd.RID):Void __renderingserver_ptr().value.viewport_set_parent_viewport(p_viewport, p_parent_viewport);
	public function viewport_set_render_direct_to_screen(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_render_direct_to_screen(p_viewport, p_enabled);
	public function viewport_set_canvas_cull_mask(p_viewport:gd.RID, p_canvas_cull_mask:Int):Void __renderingserver_ptr().value.viewport_set_canvas_cull_mask(p_viewport, p_canvas_cull_mask);
	public function viewport_set_scaling_3d_mode(p_viewport:gd.RID, p_scaling_3d_mode:gd.renderingserver.ViewportScaling3DMode):Void __renderingserver_ptr().value.viewport_set_scaling_3d_mode(p_viewport, p_scaling_3d_mode);
	public function viewport_set_scaling_3d_scale(p_viewport:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.viewport_set_scaling_3d_scale(p_viewport, p_scale);
	public function viewport_set_fsr_sharpness(p_viewport:gd.RID, p_sharpness:Float):Void __renderingserver_ptr().value.viewport_set_fsr_sharpness(p_viewport, p_sharpness);
	public function viewport_set_texture_mipmap_bias(p_viewport:gd.RID, p_mipmap_bias:Float):Void __renderingserver_ptr().value.viewport_set_texture_mipmap_bias(p_viewport, p_mipmap_bias);
	public function viewport_set_update_mode(p_viewport:gd.RID, p_update_mode:gd.renderingserver.ViewportUpdateMode):Void __renderingserver_ptr().value.viewport_set_update_mode(p_viewport, p_update_mode);
	public function viewport_get_update_mode(p_viewport:gd.RID):gd.renderingserver.ViewportUpdateMode return __renderingserver_ptr().value.viewport_get_update_mode(p_viewport);
	public function viewport_set_clear_mode(p_viewport:gd.RID, p_clear_mode:gd.renderingserver.ViewportClearMode):Void __renderingserver_ptr().value.viewport_set_clear_mode(p_viewport, p_clear_mode);
	public function viewport_get_render_target(p_viewport:gd.RID):gd.RID return __renderingserver_ptr().value.viewport_get_render_target(p_viewport);
	public function viewport_get_texture(p_viewport:gd.RID):gd.RID return __renderingserver_ptr().value.viewport_get_texture(p_viewport);
	public function viewport_set_disable_3d(p_viewport:gd.RID, p_disable:Bool):Void __renderingserver_ptr().value.viewport_set_disable_3d(p_viewport, p_disable);
	public function viewport_set_disable_2d(p_viewport:gd.RID, p_disable:Bool):Void __renderingserver_ptr().value.viewport_set_disable_2d(p_viewport, p_disable);
	public function viewport_set_environment_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportEnvironmentMode):Void __renderingserver_ptr().value.viewport_set_environment_mode(p_viewport, p_mode);
	public function viewport_attach_camera(p_viewport:gd.RID, p_camera:gd.RID):Void __renderingserver_ptr().value.viewport_attach_camera(p_viewport, p_camera);
	public function viewport_set_scenario(p_viewport:gd.RID, p_scenario:gd.RID):Void __renderingserver_ptr().value.viewport_set_scenario(p_viewport, p_scenario);
	public function viewport_attach_canvas(p_viewport:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.viewport_attach_canvas(p_viewport, p_canvas);
	public function viewport_remove_canvas(p_viewport:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.viewport_remove_canvas(p_viewport, p_canvas);
	public function viewport_set_snap_2d_transforms_to_pixel(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_snap_2d_transforms_to_pixel(p_viewport, p_enabled);
	public function viewport_set_snap_2d_vertices_to_pixel(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_snap_2d_vertices_to_pixel(p_viewport, p_enabled);
	public function viewport_set_default_canvas_item_texture_filter(p_viewport:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.viewport_set_default_canvas_item_texture_filter(p_viewport, p_filter);
	public function viewport_set_default_canvas_item_texture_repeat(p_viewport:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.viewport_set_default_canvas_item_texture_repeat(p_viewport, p_repeat);
	public function viewport_set_canvas_stacking(p_viewport:gd.RID, p_canvas:gd.RID, p_layer:Int, p_sublayer:Int):Void __renderingserver_ptr().value.viewport_set_canvas_stacking(p_viewport, p_canvas, p_layer, p_sublayer);
	public function viewport_set_transparent_background(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_transparent_background(p_viewport, p_enabled);
	public function viewport_set_sdf_oversize_and_scale(p_viewport:gd.RID, p_oversize:gd.renderingserver.ViewportSDFOversize, p_scale:gd.renderingserver.ViewportSDFScale):Void __renderingserver_ptr().value.viewport_set_sdf_oversize_and_scale(p_viewport, p_oversize, p_scale);
	public function viewport_set_positional_shadow_atlas_size(p_viewport:gd.RID, p_size:Int, ?p_use_16_bits:Bool = false):Void __renderingserver_ptr().value.viewport_set_positional_shadow_atlas_size(p_viewport, p_size, p_use_16_bits);
	public function viewport_set_positional_shadow_atlas_quadrant_subdivision(p_viewport:gd.RID, p_quadrant:Int, p_subdivision:Int):Void __renderingserver_ptr().value.viewport_set_positional_shadow_atlas_quadrant_subdivision(p_viewport, p_quadrant, p_subdivision);
	public function viewport_set_msaa_3d(p_viewport:gd.RID, p_msaa:gd.renderingserver.ViewportMSAA):Void __renderingserver_ptr().value.viewport_set_msaa_3d(p_viewport, p_msaa);
	public function viewport_set_msaa_2d(p_viewport:gd.RID, p_msaa:gd.renderingserver.ViewportMSAA):Void __renderingserver_ptr().value.viewport_set_msaa_2d(p_viewport, p_msaa);
	public function viewport_set_use_hdr_2d(p_viewport:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.viewport_set_use_hdr_2d(p_viewport, p_enabled);
	public function viewport_set_screen_space_aa(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportScreenSpaceAA):Void __renderingserver_ptr().value.viewport_set_screen_space_aa(p_viewport, p_mode);
	public function viewport_set_use_taa(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_taa(p_viewport, p_enable);
	public function viewport_set_use_debanding(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_debanding(p_viewport, p_enable);
	public function viewport_set_use_occlusion_culling(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_use_occlusion_culling(p_viewport, p_enable);
	public function viewport_set_occlusion_rays_per_thread(p_rays_per_thread:Int):Void __renderingserver_ptr().value.viewport_set_occlusion_rays_per_thread(p_rays_per_thread);
	public function viewport_set_occlusion_culling_build_quality(p_quality:gd.renderingserver.ViewportOcclusionCullingBuildQuality):Void __renderingserver_ptr().value.viewport_set_occlusion_culling_build_quality(p_quality);
	public function viewport_get_render_info(p_viewport:gd.RID, p_type:gd.renderingserver.ViewportRenderInfoType, p_info:gd.renderingserver.ViewportRenderInfo):Int return __renderingserver_ptr().value.viewport_get_render_info(p_viewport, p_type, p_info);
	public function viewport_set_debug_draw(p_viewport:gd.RID, p_draw:gd.renderingserver.ViewportDebugDraw):Void __renderingserver_ptr().value.viewport_set_debug_draw(p_viewport, p_draw);
	public function viewport_set_measure_render_time(p_viewport:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.viewport_set_measure_render_time(p_viewport, p_enable);
	public function viewport_get_measured_render_time_cpu(p_viewport:gd.RID):Float return __renderingserver_ptr().value.viewport_get_measured_render_time_cpu(p_viewport);
	public function viewport_get_measured_render_time_gpu(p_viewport:gd.RID):Float return __renderingserver_ptr().value.viewport_get_measured_render_time_gpu(p_viewport);
	public function viewport_set_vrs_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportVRSMode):Void __renderingserver_ptr().value.viewport_set_vrs_mode(p_viewport, p_mode);
	public function viewport_set_vrs_update_mode(p_viewport:gd.RID, p_mode:gd.renderingserver.ViewportVRSUpdateMode):Void __renderingserver_ptr().value.viewport_set_vrs_update_mode(p_viewport, p_mode);
	public function viewport_set_vrs_texture(p_viewport:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.viewport_set_vrs_texture(p_viewport, p_texture);
	public function sky_create():gd.RID return __renderingserver_ptr().value.sky_create();
	public function sky_set_radiance_size(p_sky:gd.RID, p_radiance_size:Int):Void __renderingserver_ptr().value.sky_set_radiance_size(p_sky, p_radiance_size);
	public function sky_set_mode(p_sky:gd.RID, p_mode:gd.renderingserver.SkyMode):Void __renderingserver_ptr().value.sky_set_mode(p_sky, p_mode);
	public function sky_set_material(p_sky:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.sky_set_material(p_sky, p_material);
	public function sky_bake_panorama(p_sky:gd.RID, p_energy:Float, p_bake_irradiance:Bool, p_size:gd.Vector2i):gd.Image return __renderingserver_ptr().value.sky_bake_panorama(p_sky, p_energy, p_bake_irradiance, p_size);
	public function compositor_effect_create():gd.RID return __renderingserver_ptr().value.compositor_effect_create();
	public function compositor_effect_set_enabled(p_effect:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.compositor_effect_set_enabled(p_effect, p_enabled);
	public function compositor_effect_set_callback(p_effect:gd.RID, p_callback_type:gd.renderingserver.CompositorEffectCallbackType, p_callback:gd.Callable):Void __renderingserver_ptr().value.compositor_effect_set_callback(p_effect, p_callback_type, p_callback);
	public function compositor_effect_set_flag(p_effect:gd.RID, p_flag:gd.renderingserver.CompositorEffectFlags, p_set:Bool):Void __renderingserver_ptr().value.compositor_effect_set_flag(p_effect, p_flag, p_set);
	public function compositor_create():gd.RID return __renderingserver_ptr().value.compositor_create();
	public function environment_create():gd.RID return __renderingserver_ptr().value.environment_create();
	public function environment_set_background(p_env:gd.RID, p_bg:gd.renderingserver.EnvironmentBG):Void __renderingserver_ptr().value.environment_set_background(p_env, p_bg);
	public function environment_set_sky(p_env:gd.RID, p_sky:gd.RID):Void __renderingserver_ptr().value.environment_set_sky(p_env, p_sky);
	public function environment_set_sky_custom_fov(p_env:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.environment_set_sky_custom_fov(p_env, p_scale);
	public function environment_set_bg_color(p_env:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.environment_set_bg_color(p_env, p_color);
	public function environment_set_bg_energy(p_env:gd.RID, p_multiplier:Float, p_exposure_value:Float):Void __renderingserver_ptr().value.environment_set_bg_energy(p_env, p_multiplier, p_exposure_value);
	public function environment_set_canvas_max_layer(p_env:gd.RID, p_max_layer:Int):Void __renderingserver_ptr().value.environment_set_canvas_max_layer(p_env, p_max_layer);
	public function environment_set_glow(p_env:gd.RID, p_enable:Bool, p_levels:gd.PackedFloat32Array, p_intensity:Float, p_strength:Float, p_mix:Float, p_bloom_threshold:Float, p_blend_mode:gd.renderingserver.EnvironmentGlowBlendMode, p_hdr_bleed_threshold:Float, p_hdr_bleed_scale:Float, p_hdr_luminance_cap:Float, p_glow_map_strength:Float, p_glow_map:gd.RID):Void __renderingserver_ptr().value.environment_set_glow(p_env, p_enable, p_levels, p_intensity, p_strength, p_mix, p_bloom_threshold, p_blend_mode, p_hdr_bleed_threshold, p_hdr_bleed_scale, p_hdr_luminance_cap, p_glow_map_strength, p_glow_map);
	public function environment_set_tonemap(p_env:gd.RID, p_tone_mapper:gd.renderingserver.EnvironmentToneMapper, p_exposure:Float, p_white:Float):Void __renderingserver_ptr().value.environment_set_tonemap(p_env, p_tone_mapper, p_exposure, p_white);
	public function environment_set_adjustment(p_env:gd.RID, p_enable:Bool, p_brightness:Float, p_contrast:Float, p_saturation:Float, p_use_1d_color_correction:Bool, p_color_correction:gd.RID):Void __renderingserver_ptr().value.environment_set_adjustment(p_env, p_enable, p_brightness, p_contrast, p_saturation, p_use_1d_color_correction, p_color_correction);
	public function environment_set_ssr(p_env:gd.RID, p_enable:Bool, p_max_steps:Int, p_fade_in:Float, p_fade_out:Float, p_depth_tolerance:Float):Void __renderingserver_ptr().value.environment_set_ssr(p_env, p_enable, p_max_steps, p_fade_in, p_fade_out, p_depth_tolerance);
	public function environment_set_ssao(p_env:gd.RID, p_enable:Bool, p_radius:Float, p_intensity:Float, p_power:Float, p_detail:Float, p_horizon:Float, p_sharpness:Float, p_light_affect:Float, p_ao_channel_affect:Float):Void __renderingserver_ptr().value.environment_set_ssao(p_env, p_enable, p_radius, p_intensity, p_power, p_detail, p_horizon, p_sharpness, p_light_affect, p_ao_channel_affect);
	public function environment_set_sdfgi(p_env:gd.RID, p_enable:Bool, p_cascades:Int, p_min_cell_size:Float, p_y_scale:gd.renderingserver.EnvironmentSDFGIYScale, p_use_occlusion:Bool, p_bounce_feedback:Float, p_read_sky:Bool, p_energy:Float, p_normal_bias:Float, p_probe_bias:Float):Void __renderingserver_ptr().value.environment_set_sdfgi(p_env, p_enable, p_cascades, p_min_cell_size, p_y_scale, p_use_occlusion, p_bounce_feedback, p_read_sky, p_energy, p_normal_bias, p_probe_bias);
	public function environment_set_volumetric_fog(p_env:gd.RID, p_enable:Bool, p_density:Float, p_albedo:gd.Color, p_emission:gd.Color, p_emission_energy:Float, p_anisotropy:Float, p_length:Float, p_p_detail_spread:Float, p_gi_inject:Float, p_temporal_reprojection:Bool, p_temporal_reprojection_amount:Float, p_ambient_inject:Float, p_sky_affect:Float):Void __renderingserver_ptr().value.environment_set_volumetric_fog(p_env, p_enable, p_density, p_albedo, p_emission, p_emission_energy, p_anisotropy, p_length, p_p_detail_spread, p_gi_inject, p_temporal_reprojection, p_temporal_reprojection_amount, p_ambient_inject, p_sky_affect);
	public function environment_glow_set_use_bicubic_upscale(p_enable:Bool):Void __renderingserver_ptr().value.environment_glow_set_use_bicubic_upscale(p_enable);
	public function environment_set_ssr_roughness_quality(p_quality:gd.renderingserver.EnvironmentSSRRoughnessQuality):Void __renderingserver_ptr().value.environment_set_ssr_roughness_quality(p_quality);
	public function environment_set_ssao_quality(p_quality:gd.renderingserver.EnvironmentSSAOQuality, p_half_size:Bool, p_adaptive_target:Float, p_blur_passes:Int, p_fadeout_from:Float, p_fadeout_to:Float):Void __renderingserver_ptr().value.environment_set_ssao_quality(p_quality, p_half_size, p_adaptive_target, p_blur_passes, p_fadeout_from, p_fadeout_to);
	public function environment_set_ssil_quality(p_quality:gd.renderingserver.EnvironmentSSILQuality, p_half_size:Bool, p_adaptive_target:Float, p_blur_passes:Int, p_fadeout_from:Float, p_fadeout_to:Float):Void __renderingserver_ptr().value.environment_set_ssil_quality(p_quality, p_half_size, p_adaptive_target, p_blur_passes, p_fadeout_from, p_fadeout_to);
	public function environment_set_sdfgi_ray_count(p_ray_count:gd.renderingserver.EnvironmentSDFGIRayCount):Void __renderingserver_ptr().value.environment_set_sdfgi_ray_count(p_ray_count);
	public function environment_set_sdfgi_frames_to_converge(p_frames:gd.renderingserver.EnvironmentSDFGIFramesToConverge):Void __renderingserver_ptr().value.environment_set_sdfgi_frames_to_converge(p_frames);
	public function environment_set_sdfgi_frames_to_update_light(p_frames:gd.renderingserver.EnvironmentSDFGIFramesToUpdateLight):Void __renderingserver_ptr().value.environment_set_sdfgi_frames_to_update_light(p_frames);
	public function environment_set_volumetric_fog_volume_size(p_size:Int, p_depth:Int):Void __renderingserver_ptr().value.environment_set_volumetric_fog_volume_size(p_size, p_depth);
	public function environment_set_volumetric_fog_filter_active(p_active:Bool):Void __renderingserver_ptr().value.environment_set_volumetric_fog_filter_active(p_active);
	public function environment_bake_panorama(p_environment:gd.RID, p_bake_irradiance:Bool, p_size:gd.Vector2i):gd.Image return __renderingserver_ptr().value.environment_bake_panorama(p_environment, p_bake_irradiance, p_size);
	public function screen_space_roughness_limiter_set_active(p_enable:Bool, p_amount:Float, p_limit:Float):Void __renderingserver_ptr().value.screen_space_roughness_limiter_set_active(p_enable, p_amount, p_limit);
	public function sub_surface_scattering_set_quality(p_quality:gd.renderingserver.SubSurfaceScatteringQuality):Void __renderingserver_ptr().value.sub_surface_scattering_set_quality(p_quality);
	public function sub_surface_scattering_set_scale(p_scale:Float, p_depth_scale:Float):Void __renderingserver_ptr().value.sub_surface_scattering_set_scale(p_scale, p_depth_scale);
	public function camera_attributes_create():gd.RID return __renderingserver_ptr().value.camera_attributes_create();
	public function camera_attributes_set_dof_blur_quality(p_quality:gd.renderingserver.DOFBlurQuality, p_use_jitter:Bool):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur_quality(p_quality, p_use_jitter);
	public function camera_attributes_set_dof_blur_bokeh_shape(p_shape:gd.renderingserver.DOFBokehShape):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur_bokeh_shape(p_shape);
	public function camera_attributes_set_dof_blur(p_camera_attributes:gd.RID, p_far_enable:Bool, p_far_distance:Float, p_far_transition:Float, p_near_enable:Bool, p_near_distance:Float, p_near_transition:Float, p_amount:Float):Void __renderingserver_ptr().value.camera_attributes_set_dof_blur(p_camera_attributes, p_far_enable, p_far_distance, p_far_transition, p_near_enable, p_near_distance, p_near_transition, p_amount);
	public function camera_attributes_set_exposure(p_camera_attributes:gd.RID, p_multiplier:Float, p_normalization:Float):Void __renderingserver_ptr().value.camera_attributes_set_exposure(p_camera_attributes, p_multiplier, p_normalization);
	public function camera_attributes_set_auto_exposure(p_camera_attributes:gd.RID, p_enable:Bool, p_min_sensitivity:Float, p_max_sensitivity:Float, p_speed:Float, p_scale:Float):Void __renderingserver_ptr().value.camera_attributes_set_auto_exposure(p_camera_attributes, p_enable, p_min_sensitivity, p_max_sensitivity, p_speed, p_scale);
	public function scenario_create():gd.RID return __renderingserver_ptr().value.scenario_create();
	public function scenario_set_environment(p_scenario:gd.RID, p_environment:gd.RID):Void __renderingserver_ptr().value.scenario_set_environment(p_scenario, p_environment);
	public function scenario_set_fallback_environment(p_scenario:gd.RID, p_environment:gd.RID):Void __renderingserver_ptr().value.scenario_set_fallback_environment(p_scenario, p_environment);
	public function scenario_set_camera_attributes(p_scenario:gd.RID, p_effects:gd.RID):Void __renderingserver_ptr().value.scenario_set_camera_attributes(p_scenario, p_effects);
	public function scenario_set_compositor(p_scenario:gd.RID, p_compositor:gd.RID):Void __renderingserver_ptr().value.scenario_set_compositor(p_scenario, p_compositor);
	public function instance_create2(p_base:gd.RID, p_scenario:gd.RID):gd.RID return __renderingserver_ptr().value.instance_create2(p_base, p_scenario);
	public function instance_create():gd.RID return __renderingserver_ptr().value.instance_create();
	public function instance_set_base(p_instance:gd.RID, p_base:gd.RID):Void __renderingserver_ptr().value.instance_set_base(p_instance, p_base);
	public function instance_set_scenario(p_instance:gd.RID, p_scenario:gd.RID):Void __renderingserver_ptr().value.instance_set_scenario(p_instance, p_scenario);
	public function instance_set_layer_mask(p_instance:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.instance_set_layer_mask(p_instance, p_mask);
	public function instance_set_pivot_data(p_instance:gd.RID, p_sorting_offset:Float, p_use_aabb_center:Bool):Void __renderingserver_ptr().value.instance_set_pivot_data(p_instance, p_sorting_offset, p_use_aabb_center);
	public function instance_attach_object_instance_id(p_instance:gd.RID, p_id:Int):Void __renderingserver_ptr().value.instance_attach_object_instance_id(p_instance, p_id);
	public function instance_set_blend_shape_weight(p_instance:gd.RID, p_shape:Int, p_weight:Float):Void __renderingserver_ptr().value.instance_set_blend_shape_weight(p_instance, p_shape, p_weight);
	public function instance_set_surface_override_material(p_instance:gd.RID, p_surface:Int, p_material:gd.RID):Void __renderingserver_ptr().value.instance_set_surface_override_material(p_instance, p_surface, p_material);
	public function instance_set_visible(p_instance:gd.RID, p_visible:Bool):Void __renderingserver_ptr().value.instance_set_visible(p_instance, p_visible);
	public function instance_geometry_set_transparency(p_instance:gd.RID, p_transparency:Float):Void __renderingserver_ptr().value.instance_geometry_set_transparency(p_instance, p_transparency);
	public function instance_set_custom_aabb(p_instance:gd.RID, p_aabb:gd.AABB):Void __renderingserver_ptr().value.instance_set_custom_aabb(p_instance, p_aabb);
	public function instance_attach_skeleton(p_instance:gd.RID, p_skeleton:gd.RID):Void __renderingserver_ptr().value.instance_attach_skeleton(p_instance, p_skeleton);
	public function instance_set_extra_visibility_margin(p_instance:gd.RID, p_margin:Float):Void __renderingserver_ptr().value.instance_set_extra_visibility_margin(p_instance, p_margin);
	public function instance_set_visibility_parent(p_instance:gd.RID, p_parent:gd.RID):Void __renderingserver_ptr().value.instance_set_visibility_parent(p_instance, p_parent);
	public function instance_set_ignore_culling(p_instance:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.instance_set_ignore_culling(p_instance, p_enabled);
	public function instance_geometry_set_flag(p_instance:gd.RID, p_flag:gd.renderingserver.InstanceFlags, p_enabled:Bool):Void __renderingserver_ptr().value.instance_geometry_set_flag(p_instance, p_flag, p_enabled);
	public function instance_geometry_set_cast_shadows_setting(p_instance:gd.RID, p_shadow_casting_setting:gd.renderingserver.ShadowCastingSetting):Void __renderingserver_ptr().value.instance_geometry_set_cast_shadows_setting(p_instance, p_shadow_casting_setting);
	public function instance_geometry_set_material_override(p_instance:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.instance_geometry_set_material_override(p_instance, p_material);
	public function instance_geometry_set_material_overlay(p_instance:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.instance_geometry_set_material_overlay(p_instance, p_material);
	public function instance_geometry_set_visibility_range(p_instance:gd.RID, p_min:Float, p_max:Float, p_min_margin:Float, p_max_margin:Float, p_fade_mode:gd.renderingserver.VisibilityRangeFadeMode):Void __renderingserver_ptr().value.instance_geometry_set_visibility_range(p_instance, p_min, p_max, p_min_margin, p_max_margin, p_fade_mode);
	public function instance_geometry_set_lightmap(p_instance:gd.RID, p_lightmap:gd.RID, p_lightmap_uv_scale:gd.Rect2, p_lightmap_slice:Int):Void __renderingserver_ptr().value.instance_geometry_set_lightmap(p_instance, p_lightmap, p_lightmap_uv_scale, p_lightmap_slice);
	public function instance_geometry_set_lod_bias(p_instance:gd.RID, p_lod_bias:Float):Void __renderingserver_ptr().value.instance_geometry_set_lod_bias(p_instance, p_lod_bias);
	public function instance_geometry_set_shader_parameter(p_instance:gd.RID, p_parameter:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.instance_geometry_set_shader_parameter(p_instance, p_parameter, p_value);
	public function instance_geometry_get_shader_parameter(p_instance:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.instance_geometry_get_shader_parameter(p_instance, p_parameter);
	public function instance_geometry_get_shader_parameter_default_value(p_instance:gd.RID, p_parameter:std.String):gd.Variant return __renderingserver_ptr().value.instance_geometry_get_shader_parameter_default_value(p_instance, p_parameter);
	public function canvas_create():gd.RID return __renderingserver_ptr().value.canvas_create();
	public function canvas_set_item_mirroring(p_canvas:gd.RID, p_item:gd.RID, p_mirroring:gd.Vector2):Void __renderingserver_ptr().value.canvas_set_item_mirroring(p_canvas, p_item, p_mirroring);
	public function canvas_set_item_repeat(p_item:gd.RID, p_repeat_size:gd.Vector2, p_repeat_times:Int):Void __renderingserver_ptr().value.canvas_set_item_repeat(p_item, p_repeat_size, p_repeat_times);
	public function canvas_set_modulate(p_canvas:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_set_modulate(p_canvas, p_color);
	public function canvas_set_disable_scale(p_disable:Bool):Void __renderingserver_ptr().value.canvas_set_disable_scale(p_disable);
	public function canvas_texture_create():gd.RID return __renderingserver_ptr().value.canvas_texture_create();
	public function canvas_texture_set_channel(p_canvas_texture:gd.RID, p_channel:gd.renderingserver.CanvasTextureChannel, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_texture_set_channel(p_canvas_texture, p_channel, p_texture);
	public function canvas_texture_set_shading_parameters(p_canvas_texture:gd.RID, p_base_color:gd.Color, p_shininess:Float):Void __renderingserver_ptr().value.canvas_texture_set_shading_parameters(p_canvas_texture, p_base_color, p_shininess);
	public function canvas_texture_set_texture_filter(p_canvas_texture:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.canvas_texture_set_texture_filter(p_canvas_texture, p_filter);
	public function canvas_texture_set_texture_repeat(p_canvas_texture:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.canvas_texture_set_texture_repeat(p_canvas_texture, p_repeat);
	public function canvas_item_create():gd.RID return __renderingserver_ptr().value.canvas_item_create();
	public function canvas_item_set_parent(p_item:gd.RID, p_parent:gd.RID):Void __renderingserver_ptr().value.canvas_item_set_parent(p_item, p_parent);
	public function canvas_item_set_default_texture_filter(p_item:gd.RID, p_filter:gd.renderingserver.CanvasItemTextureFilter):Void __renderingserver_ptr().value.canvas_item_set_default_texture_filter(p_item, p_filter);
	public function canvas_item_set_default_texture_repeat(p_item:gd.RID, p_repeat:gd.renderingserver.CanvasItemTextureRepeat):Void __renderingserver_ptr().value.canvas_item_set_default_texture_repeat(p_item, p_repeat);
	public function canvas_item_set_visible(p_item:gd.RID, p_visible:Bool):Void __renderingserver_ptr().value.canvas_item_set_visible(p_item, p_visible);
	public function canvas_item_set_light_mask(p_item:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_item_set_light_mask(p_item, p_mask);
	public function canvas_item_set_visibility_layer(p_item:gd.RID, p_visibility_layer:Int):Void __renderingserver_ptr().value.canvas_item_set_visibility_layer(p_item, p_visibility_layer);
	public function canvas_item_set_clip(p_item:gd.RID, p_clip:Bool):Void __renderingserver_ptr().value.canvas_item_set_clip(p_item, p_clip);
	public function canvas_item_set_distance_field_mode(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_distance_field_mode(p_item, p_enabled);
	public function canvas_item_set_modulate(p_item:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_item_set_modulate(p_item, p_color);
	public function canvas_item_set_self_modulate(p_item:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_item_set_self_modulate(p_item, p_color);
	public function canvas_item_set_draw_behind_parent(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_draw_behind_parent(p_item, p_enabled);
	public function canvas_item_set_interpolated(p_item:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_item_set_interpolated(p_item, p_interpolated);
	public function canvas_item_reset_physics_interpolation(p_item:gd.RID):Void __renderingserver_ptr().value.canvas_item_reset_physics_interpolation(p_item);
	public function canvas_item_add_line(p_item:gd.RID, p_from:gd.Vector2, p_to:gd.Vector2, p_color:gd.Color, ?p_width:Float = -1., ?p_antialiased:Bool = false):Void __renderingserver_ptr().value.canvas_item_add_line(p_item, p_from, p_to, p_color, p_width, p_antialiased);
	public function canvas_item_add_polyline(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_width:Float = -1., ?p_antialiased:Bool = false):Void __renderingserver_ptr().value.canvas_item_add_polyline(p_item, p_points, p_colors, p_width, p_antialiased);
	public function canvas_item_add_multiline(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, ?p_width:Float = -1., ?p_antialiased:Bool = false):Void __renderingserver_ptr().value.canvas_item_add_multiline(p_item, p_points, p_colors, p_width, p_antialiased);
	public function canvas_item_add_rect(p_item:gd.RID, p_rect:gd.Rect2, p_color:gd.Color, ?p_antialiased:Bool = false):Void __renderingserver_ptr().value.canvas_item_add_rect(p_item, p_rect, p_color, p_antialiased);
	public function canvas_item_add_circle(p_item:gd.RID, p_pos:gd.Vector2, p_radius:Float, p_color:gd.Color, ?p_antialiased:Bool = false):Void __renderingserver_ptr().value.canvas_item_add_circle(p_item, p_pos, p_radius, p_color, p_antialiased);
	public function canvas_item_add_lcd_texture_rect_region(p_item:gd.RID, p_rect:gd.Rect2, p_texture:gd.RID, p_src_rect:gd.Rect2, p_modulate:gd.Color):Void __renderingserver_ptr().value.canvas_item_add_lcd_texture_rect_region(p_item, p_rect, p_texture, p_src_rect, p_modulate);
	public function canvas_item_add_primitive(p_item:gd.RID, p_points:gd.PackedVector2Array, p_colors:gd.PackedColorArray, p_uvs:gd.PackedVector2Array, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_item_add_primitive(p_item, p_points, p_colors, p_uvs, p_texture);
	public function canvas_item_add_particles(p_item:gd.RID, p_particles:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_item_add_particles(p_item, p_particles, p_texture);
	public function canvas_item_add_clip_ignore(p_item:gd.RID, p_ignore:Bool):Void __renderingserver_ptr().value.canvas_item_add_clip_ignore(p_item, p_ignore);
	public function canvas_item_add_animation_slice(p_item:gd.RID, p_animation_length:Float, p_slice_begin:Float, p_slice_end:Float, ?p_offset:Float = 0.):Void __renderingserver_ptr().value.canvas_item_add_animation_slice(p_item, p_animation_length, p_slice_begin, p_slice_end, p_offset);
	public function canvas_item_set_sort_children_by_y(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_sort_children_by_y(p_item, p_enabled);
	public function canvas_item_set_z_index(p_item:gd.RID, p_z_index:Int):Void __renderingserver_ptr().value.canvas_item_set_z_index(p_item, p_z_index);
	public function canvas_item_set_z_as_relative_to_parent(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_z_as_relative_to_parent(p_item, p_enabled);
	public function canvas_item_set_copy_to_backbuffer(p_item:gd.RID, p_enabled:Bool, p_rect:gd.Rect2):Void __renderingserver_ptr().value.canvas_item_set_copy_to_backbuffer(p_item, p_enabled, p_rect);
	public function canvas_item_clear(p_item:gd.RID):Void __renderingserver_ptr().value.canvas_item_clear(p_item);
	public function canvas_item_set_draw_index(p_item:gd.RID, p_index:Int):Void __renderingserver_ptr().value.canvas_item_set_draw_index(p_item, p_index);
	public function canvas_item_set_material(p_item:gd.RID, p_material:gd.RID):Void __renderingserver_ptr().value.canvas_item_set_material(p_item, p_material);
	public function canvas_item_set_use_parent_material(p_item:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_item_set_use_parent_material(p_item, p_enabled);
	public function canvas_item_set_visibility_notifier(p_item:gd.RID, p_enable:Bool, p_area:gd.Rect2, p_enter_callable:gd.Callable, p_exit_callable:gd.Callable):Void __renderingserver_ptr().value.canvas_item_set_visibility_notifier(p_item, p_enable, p_area, p_enter_callable, p_exit_callable);
	public function canvas_item_set_canvas_group_mode(p_item:gd.RID, p_mode:gd.renderingserver.CanvasGroupMode, ?p_clear_margin:Float = 5., ?p_fit_empty:Bool = false, ?p_fit_margin:Float = 0., ?p_blur_mipmaps:Bool = false):Void __renderingserver_ptr().value.canvas_item_set_canvas_group_mode(p_item, p_mode, p_clear_margin, p_fit_empty, p_fit_margin, p_blur_mipmaps);
	public function debug_canvas_item_get_rect(p_item:gd.RID):gd.Rect2 return __renderingserver_ptr().value.debug_canvas_item_get_rect(p_item);
	public function canvas_light_create():gd.RID return __renderingserver_ptr().value.canvas_light_create();
	public function canvas_light_attach_to_canvas(p_light:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.canvas_light_attach_to_canvas(p_light, p_canvas);
	public function canvas_light_set_enabled(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_set_enabled(p_light, p_enabled);
	public function canvas_light_set_texture_scale(p_light:gd.RID, p_scale:Float):Void __renderingserver_ptr().value.canvas_light_set_texture_scale(p_light, p_scale);
	public function canvas_light_set_texture(p_light:gd.RID, p_texture:gd.RID):Void __renderingserver_ptr().value.canvas_light_set_texture(p_light, p_texture);
	public function canvas_light_set_texture_offset(p_light:gd.RID, p_offset:gd.Vector2):Void __renderingserver_ptr().value.canvas_light_set_texture_offset(p_light, p_offset);
	public function canvas_light_set_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_light_set_color(p_light, p_color);
	public function canvas_light_set_height(p_light:gd.RID, p_height:Float):Void __renderingserver_ptr().value.canvas_light_set_height(p_light, p_height);
	public function canvas_light_set_energy(p_light:gd.RID, p_energy:Float):Void __renderingserver_ptr().value.canvas_light_set_energy(p_light, p_energy);
	public function canvas_light_set_z_range(p_light:gd.RID, p_min_z:Int, p_max_z:Int):Void __renderingserver_ptr().value.canvas_light_set_z_range(p_light, p_min_z, p_max_z);
	public function canvas_light_set_layer_range(p_light:gd.RID, p_min_layer:Int, p_max_layer:Int):Void __renderingserver_ptr().value.canvas_light_set_layer_range(p_light, p_min_layer, p_max_layer);
	public function canvas_light_set_item_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_set_item_cull_mask(p_light, p_mask);
	public function canvas_light_set_item_shadow_cull_mask(p_light:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_set_item_shadow_cull_mask(p_light, p_mask);
	public function canvas_light_set_mode(p_light:gd.RID, p_mode:gd.renderingserver.CanvasLightMode):Void __renderingserver_ptr().value.canvas_light_set_mode(p_light, p_mode);
	public function canvas_light_set_shadow_enabled(p_light:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_set_shadow_enabled(p_light, p_enabled);
	public function canvas_light_set_shadow_filter(p_light:gd.RID, p_filter:gd.renderingserver.CanvasLightShadowFilter):Void __renderingserver_ptr().value.canvas_light_set_shadow_filter(p_light, p_filter);
	public function canvas_light_set_shadow_color(p_light:gd.RID, p_color:gd.Color):Void __renderingserver_ptr().value.canvas_light_set_shadow_color(p_light, p_color);
	public function canvas_light_set_shadow_smooth(p_light:gd.RID, p_smooth:Float):Void __renderingserver_ptr().value.canvas_light_set_shadow_smooth(p_light, p_smooth);
	public function canvas_light_set_blend_mode(p_light:gd.RID, p_mode:gd.renderingserver.CanvasLightBlendMode):Void __renderingserver_ptr().value.canvas_light_set_blend_mode(p_light, p_mode);
	public function canvas_light_set_interpolated(p_light:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_light_set_interpolated(p_light, p_interpolated);
	public function canvas_light_reset_physics_interpolation(p_light:gd.RID):Void __renderingserver_ptr().value.canvas_light_reset_physics_interpolation(p_light);
	public function canvas_light_occluder_create():gd.RID return __renderingserver_ptr().value.canvas_light_occluder_create();
	public function canvas_light_occluder_attach_to_canvas(p_occluder:gd.RID, p_canvas:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_attach_to_canvas(p_occluder, p_canvas);
	public function canvas_light_occluder_set_enabled(p_occluder:gd.RID, p_enabled:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_enabled(p_occluder, p_enabled);
	public function canvas_light_occluder_set_polygon(p_occluder:gd.RID, p_polygon:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_set_polygon(p_occluder, p_polygon);
	public function canvas_light_occluder_set_as_sdf_collision(p_occluder:gd.RID, p_enable:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_as_sdf_collision(p_occluder, p_enable);
	public function canvas_light_occluder_set_light_mask(p_occluder:gd.RID, p_mask:Int):Void __renderingserver_ptr().value.canvas_light_occluder_set_light_mask(p_occluder, p_mask);
	public function canvas_light_occluder_set_interpolated(p_occluder:gd.RID, p_interpolated:Bool):Void __renderingserver_ptr().value.canvas_light_occluder_set_interpolated(p_occluder, p_interpolated);
	public function canvas_light_occluder_reset_physics_interpolation(p_occluder:gd.RID):Void __renderingserver_ptr().value.canvas_light_occluder_reset_physics_interpolation(p_occluder);
	public function canvas_occluder_polygon_create():gd.RID return __renderingserver_ptr().value.canvas_occluder_polygon_create();
	public function canvas_occluder_polygon_set_shape(p_occluder_polygon:gd.RID, p_shape:gd.PackedVector2Array, p_closed:Bool):Void __renderingserver_ptr().value.canvas_occluder_polygon_set_shape(p_occluder_polygon, p_shape, p_closed);
	public function canvas_occluder_polygon_set_cull_mode(p_occluder_polygon:gd.RID, p_mode:gd.renderingserver.CanvasOccluderPolygonCullMode):Void __renderingserver_ptr().value.canvas_occluder_polygon_set_cull_mode(p_occluder_polygon, p_mode);
	public function canvas_set_shadow_texture_size(p_size:Int):Void __renderingserver_ptr().value.canvas_set_shadow_texture_size(p_size);
	public function global_shader_parameter_add(p_name:std.String, p_type:gd.renderingserver.GlobalShaderParameterType, p_default_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_add(p_name, p_type, p_default_value);
	public function global_shader_parameter_remove(p_name:std.String):Void __renderingserver_ptr().value.global_shader_parameter_remove(p_name);
	public function global_shader_parameter_set(p_name:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_set(p_name, p_value);
	public function global_shader_parameter_set_override(p_name:std.String, p_value:gd.Variant):Void __renderingserver_ptr().value.global_shader_parameter_set_override(p_name, p_value);
	public function global_shader_parameter_get(p_name:std.String):gd.Variant return __renderingserver_ptr().value.global_shader_parameter_get(p_name);
	public function global_shader_parameter_get_type(p_name:std.String):gd.renderingserver.GlobalShaderParameterType return __renderingserver_ptr().value.global_shader_parameter_get_type(p_name);
	public function free_rid(p_rid:gd.RID):Void __renderingserver_ptr().value.free_rid(p_rid);
	public function request_frame_drawn_callback(p_callable:gd.Callable):Void __renderingserver_ptr().value.request_frame_drawn_callback(p_callable);
	public function has_changed():Bool return __renderingserver_ptr().value.has_changed();
	public function get_rendering_info(p_info:gd.renderingserver.RenderingInfo):Int return __renderingserver_ptr().value.get_rendering_info(p_info);
	public function get_video_adapter_name():std.String return __renderingserver_ptr().value.get_video_adapter_name();
	public function get_video_adapter_vendor():std.String return __renderingserver_ptr().value.get_video_adapter_vendor();
	public function get_video_adapter_type():gd.renderingdevice.DeviceType return __renderingserver_ptr().value.get_video_adapter_type();
	public function get_video_adapter_api_version():std.String return __renderingserver_ptr().value.get_video_adapter_api_version();
	public function make_sphere_mesh(p_latitudes:Int, p_longitudes:Int, p_radius:Float):gd.RID return __renderingserver_ptr().value.make_sphere_mesh(p_latitudes, p_longitudes, p_radius);
	public function get_test_cube():gd.RID return __renderingserver_ptr().value.get_test_cube();
	public function get_test_texture():gd.RID return __renderingserver_ptr().value.get_test_texture();
	public function get_white_texture():gd.RID return __renderingserver_ptr().value.get_white_texture();
	public function set_boot_image(p_image:gd.Image, p_color:gd.Color, p_scale:Bool, ?p_use_filter:Bool = true):Void __renderingserver_ptr().value.set_boot_image(p_image, p_color, p_scale, p_use_filter);
	public function get_default_clear_color():gd.Color return __renderingserver_ptr().value.get_default_clear_color();
	public function set_default_clear_color(p_color:gd.Color):Void __renderingserver_ptr().value.set_default_clear_color(p_color);
	public function has_os_feature(p_feature:std.String):Bool return __renderingserver_ptr().value.has_os_feature(p_feature);
	public function set_debug_generate_wireframes(p_generate:Bool):Void __renderingserver_ptr().value.set_debug_generate_wireframes(p_generate);
	public function is_render_loop_enabled():Bool return __renderingserver_ptr().value.is_render_loop_enabled();
	public function set_render_loop_enabled(p_enabled:Bool):Bool {
		__renderingserver_ptr().value.set_render_loop_enabled(p_enabled);
		return p_enabled;
	}
	public function get_frame_setup_time_cpu():Float return __renderingserver_ptr().value.get_frame_setup_time_cpu();
	public function force_sync():Void __renderingserver_ptr().value.force_sync();
	public function force_draw(?p_swap_buffers:Bool = true, ?p_frame_step:Float = 0.):Void __renderingserver_ptr().value.force_draw(p_swap_buffers, p_frame_step);
	public function get_rendering_device():gd.RenderingDevice return __renderingserver_ptr().value.get_rendering_device();
	public function create_local_rendering_device():gd.RenderingDevice return __renderingserver_ptr().value.create_local_rendering_device();
	public function is_on_render_thread():Bool return __renderingserver_ptr().value.is_on_render_thread();
	public function call_on_render_thread(p_callable:gd.Callable):Void __renderingserver_ptr().value.call_on_render_thread(p_callable);
	public function has_feature(p_feature:gd.renderingserver.Features):Bool return __renderingserver_ptr().value.has_feature(p_feature);
	var render_loop_enabled(get, set) : Bool;
	function get_render_loop_enabled():Bool return is_render_loop_enabled();
}