package gd;
class PhysicsServer2DExtension extends gd.PhysicsServer2D {
	public function new(?native:cpp.Pointer<gdnative.PhysicsServer2DExtension.PhysicsServer2DExtension_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "PhysicsServer2DExtension");
			trace("Allocating PhysicsServer2DExtension");
			native = gdnative.PhysicsServer2DExtension.PhysicsServer2DExtension_extern.__alloc();
		};
		super(native.reinterpret());
	}
	extern inline function __physicsserver2dextension_ptr():cpp.Pointer<gdnative.PhysicsServer2DExtension.PhysicsServer2DExtension_extern> return cast __gd.ptr;
	public function _world_boundary_shape_create():gd.RID return __physicsserver2dextension_ptr().value._world_boundary_shape_create();
	public function _separation_ray_shape_create():gd.RID return __physicsserver2dextension_ptr().value._separation_ray_shape_create();
	public function _segment_shape_create():gd.RID return __physicsserver2dextension_ptr().value._segment_shape_create();
	public function _circle_shape_create():gd.RID return __physicsserver2dextension_ptr().value._circle_shape_create();
	public function _rectangle_shape_create():gd.RID return __physicsserver2dextension_ptr().value._rectangle_shape_create();
	public function _capsule_shape_create():gd.RID return __physicsserver2dextension_ptr().value._capsule_shape_create();
	public function _convex_polygon_shape_create():gd.RID return __physicsserver2dextension_ptr().value._convex_polygon_shape_create();
	public function _concave_polygon_shape_create():gd.RID return __physicsserver2dextension_ptr().value._concave_polygon_shape_create();
	public function _shape_set_data(p_shape:gd.RID, p_data:gd.Variant):Void __physicsserver2dextension_ptr().value._shape_set_data(p_shape, p_data);
	public function _shape_set_custom_solver_bias(p_shape:gd.RID, p_bias:Float):Void __physicsserver2dextension_ptr().value._shape_set_custom_solver_bias(p_shape, p_bias);
	public function _shape_get_type(p_shape:gd.RID):gd.physicsserver2d.ShapeType return __physicsserver2dextension_ptr().value._shape_get_type(p_shape);
	public function _shape_get_data(p_shape:gd.RID):gd.Variant return __physicsserver2dextension_ptr().value._shape_get_data(p_shape);
	public function _shape_get_custom_solver_bias(p_shape:gd.RID):Float return __physicsserver2dextension_ptr().value._shape_get_custom_solver_bias(p_shape);
	public function _space_create():gd.RID return __physicsserver2dextension_ptr().value._space_create();
	public function _space_set_active(p_space:gd.RID, p_active:Bool):Void __physicsserver2dextension_ptr().value._space_set_active(p_space, p_active);
	public function _space_is_active(p_space:gd.RID):Bool return __physicsserver2dextension_ptr().value._space_is_active(p_space);
	public function _space_set_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter, p_value:Float):Void __physicsserver2dextension_ptr().value._space_set_param(p_space, p_param, p_value);
	public function _space_get_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter):Float return __physicsserver2dextension_ptr().value._space_get_param(p_space, p_param);
	public function _space_get_direct_state(p_space:gd.RID):gd.PhysicsDirectSpaceState2D return __physicsserver2dextension_ptr().value._space_get_direct_state(p_space);
	public function _space_set_debug_contacts(p_space:gd.RID, p_max_contacts:Int):Void __physicsserver2dextension_ptr().value._space_set_debug_contacts(p_space, p_max_contacts);
	public function _space_get_contacts(p_space:gd.RID):gd.PackedVector2Array return __physicsserver2dextension_ptr().value._space_get_contacts(p_space);
	public function _space_get_contact_count(p_space:gd.RID):Int return __physicsserver2dextension_ptr().value._space_get_contact_count(p_space);
	public function _area_create():gd.RID return __physicsserver2dextension_ptr().value._area_create();
	public function _area_set_space(p_area:gd.RID, p_space:gd.RID):Void __physicsserver2dextension_ptr().value._area_set_space(p_area, p_space);
	public function _area_get_space(p_area:gd.RID):gd.RID return __physicsserver2dextension_ptr().value._area_get_space(p_area);
	public function _area_set_shape(p_area:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver2dextension_ptr().value._area_set_shape(p_area, p_shape_idx, p_shape);
	public function _area_set_shape_disabled(p_area:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver2dextension_ptr().value._area_set_shape_disabled(p_area, p_shape_idx, p_disabled);
	public function _area_get_shape_count(p_area:gd.RID):Int return __physicsserver2dextension_ptr().value._area_get_shape_count(p_area);
	public function _area_get_shape(p_area:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver2dextension_ptr().value._area_get_shape(p_area, p_shape_idx);
	public function _area_remove_shape(p_area:gd.RID, p_shape_idx:Int):Void __physicsserver2dextension_ptr().value._area_remove_shape(p_area, p_shape_idx);
	public function _area_clear_shapes(p_area:gd.RID):Void __physicsserver2dextension_ptr().value._area_clear_shapes(p_area);
	public function _area_attach_object_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver2dextension_ptr().value._area_attach_object_instance_id(p_area, p_id);
	public function _area_get_object_instance_id(p_area:gd.RID):Int return __physicsserver2dextension_ptr().value._area_get_object_instance_id(p_area);
	public function _area_attach_canvas_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver2dextension_ptr().value._area_attach_canvas_instance_id(p_area, p_id);
	public function _area_get_canvas_instance_id(p_area:gd.RID):Int return __physicsserver2dextension_ptr().value._area_get_canvas_instance_id(p_area);
	public function _area_set_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter, p_value:gd.Variant):Void __physicsserver2dextension_ptr().value._area_set_param(p_area, p_param, p_value);
	public function _area_get_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter):gd.Variant return __physicsserver2dextension_ptr().value._area_get_param(p_area, p_param);
	public function _area_set_collision_layer(p_area:gd.RID, p_layer:Int):Void __physicsserver2dextension_ptr().value._area_set_collision_layer(p_area, p_layer);
	public function _area_get_collision_layer(p_area:gd.RID):Int return __physicsserver2dextension_ptr().value._area_get_collision_layer(p_area);
	public function _area_set_collision_mask(p_area:gd.RID, p_mask:Int):Void __physicsserver2dextension_ptr().value._area_set_collision_mask(p_area, p_mask);
	public function _area_get_collision_mask(p_area:gd.RID):Int return __physicsserver2dextension_ptr().value._area_get_collision_mask(p_area);
	public function _area_set_monitorable(p_area:gd.RID, p_monitorable:Bool):Void __physicsserver2dextension_ptr().value._area_set_monitorable(p_area, p_monitorable);
	public function _area_set_pickable(p_area:gd.RID, p_pickable:Bool):Void __physicsserver2dextension_ptr().value._area_set_pickable(p_area, p_pickable);
	public function _area_set_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver2dextension_ptr().value._area_set_monitor_callback(p_area, p_callback);
	public function _area_set_area_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver2dextension_ptr().value._area_set_area_monitor_callback(p_area, p_callback);
	public function _body_create():gd.RID return __physicsserver2dextension_ptr().value._body_create();
	public function _body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver2dextension_ptr().value._body_set_space(p_body, p_space);
	public function _body_get_space(p_body:gd.RID):gd.RID return __physicsserver2dextension_ptr().value._body_get_space(p_body);
	public function _body_set_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.BodyMode):Void __physicsserver2dextension_ptr().value._body_set_mode(p_body, p_mode);
	public function _body_get_mode(p_body:gd.RID):gd.physicsserver2d.BodyMode return __physicsserver2dextension_ptr().value._body_get_mode(p_body);
	public function _body_set_shape(p_body:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver2dextension_ptr().value._body_set_shape(p_body, p_shape_idx, p_shape);
	public function _body_get_shape_count(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_shape_count(p_body);
	public function _body_get_shape(p_body:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver2dextension_ptr().value._body_get_shape(p_body, p_shape_idx);
	public function _body_set_shape_disabled(p_body:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver2dextension_ptr().value._body_set_shape_disabled(p_body, p_shape_idx, p_disabled);
	public function _body_set_shape_as_one_way_collision(p_body:gd.RID, p_shape_idx:Int, p_enable:Bool, p_margin:Float):Void __physicsserver2dextension_ptr().value._body_set_shape_as_one_way_collision(p_body, p_shape_idx, p_enable, p_margin);
	public function _body_remove_shape(p_body:gd.RID, p_shape_idx:Int):Void __physicsserver2dextension_ptr().value._body_remove_shape(p_body, p_shape_idx);
	public function _body_clear_shapes(p_body:gd.RID):Void __physicsserver2dextension_ptr().value._body_clear_shapes(p_body);
	public function _body_attach_object_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver2dextension_ptr().value._body_attach_object_instance_id(p_body, p_id);
	public function _body_get_object_instance_id(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_object_instance_id(p_body);
	public function _body_attach_canvas_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver2dextension_ptr().value._body_attach_canvas_instance_id(p_body, p_id);
	public function _body_get_canvas_instance_id(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_canvas_instance_id(p_body);
	public function _body_set_continuous_collision_detection_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.CCDMode):Void __physicsserver2dextension_ptr().value._body_set_continuous_collision_detection_mode(p_body, p_mode);
	public function _body_get_continuous_collision_detection_mode(p_body:gd.RID):gd.physicsserver2d.CCDMode return __physicsserver2dextension_ptr().value._body_get_continuous_collision_detection_mode(p_body);
	public function _body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver2dextension_ptr().value._body_set_collision_layer(p_body, p_layer);
	public function _body_get_collision_layer(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_collision_layer(p_body);
	public function _body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver2dextension_ptr().value._body_set_collision_mask(p_body, p_mask);
	public function _body_get_collision_mask(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_collision_mask(p_body);
	public function _body_set_collision_priority(p_body:gd.RID, p_priority:Float):Void __physicsserver2dextension_ptr().value._body_set_collision_priority(p_body, p_priority);
	public function _body_get_collision_priority(p_body:gd.RID):Float return __physicsserver2dextension_ptr().value._body_get_collision_priority(p_body);
	public function _body_set_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter, p_value:gd.Variant):Void __physicsserver2dextension_ptr().value._body_set_param(p_body, p_param, p_value);
	public function _body_get_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter):gd.Variant return __physicsserver2dextension_ptr().value._body_get_param(p_body, p_param);
	public function _body_reset_mass_properties(p_body:gd.RID):Void __physicsserver2dextension_ptr().value._body_reset_mass_properties(p_body);
	public function _body_set_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState, p_value:gd.Variant):Void __physicsserver2dextension_ptr().value._body_set_state(p_body, p_state, p_value);
	public function _body_get_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState):gd.Variant return __physicsserver2dextension_ptr().value._body_get_state(p_body, p_state);
	public function _body_apply_central_impulse(p_body:gd.RID, p_impulse:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_apply_central_impulse(p_body, p_impulse);
	public function _body_apply_torque_impulse(p_body:gd.RID, p_impulse:Float):Void __physicsserver2dextension_ptr().value._body_apply_torque_impulse(p_body, p_impulse);
	public function _body_apply_impulse(p_body:gd.RID, p_impulse:gd.Vector2, p_position:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_apply_impulse(p_body, p_impulse, p_position);
	public function _body_apply_central_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_apply_central_force(p_body, p_force);
	public function _body_apply_force(p_body:gd.RID, p_force:gd.Vector2, p_position:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_apply_force(p_body, p_force, p_position);
	public function _body_apply_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2dextension_ptr().value._body_apply_torque(p_body, p_torque);
	public function _body_add_constant_central_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_add_constant_central_force(p_body, p_force);
	public function _body_add_constant_force(p_body:gd.RID, p_force:gd.Vector2, p_position:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_add_constant_force(p_body, p_force, p_position);
	public function _body_add_constant_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2dextension_ptr().value._body_add_constant_torque(p_body, p_torque);
	public function _body_set_constant_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_set_constant_force(p_body, p_force);
	public function _body_get_constant_force(p_body:gd.RID):gd.Vector2 return __physicsserver2dextension_ptr().value._body_get_constant_force(p_body);
	public function _body_set_constant_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2dextension_ptr().value._body_set_constant_torque(p_body, p_torque);
	public function _body_get_constant_torque(p_body:gd.RID):Float return __physicsserver2dextension_ptr().value._body_get_constant_torque(p_body);
	public function _body_set_axis_velocity(p_body:gd.RID, p_axis_velocity:gd.Vector2):Void __physicsserver2dextension_ptr().value._body_set_axis_velocity(p_body, p_axis_velocity);
	public function _body_add_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver2dextension_ptr().value._body_add_collision_exception(p_body, p_excepted_body);
	public function _body_remove_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver2dextension_ptr().value._body_remove_collision_exception(p_body, p_excepted_body);
	public function _body_set_max_contacts_reported(p_body:gd.RID, p_amount:Int):Void __physicsserver2dextension_ptr().value._body_set_max_contacts_reported(p_body, p_amount);
	public function _body_get_max_contacts_reported(p_body:gd.RID):Int return __physicsserver2dextension_ptr().value._body_get_max_contacts_reported(p_body);
	public function _body_set_contacts_reported_depth_threshold(p_body:gd.RID, p_threshold:Float):Void __physicsserver2dextension_ptr().value._body_set_contacts_reported_depth_threshold(p_body, p_threshold);
	public function _body_get_contacts_reported_depth_threshold(p_body:gd.RID):Float return __physicsserver2dextension_ptr().value._body_get_contacts_reported_depth_threshold(p_body);
	public function _body_set_omit_force_integration(p_body:gd.RID, p_enable:Bool):Void __physicsserver2dextension_ptr().value._body_set_omit_force_integration(p_body, p_enable);
	public function _body_is_omitting_force_integration(p_body:gd.RID):Bool return __physicsserver2dextension_ptr().value._body_is_omitting_force_integration(p_body);
	public function _body_set_state_sync_callback(p_body:gd.RID, p_callable:gd.Callable):Void __physicsserver2dextension_ptr().value._body_set_state_sync_callback(p_body, p_callable);
	public function _body_set_force_integration_callback(p_body:gd.RID, p_callable:gd.Callable, p_userdata:gd.Variant):Void __physicsserver2dextension_ptr().value._body_set_force_integration_callback(p_body, p_callable, p_userdata);
	public function _body_set_pickable(p_body:gd.RID, p_pickable:Bool):Void __physicsserver2dextension_ptr().value._body_set_pickable(p_body, p_pickable);
	public function _body_get_direct_state(p_body:gd.RID):gd.PhysicsDirectBodyState2D return __physicsserver2dextension_ptr().value._body_get_direct_state(p_body);
	public function _joint_create():gd.RID return __physicsserver2dextension_ptr().value._joint_create();
	public function _joint_clear(p_joint:gd.RID):Void __physicsserver2dextension_ptr().value._joint_clear(p_joint);
	public function _joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam, p_value:Float):Void __physicsserver2dextension_ptr().value._joint_set_param(p_joint, p_param, p_value);
	public function _joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam):Float return __physicsserver2dextension_ptr().value._joint_get_param(p_joint, p_param);
	public function _joint_disable_collisions_between_bodies(p_joint:gd.RID, p_disable:Bool):Void __physicsserver2dextension_ptr().value._joint_disable_collisions_between_bodies(p_joint, p_disable);
	public function _joint_is_disabled_collisions_between_bodies(p_joint:gd.RID):Bool return __physicsserver2dextension_ptr().value._joint_is_disabled_collisions_between_bodies(p_joint);
	public function _joint_make_pin(p_joint:gd.RID, p_anchor:gd.Vector2, p_body_a:gd.RID, p_body_b:gd.RID):Void __physicsserver2dextension_ptr().value._joint_make_pin(p_joint, p_anchor, p_body_a, p_body_b);
	public function _joint_make_groove(p_joint:gd.RID, p_a_groove1:gd.Vector2, p_a_groove2:gd.Vector2, p_b_anchor:gd.Vector2, p_body_a:gd.RID, p_body_b:gd.RID):Void __physicsserver2dextension_ptr().value._joint_make_groove(p_joint, p_a_groove1, p_a_groove2, p_b_anchor, p_body_a, p_body_b);
	public function _joint_make_damped_spring(p_joint:gd.RID, p_anchor_a:gd.Vector2, p_anchor_b:gd.Vector2, p_body_a:gd.RID, p_body_b:gd.RID):Void __physicsserver2dextension_ptr().value._joint_make_damped_spring(p_joint, p_anchor_a, p_anchor_b, p_body_a, p_body_b);
	public function _pin_joint_set_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag, p_enabled:Bool):Void __physicsserver2dextension_ptr().value._pin_joint_set_flag(p_joint, p_flag, p_enabled);
	public function _pin_joint_get_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag):Bool return __physicsserver2dextension_ptr().value._pin_joint_get_flag(p_joint, p_flag);
	public function _pin_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam, p_value:Float):Void __physicsserver2dextension_ptr().value._pin_joint_set_param(p_joint, p_param, p_value);
	public function _pin_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam):Float return __physicsserver2dextension_ptr().value._pin_joint_get_param(p_joint, p_param);
	public function _damped_spring_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam, p_value:Float):Void __physicsserver2dextension_ptr().value._damped_spring_joint_set_param(p_joint, p_param, p_value);
	public function _damped_spring_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam):Float return __physicsserver2dextension_ptr().value._damped_spring_joint_get_param(p_joint, p_param);
	public function _joint_get_type(p_joint:gd.RID):gd.physicsserver2d.JointType return __physicsserver2dextension_ptr().value._joint_get_type(p_joint);
	public function _free_rid(p_rid:gd.RID):Void __physicsserver2dextension_ptr().value._free_rid(p_rid);
	public function _set_active(p_active:Bool):Void __physicsserver2dextension_ptr().value._set_active(p_active);
	public function _init():Void __physicsserver2dextension_ptr().value._init();
	public function _step(p_step:Float):Void __physicsserver2dextension_ptr().value._step(p_step);
	public function _sync():Void __physicsserver2dextension_ptr().value._sync();
	public function _flush_queries():Void __physicsserver2dextension_ptr().value._flush_queries();
	public function _end_sync():Void __physicsserver2dextension_ptr().value._end_sync();
	public function _finish():Void __physicsserver2dextension_ptr().value._finish();
	public function _is_flushing_queries():Bool return __physicsserver2dextension_ptr().value._is_flushing_queries();
	public function _get_process_info(p_process_info:gd.physicsserver2d.ProcessInfo):Int return __physicsserver2dextension_ptr().value._get_process_info(p_process_info);
	public function body_test_motion_is_excluding_body(p_body:gd.RID):Bool return __physicsserver2dextension_ptr().value.body_test_motion_is_excluding_body(p_body);
	public function body_test_motion_is_excluding_object(p_object:Int):Bool return __physicsserver2dextension_ptr().value.body_test_motion_is_excluding_object(p_object);
}