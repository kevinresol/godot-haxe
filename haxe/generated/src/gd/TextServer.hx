package gd;
class TextServer extends gd.RefCounted {
	public function new(?native:cpp.Pointer<gdnative.TextServer.TextServer_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "TextServer");
			trace("Allocating TextServer");
			native = gdnative.TextServer.TextServer_extern.__alloc();
		};
		super(native.reinterpret());
	}
	extern inline function __textserver_ptr():cpp.Pointer<gdnative.TextServer.TextServer_extern> return cast __gd.ptr;
	public function has_feature(p_feature:gd.textserver.Feature):Bool return __textserver_ptr().value.has_feature(((p_feature : gd.textserver.Feature)));
	public function get_name():std.String return __textserver_ptr().value.get_name();
	public function get_features():Int return __textserver_ptr().value.get_features();
	public function load_support_data(p_filename:std.String):Bool return __textserver_ptr().value.load_support_data(((p_filename : std.String)));
	public function get_support_data_filename():std.String return __textserver_ptr().value.get_support_data_filename();
	public function get_support_data_info():std.String return __textserver_ptr().value.get_support_data_info();
	public function save_support_data(p_filename:std.String):Bool return __textserver_ptr().value.save_support_data(((p_filename : std.String)));
	public function is_locale_right_to_left(p_locale:std.String):Bool return __textserver_ptr().value.is_locale_right_to_left(((p_locale : std.String)));
	public function name_to_tag(p_name:std.String):Int return __textserver_ptr().value.name_to_tag(((p_name : std.String)));
	public function tag_to_name(p_tag:Int):std.String return __textserver_ptr().value.tag_to_name(((p_tag : Int)));
	public function has(p_rid:gd.RID):Bool return __textserver_ptr().value.has(((p_rid : gd.RID)));
	public function free_rid(p_rid:gd.RID):Void __textserver_ptr().value.free_rid(((p_rid : gd.RID)));
	public function create_font():gd.RID return __textserver_ptr().value.create_font();
	public function create_font_linked_variation(p_font_rid:gd.RID):gd.RID return __textserver_ptr().value.create_font_linked_variation(((p_font_rid : gd.RID)));
	public function font_set_data(p_font_rid:gd.RID, p_data:gd.PackedByteArray):Void __textserver_ptr().value.font_set_data(((p_font_rid : gd.RID)), ((p_data : gd.PackedByteArray)));
	public function font_set_face_index(p_font_rid:gd.RID, p_face_index:Int):Void __textserver_ptr().value.font_set_face_index(((p_font_rid : gd.RID)), ((p_face_index : Int)));
	public function font_get_face_index(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_face_index(((p_font_rid : gd.RID)));
	public function font_get_face_count(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_face_count(((p_font_rid : gd.RID)));
	public function font_set_style(p_font_rid:gd.RID, p_style:Int):Void __textserver_ptr().value.font_set_style(((p_font_rid : gd.RID)), ((p_style : Int)));
	public function font_get_style(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_style(((p_font_rid : gd.RID)));
	public function font_set_name(p_font_rid:gd.RID, p_name:std.String):Void __textserver_ptr().value.font_set_name(((p_font_rid : gd.RID)), ((p_name : std.String)));
	public function font_get_name(p_font_rid:gd.RID):std.String return __textserver_ptr().value.font_get_name(((p_font_rid : gd.RID)));
	public function font_get_ot_name_strings(p_font_rid:gd.RID):gd.Dictionary return __textserver_ptr().value.font_get_ot_name_strings(((p_font_rid : gd.RID)));
	public function font_set_style_name(p_font_rid:gd.RID, p_name:std.String):Void __textserver_ptr().value.font_set_style_name(((p_font_rid : gd.RID)), ((p_name : std.String)));
	public function font_get_style_name(p_font_rid:gd.RID):std.String return __textserver_ptr().value.font_get_style_name(((p_font_rid : gd.RID)));
	public function font_set_weight(p_font_rid:gd.RID, p_weight:Int):Void __textserver_ptr().value.font_set_weight(((p_font_rid : gd.RID)), ((p_weight : Int)));
	public function font_get_weight(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_weight(((p_font_rid : gd.RID)));
	public function font_set_stretch(p_font_rid:gd.RID, p_weight:Int):Void __textserver_ptr().value.font_set_stretch(((p_font_rid : gd.RID)), ((p_weight : Int)));
	public function font_get_stretch(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_stretch(((p_font_rid : gd.RID)));
	public function font_set_antialiasing(p_font_rid:gd.RID, p_antialiasing:gd.textserver.FontAntialiasing):Void __textserver_ptr().value.font_set_antialiasing(((p_font_rid : gd.RID)), ((p_antialiasing : gd.textserver.FontAntialiasing)));
	public function font_get_antialiasing(p_font_rid:gd.RID):gd.textserver.FontAntialiasing return __textserver_ptr().value.font_get_antialiasing(((p_font_rid : gd.RID)));
	public function font_set_disable_embedded_bitmaps(p_font_rid:gd.RID, p_disable_embedded_bitmaps:Bool):Void __textserver_ptr().value.font_set_disable_embedded_bitmaps(((p_font_rid : gd.RID)), ((p_disable_embedded_bitmaps : Bool)));
	public function font_get_disable_embedded_bitmaps(p_font_rid:gd.RID):Bool return __textserver_ptr().value.font_get_disable_embedded_bitmaps(((p_font_rid : gd.RID)));
	public function font_set_generate_mipmaps(p_font_rid:gd.RID, p_generate_mipmaps:Bool):Void __textserver_ptr().value.font_set_generate_mipmaps(((p_font_rid : gd.RID)), ((p_generate_mipmaps : Bool)));
	public function font_get_generate_mipmaps(p_font_rid:gd.RID):Bool return __textserver_ptr().value.font_get_generate_mipmaps(((p_font_rid : gd.RID)));
	public function font_set_multichannel_signed_distance_field(p_font_rid:gd.RID, p_msdf:Bool):Void __textserver_ptr().value.font_set_multichannel_signed_distance_field(((p_font_rid : gd.RID)), ((p_msdf : Bool)));
	public function font_is_multichannel_signed_distance_field(p_font_rid:gd.RID):Bool return __textserver_ptr().value.font_is_multichannel_signed_distance_field(((p_font_rid : gd.RID)));
	public function font_set_msdf_pixel_range(p_font_rid:gd.RID, p_msdf_pixel_range:Int):Void __textserver_ptr().value.font_set_msdf_pixel_range(((p_font_rid : gd.RID)), ((p_msdf_pixel_range : Int)));
	public function font_get_msdf_pixel_range(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_msdf_pixel_range(((p_font_rid : gd.RID)));
	public function font_set_msdf_size(p_font_rid:gd.RID, p_msdf_size:Int):Void __textserver_ptr().value.font_set_msdf_size(((p_font_rid : gd.RID)), ((p_msdf_size : Int)));
	public function font_get_msdf_size(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_msdf_size(((p_font_rid : gd.RID)));
	public function font_set_fixed_size(p_font_rid:gd.RID, p_fixed_size:Int):Void __textserver_ptr().value.font_set_fixed_size(((p_font_rid : gd.RID)), ((p_fixed_size : Int)));
	public function font_get_fixed_size(p_font_rid:gd.RID):Int return __textserver_ptr().value.font_get_fixed_size(((p_font_rid : gd.RID)));
	public function font_set_fixed_size_scale_mode(p_font_rid:gd.RID, p_fixed_size_scale_mode:gd.textserver.FixedSizeScaleMode):Void __textserver_ptr().value.font_set_fixed_size_scale_mode(((p_font_rid : gd.RID)), ((p_fixed_size_scale_mode : gd.textserver.FixedSizeScaleMode)));
	public function font_get_fixed_size_scale_mode(p_font_rid:gd.RID):gd.textserver.FixedSizeScaleMode return __textserver_ptr().value.font_get_fixed_size_scale_mode(((p_font_rid : gd.RID)));
	public function font_set_allow_system_fallback(p_font_rid:gd.RID, p_allow_system_fallback:Bool):Void __textserver_ptr().value.font_set_allow_system_fallback(((p_font_rid : gd.RID)), ((p_allow_system_fallback : Bool)));
	public function font_is_allow_system_fallback(p_font_rid:gd.RID):Bool return __textserver_ptr().value.font_is_allow_system_fallback(((p_font_rid : gd.RID)));
	public function font_set_force_autohinter(p_font_rid:gd.RID, p_force_autohinter:Bool):Void __textserver_ptr().value.font_set_force_autohinter(((p_font_rid : gd.RID)), ((p_force_autohinter : Bool)));
	public function font_is_force_autohinter(p_font_rid:gd.RID):Bool return __textserver_ptr().value.font_is_force_autohinter(((p_font_rid : gd.RID)));
	public function font_set_hinting(p_font_rid:gd.RID, p_hinting:gd.textserver.Hinting):Void __textserver_ptr().value.font_set_hinting(((p_font_rid : gd.RID)), ((p_hinting : gd.textserver.Hinting)));
	public function font_get_hinting(p_font_rid:gd.RID):gd.textserver.Hinting return __textserver_ptr().value.font_get_hinting(((p_font_rid : gd.RID)));
	public function font_set_subpixel_positioning(p_font_rid:gd.RID, p_subpixel_positioning:gd.textserver.SubpixelPositioning):Void __textserver_ptr().value.font_set_subpixel_positioning(((p_font_rid : gd.RID)), ((p_subpixel_positioning : gd.textserver.SubpixelPositioning)));
	public function font_get_subpixel_positioning(p_font_rid:gd.RID):gd.textserver.SubpixelPositioning return __textserver_ptr().value.font_get_subpixel_positioning(((p_font_rid : gd.RID)));
	public function font_set_embolden(p_font_rid:gd.RID, p_strength:Float):Void __textserver_ptr().value.font_set_embolden(((p_font_rid : gd.RID)), ((p_strength : Float)));
	public function font_get_embolden(p_font_rid:gd.RID):Float return __textserver_ptr().value.font_get_embolden(((p_font_rid : gd.RID)));
	public function font_set_spacing(p_font_rid:gd.RID, p_spacing:gd.textserver.SpacingType, p_value:Int):Void __textserver_ptr().value.font_set_spacing(((p_font_rid : gd.RID)), ((p_spacing : gd.textserver.SpacingType)), ((p_value : Int)));
	public function font_get_spacing(p_font_rid:gd.RID, p_spacing:gd.textserver.SpacingType):Int return __textserver_ptr().value.font_get_spacing(((p_font_rid : gd.RID)), ((p_spacing : gd.textserver.SpacingType)));
	public function font_set_baseline_offset(p_font_rid:gd.RID, p_baseline_offset:Float):Void __textserver_ptr().value.font_set_baseline_offset(((p_font_rid : gd.RID)), ((p_baseline_offset : Float)));
	public function font_get_baseline_offset(p_font_rid:gd.RID):Float return __textserver_ptr().value.font_get_baseline_offset(((p_font_rid : gd.RID)));
	public function font_set_transform(p_font_rid:gd.RID, p_transform:gd.Transform2D):Void __textserver_ptr().value.font_set_transform(((p_font_rid : gd.RID)), ((p_transform : gd.Transform2D)));
	public function font_get_transform(p_font_rid:gd.RID):gd.Transform2D return __textserver_ptr().value.font_get_transform(((p_font_rid : gd.RID)));
	public function font_set_variation_coordinates(p_font_rid:gd.RID, p_variation_coordinates:gd.Dictionary):Void __textserver_ptr().value.font_set_variation_coordinates(((p_font_rid : gd.RID)), ((p_variation_coordinates : gd.Dictionary)));
	public function font_get_variation_coordinates(p_font_rid:gd.RID):gd.Dictionary return __textserver_ptr().value.font_get_variation_coordinates(((p_font_rid : gd.RID)));
	public function font_set_oversampling(p_font_rid:gd.RID, p_oversampling:Float):Void __textserver_ptr().value.font_set_oversampling(((p_font_rid : gd.RID)), ((p_oversampling : Float)));
	public function font_get_oversampling(p_font_rid:gd.RID):Float return __textserver_ptr().value.font_get_oversampling(((p_font_rid : gd.RID)));
	public function font_clear_size_cache(p_font_rid:gd.RID):Void __textserver_ptr().value.font_clear_size_cache(((p_font_rid : gd.RID)));
	public function font_remove_size_cache(p_font_rid:gd.RID, p_size:gd.Vector2i):Void __textserver_ptr().value.font_remove_size_cache(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)));
	public function font_set_ascent(p_font_rid:gd.RID, p_size:Int, p_ascent:Float):Void __textserver_ptr().value.font_set_ascent(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_ascent : Float)));
	public function font_get_ascent(p_font_rid:gd.RID, p_size:Int):Float return __textserver_ptr().value.font_get_ascent(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_set_descent(p_font_rid:gd.RID, p_size:Int, p_descent:Float):Void __textserver_ptr().value.font_set_descent(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_descent : Float)));
	public function font_get_descent(p_font_rid:gd.RID, p_size:Int):Float return __textserver_ptr().value.font_get_descent(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_set_underline_position(p_font_rid:gd.RID, p_size:Int, p_underline_position:Float):Void __textserver_ptr().value.font_set_underline_position(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_underline_position : Float)));
	public function font_get_underline_position(p_font_rid:gd.RID, p_size:Int):Float return __textserver_ptr().value.font_get_underline_position(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_set_underline_thickness(p_font_rid:gd.RID, p_size:Int, p_underline_thickness:Float):Void __textserver_ptr().value.font_set_underline_thickness(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_underline_thickness : Float)));
	public function font_get_underline_thickness(p_font_rid:gd.RID, p_size:Int):Float return __textserver_ptr().value.font_get_underline_thickness(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_set_scale(p_font_rid:gd.RID, p_size:Int, p_scale:Float):Void __textserver_ptr().value.font_set_scale(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_scale : Float)));
	public function font_get_scale(p_font_rid:gd.RID, p_size:Int):Float return __textserver_ptr().value.font_get_scale(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_get_texture_count(p_font_rid:gd.RID, p_size:gd.Vector2i):Int return __textserver_ptr().value.font_get_texture_count(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)));
	public function font_clear_textures(p_font_rid:gd.RID, p_size:gd.Vector2i):Void __textserver_ptr().value.font_clear_textures(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)));
	public function font_remove_texture(p_font_rid:gd.RID, p_size:gd.Vector2i, p_texture_index:Int):Void __textserver_ptr().value.font_remove_texture(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_texture_index : Int)));
	public function font_set_texture_image(p_font_rid:gd.RID, p_size:gd.Vector2i, p_texture_index:Int, p_image:gd.Image):Void __textserver_ptr().value.font_set_texture_image(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_texture_index : Int)), ((p_image : gd.Image)));
	public function font_get_texture_image(p_font_rid:gd.RID, p_size:gd.Vector2i, p_texture_index:Int):gd.Image return __textserver_ptr().value.font_get_texture_image(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_texture_index : Int)));
	public function font_set_texture_offsets(p_font_rid:gd.RID, p_size:gd.Vector2i, p_texture_index:Int, p_offset:gd.PackedInt32Array):Void __textserver_ptr().value.font_set_texture_offsets(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_texture_index : Int)), ((p_offset : gd.PackedInt32Array)));
	public function font_get_texture_offsets(p_font_rid:gd.RID, p_size:gd.Vector2i, p_texture_index:Int):gd.PackedInt32Array return __textserver_ptr().value.font_get_texture_offsets(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_texture_index : Int)));
	public function font_get_glyph_list(p_font_rid:gd.RID, p_size:gd.Vector2i):gd.PackedInt32Array return __textserver_ptr().value.font_get_glyph_list(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)));
	public function font_clear_glyphs(p_font_rid:gd.RID, p_size:gd.Vector2i):Void __textserver_ptr().value.font_clear_glyphs(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)));
	public function font_remove_glyph(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):Void __textserver_ptr().value.font_remove_glyph(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_get_glyph_advance(p_font_rid:gd.RID, p_size:Int, p_glyph:Int):gd.Vector2 return __textserver_ptr().value.font_get_glyph_advance(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph : Int)));
	public function font_set_glyph_advance(p_font_rid:gd.RID, p_size:Int, p_glyph:Int, p_advance:gd.Vector2):Void __textserver_ptr().value.font_set_glyph_advance(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph : Int)), ((p_advance : gd.Vector2)));
	public function font_get_glyph_offset(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):gd.Vector2 return __textserver_ptr().value.font_get_glyph_offset(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_set_glyph_offset(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int, p_offset:gd.Vector2):Void __textserver_ptr().value.font_set_glyph_offset(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)), ((p_offset : gd.Vector2)));
	public function font_get_glyph_size(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):gd.Vector2 return __textserver_ptr().value.font_get_glyph_size(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_set_glyph_size(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int, p_gl_size:gd.Vector2):Void __textserver_ptr().value.font_set_glyph_size(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)), ((p_gl_size : gd.Vector2)));
	public function font_get_glyph_uv_rect(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):gd.Rect2 return __textserver_ptr().value.font_get_glyph_uv_rect(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_set_glyph_uv_rect(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int, p_uv_rect:gd.Rect2):Void __textserver_ptr().value.font_set_glyph_uv_rect(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)), ((p_uv_rect : gd.Rect2)));
	public function font_get_glyph_texture_idx(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):Int return __textserver_ptr().value.font_get_glyph_texture_idx(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_set_glyph_texture_idx(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int, p_texture_idx:Int):Void __textserver_ptr().value.font_set_glyph_texture_idx(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)), ((p_texture_idx : Int)));
	public function font_get_glyph_texture_rid(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):gd.RID return __textserver_ptr().value.font_get_glyph_texture_rid(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_get_glyph_texture_size(p_font_rid:gd.RID, p_size:gd.Vector2i, p_glyph:Int):gd.Vector2 return __textserver_ptr().value.font_get_glyph_texture_size(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_glyph : Int)));
	public function font_get_glyph_contours(p_font:gd.RID, p_size:Int, p_index:Int):gd.Dictionary return __textserver_ptr().value.font_get_glyph_contours(((p_font : gd.RID)), ((p_size : Int)), ((p_index : Int)));
	public function font_clear_kerning_map(p_font_rid:gd.RID, p_size:Int):Void __textserver_ptr().value.font_clear_kerning_map(((p_font_rid : gd.RID)), ((p_size : Int)));
	public function font_remove_kerning(p_font_rid:gd.RID, p_size:Int, p_glyph_pair:gd.Vector2i):Void __textserver_ptr().value.font_remove_kerning(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph_pair : gd.Vector2i)));
	public function font_set_kerning(p_font_rid:gd.RID, p_size:Int, p_glyph_pair:gd.Vector2i, p_kerning:gd.Vector2):Void __textserver_ptr().value.font_set_kerning(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph_pair : gd.Vector2i)), ((p_kerning : gd.Vector2)));
	public function font_get_kerning(p_font_rid:gd.RID, p_size:Int, p_glyph_pair:gd.Vector2i):gd.Vector2 return __textserver_ptr().value.font_get_kerning(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph_pair : gd.Vector2i)));
	public function font_get_glyph_index(p_font_rid:gd.RID, p_size:Int, p_char:Int, p_variation_selector:Int):Int return __textserver_ptr().value.font_get_glyph_index(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_char : Int)), ((p_variation_selector : Int)));
	public function font_get_char_from_glyph_index(p_font_rid:gd.RID, p_size:Int, p_glyph_index:Int):Int return __textserver_ptr().value.font_get_char_from_glyph_index(((p_font_rid : gd.RID)), ((p_size : Int)), ((p_glyph_index : Int)));
	public function font_has_char(p_font_rid:gd.RID, p_char:Int):Bool return __textserver_ptr().value.font_has_char(((p_font_rid : gd.RID)), ((p_char : Int)));
	public function font_get_supported_chars(p_font_rid:gd.RID):std.String return __textserver_ptr().value.font_get_supported_chars(((p_font_rid : gd.RID)));
	public function font_render_range(p_font_rid:gd.RID, p_size:gd.Vector2i, p_start:Int, p_end:Int):Void __textserver_ptr().value.font_render_range(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_start : Int)), ((p_end : Int)));
	public function font_render_glyph(p_font_rid:gd.RID, p_size:gd.Vector2i, p_index:Int):Void __textserver_ptr().value.font_render_glyph(((p_font_rid : gd.RID)), ((p_size : gd.Vector2i)), ((p_index : Int)));
	public function font_draw_glyph(p_font_rid:gd.RID, p_canvas:gd.RID, p_size:Int, p_pos:gd.Vector2, p_index:Int, ?p_color:gd.Color):Void switch [p_font_rid, p_canvas, p_size, p_pos, p_index, p_color] {
		case [_, _, _, _, _, null]:__textserver_ptr().value.font_draw_glyph(((p_font_rid : gd.RID)), ((p_canvas : gd.RID)), ((p_size : Int)), ((p_pos : gd.Vector2)), ((p_index : Int)));
		default:__textserver_ptr().value.font_draw_glyph(((p_font_rid : gd.RID)), ((p_canvas : gd.RID)), ((p_size : Int)), ((p_pos : gd.Vector2)), ((p_index : Int)), ((p_color : gd.Color)));
	};
	public function font_draw_glyph_outline(p_font_rid:gd.RID, p_canvas:gd.RID, p_size:Int, p_outline_size:Int, p_pos:gd.Vector2, p_index:Int, ?p_color:gd.Color):Void switch [p_font_rid, p_canvas, p_size, p_outline_size, p_pos, p_index, p_color] {
		case [_, _, _, _, _, _, null]:__textserver_ptr().value.font_draw_glyph_outline(((p_font_rid : gd.RID)), ((p_canvas : gd.RID)), ((p_size : Int)), ((p_outline_size : Int)), ((p_pos : gd.Vector2)), ((p_index : Int)));
		default:__textserver_ptr().value.font_draw_glyph_outline(((p_font_rid : gd.RID)), ((p_canvas : gd.RID)), ((p_size : Int)), ((p_outline_size : Int)), ((p_pos : gd.Vector2)), ((p_index : Int)), ((p_color : gd.Color)));
	};
	public function font_is_language_supported(p_font_rid:gd.RID, p_language:std.String):Bool return __textserver_ptr().value.font_is_language_supported(((p_font_rid : gd.RID)), ((p_language : std.String)));
	public function font_set_language_support_override(p_font_rid:gd.RID, p_language:std.String, p_supported:Bool):Void __textserver_ptr().value.font_set_language_support_override(((p_font_rid : gd.RID)), ((p_language : std.String)), ((p_supported : Bool)));
	public function font_get_language_support_override(p_font_rid:gd.RID, p_language:std.String):Bool return __textserver_ptr().value.font_get_language_support_override(((p_font_rid : gd.RID)), ((p_language : std.String)));
	public function font_remove_language_support_override(p_font_rid:gd.RID, p_language:std.String):Void __textserver_ptr().value.font_remove_language_support_override(((p_font_rid : gd.RID)), ((p_language : std.String)));
	public function font_get_language_support_overrides(p_font_rid:gd.RID):gd.PackedStringArray return __textserver_ptr().value.font_get_language_support_overrides(((p_font_rid : gd.RID)));
	public function font_is_script_supported(p_font_rid:gd.RID, p_script:std.String):Bool return __textserver_ptr().value.font_is_script_supported(((p_font_rid : gd.RID)), ((p_script : std.String)));
	public function font_set_script_support_override(p_font_rid:gd.RID, p_script:std.String, p_supported:Bool):Void __textserver_ptr().value.font_set_script_support_override(((p_font_rid : gd.RID)), ((p_script : std.String)), ((p_supported : Bool)));
	public function font_get_script_support_override(p_font_rid:gd.RID, p_script:std.String):Bool return __textserver_ptr().value.font_get_script_support_override(((p_font_rid : gd.RID)), ((p_script : std.String)));
	public function font_remove_script_support_override(p_font_rid:gd.RID, p_script:std.String):Void __textserver_ptr().value.font_remove_script_support_override(((p_font_rid : gd.RID)), ((p_script : std.String)));
	public function font_get_script_support_overrides(p_font_rid:gd.RID):gd.PackedStringArray return __textserver_ptr().value.font_get_script_support_overrides(((p_font_rid : gd.RID)));
	public function font_set_opentype_feature_overrides(p_font_rid:gd.RID, p_overrides:gd.Dictionary):Void __textserver_ptr().value.font_set_opentype_feature_overrides(((p_font_rid : gd.RID)), ((p_overrides : gd.Dictionary)));
	public function font_get_opentype_feature_overrides(p_font_rid:gd.RID):gd.Dictionary return __textserver_ptr().value.font_get_opentype_feature_overrides(((p_font_rid : gd.RID)));
	public function font_supported_feature_list(p_font_rid:gd.RID):gd.Dictionary return __textserver_ptr().value.font_supported_feature_list(((p_font_rid : gd.RID)));
	public function font_supported_variation_list(p_font_rid:gd.RID):gd.Dictionary return __textserver_ptr().value.font_supported_variation_list(((p_font_rid : gd.RID)));
	public function font_get_global_oversampling():Float return __textserver_ptr().value.font_get_global_oversampling();
	public function font_set_global_oversampling(p_oversampling:Float):Void __textserver_ptr().value.font_set_global_oversampling(((p_oversampling : Float)));
	public function get_hex_code_box_size(p_size:Int, p_index:Int):gd.Vector2 return __textserver_ptr().value.get_hex_code_box_size(((p_size : Int)), ((p_index : Int)));
	public function draw_hex_code_box(p_canvas:gd.RID, p_size:Int, p_pos:gd.Vector2, p_index:Int, p_color:gd.Color):Void __textserver_ptr().value.draw_hex_code_box(((p_canvas : gd.RID)), ((p_size : Int)), ((p_pos : gd.Vector2)), ((p_index : Int)), ((p_color : gd.Color)));
	public function create_shaped_text(?p_direction:gd.textserver.Direction, ?p_orientation:gd.textserver.Orientation):gd.RID return switch [p_direction, p_orientation] {
		case [null, _]:__textserver_ptr().value.create_shaped_text();
		case [_, null]:__textserver_ptr().value.create_shaped_text(((p_direction : gd.textserver.Direction)));
		default:__textserver_ptr().value.create_shaped_text(((p_direction : gd.textserver.Direction)), ((p_orientation : gd.textserver.Orientation)));
	};
	public function shaped_text_clear(p_rid:gd.RID):Void __textserver_ptr().value.shaped_text_clear(((p_rid : gd.RID)));
	public function shaped_text_set_direction(p_shaped:gd.RID, ?p_direction:gd.textserver.Direction):Void switch [p_shaped, p_direction] {
		case [_, null]:__textserver_ptr().value.shaped_text_set_direction(((p_shaped : gd.RID)));
		default:__textserver_ptr().value.shaped_text_set_direction(((p_shaped : gd.RID)), ((p_direction : gd.textserver.Direction)));
	};
	public function shaped_text_get_direction(p_shaped:gd.RID):gd.textserver.Direction return __textserver_ptr().value.shaped_text_get_direction(((p_shaped : gd.RID)));
	public function shaped_text_get_inferred_direction(p_shaped:gd.RID):gd.textserver.Direction return __textserver_ptr().value.shaped_text_get_inferred_direction(((p_shaped : gd.RID)));
	public function shaped_text_set_bidi_override(p_shaped:gd.RID, p_override:gd.Array):Void __textserver_ptr().value.shaped_text_set_bidi_override(((p_shaped : gd.RID)), ((p_override : gd.Array)));
	public function shaped_text_set_custom_punctuation(p_shaped:gd.RID, p_punct:std.String):Void __textserver_ptr().value.shaped_text_set_custom_punctuation(((p_shaped : gd.RID)), ((p_punct : std.String)));
	public function shaped_text_get_custom_punctuation(p_shaped:gd.RID):std.String return __textserver_ptr().value.shaped_text_get_custom_punctuation(((p_shaped : gd.RID)));
	public function shaped_text_set_custom_ellipsis(p_shaped:gd.RID, p_char:Int):Void __textserver_ptr().value.shaped_text_set_custom_ellipsis(((p_shaped : gd.RID)), ((p_char : Int)));
	public function shaped_text_get_custom_ellipsis(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_text_get_custom_ellipsis(((p_shaped : gd.RID)));
	public function shaped_text_set_orientation(p_shaped:gd.RID, ?p_orientation:gd.textserver.Orientation):Void switch [p_shaped, p_orientation] {
		case [_, null]:__textserver_ptr().value.shaped_text_set_orientation(((p_shaped : gd.RID)));
		default:__textserver_ptr().value.shaped_text_set_orientation(((p_shaped : gd.RID)), ((p_orientation : gd.textserver.Orientation)));
	};
	public function shaped_text_get_orientation(p_shaped:gd.RID):gd.textserver.Orientation return __textserver_ptr().value.shaped_text_get_orientation(((p_shaped : gd.RID)));
	public function shaped_text_set_preserve_invalid(p_shaped:gd.RID, p_enabled:Bool):Void __textserver_ptr().value.shaped_text_set_preserve_invalid(((p_shaped : gd.RID)), ((p_enabled : Bool)));
	public function shaped_text_get_preserve_invalid(p_shaped:gd.RID):Bool return __textserver_ptr().value.shaped_text_get_preserve_invalid(((p_shaped : gd.RID)));
	public function shaped_text_set_preserve_control(p_shaped:gd.RID, p_enabled:Bool):Void __textserver_ptr().value.shaped_text_set_preserve_control(((p_shaped : gd.RID)), ((p_enabled : Bool)));
	public function shaped_text_get_preserve_control(p_shaped:gd.RID):Bool return __textserver_ptr().value.shaped_text_get_preserve_control(((p_shaped : gd.RID)));
	public function shaped_text_set_spacing(p_shaped:gd.RID, p_spacing:gd.textserver.SpacingType, p_value:Int):Void __textserver_ptr().value.shaped_text_set_spacing(((p_shaped : gd.RID)), ((p_spacing : gd.textserver.SpacingType)), ((p_value : Int)));
	public function shaped_text_get_spacing(p_shaped:gd.RID, p_spacing:gd.textserver.SpacingType):Int return __textserver_ptr().value.shaped_text_get_spacing(((p_shaped : gd.RID)), ((p_spacing : gd.textserver.SpacingType)));
	public function shaped_text_add_object(p_shaped:gd.RID, p_key:gd.Variant, p_size:gd.Vector2, ?p_inline_align:gd.InlineAlignment, ?p_length:Int, ?p_baseline:Float):Bool return switch [p_shaped, p_key, p_size, p_inline_align, p_length, p_baseline] {
		case [_, _, _, null, _, _]:__textserver_ptr().value.shaped_text_add_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)));
		case [_, _, _, _, null, _]:__textserver_ptr().value.shaped_text_add_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)), ((p_inline_align : gd.InlineAlignment)));
		case [_, _, _, _, _, null]:__textserver_ptr().value.shaped_text_add_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)), ((p_inline_align : gd.InlineAlignment)), ((p_length : Int)));
		default:__textserver_ptr().value.shaped_text_add_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)), ((p_inline_align : gd.InlineAlignment)), ((p_length : Int)), ((p_baseline : Float)));
	};
	public function shaped_text_resize_object(p_shaped:gd.RID, p_key:gd.Variant, p_size:gd.Vector2, ?p_inline_align:gd.InlineAlignment, ?p_baseline:Float):Bool return switch [p_shaped, p_key, p_size, p_inline_align, p_baseline] {
		case [_, _, _, null, _]:__textserver_ptr().value.shaped_text_resize_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)));
		case [_, _, _, _, null]:__textserver_ptr().value.shaped_text_resize_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)), ((p_inline_align : gd.InlineAlignment)));
		default:__textserver_ptr().value.shaped_text_resize_object(((p_shaped : gd.RID)), ((p_key : gd.Variant)), ((p_size : gd.Vector2)), ((p_inline_align : gd.InlineAlignment)), ((p_baseline : Float)));
	};
	public function shaped_get_span_count(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_get_span_count(((p_shaped : gd.RID)));
	public function shaped_get_span_meta(p_shaped:gd.RID, p_index:Int):gd.Variant return __textserver_ptr().value.shaped_get_span_meta(((p_shaped : gd.RID)), ((p_index : Int)));
	public function shaped_text_substr(p_shaped:gd.RID, p_start:Int, p_length:Int):gd.RID return __textserver_ptr().value.shaped_text_substr(((p_shaped : gd.RID)), ((p_start : Int)), ((p_length : Int)));
	public function shaped_text_get_parent(p_shaped:gd.RID):gd.RID return __textserver_ptr().value.shaped_text_get_parent(((p_shaped : gd.RID)));
	public function shaped_text_fit_to_width(p_shaped:gd.RID, p_width:Float, ?p_justification_flags:Int):Float return switch [p_shaped, p_width, p_justification_flags] {
		case [_, _, null]:__textserver_ptr().value.shaped_text_fit_to_width(((p_shaped : gd.RID)), ((p_width : Float)));
		default:__textserver_ptr().value.shaped_text_fit_to_width(((p_shaped : gd.RID)), ((p_width : Float)), ((p_justification_flags : Int)));
	};
	public function shaped_text_tab_align(p_shaped:gd.RID, p_tab_stops:gd.PackedFloat32Array):Float return __textserver_ptr().value.shaped_text_tab_align(((p_shaped : gd.RID)), ((p_tab_stops : gd.PackedFloat32Array)));
	public function shaped_text_shape(p_shaped:gd.RID):Bool return __textserver_ptr().value.shaped_text_shape(((p_shaped : gd.RID)));
	public function shaped_text_is_ready(p_shaped:gd.RID):Bool return __textserver_ptr().value.shaped_text_is_ready(((p_shaped : gd.RID)));
	public function shaped_text_has_visible_chars(p_shaped:gd.RID):Bool return __textserver_ptr().value.shaped_text_has_visible_chars(((p_shaped : gd.RID)));
	public function shaped_text_get_glyph_count(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_text_get_glyph_count(((p_shaped : gd.RID)));
	public function shaped_text_get_range(p_shaped:gd.RID):gd.Vector2i return __textserver_ptr().value.shaped_text_get_range(((p_shaped : gd.RID)));
	public function shaped_text_get_line_breaks_adv(p_shaped:gd.RID, p_width:gd.PackedFloat32Array, ?p_start:Int, ?p_once:Bool, ?p_break_flags:Int):gd.PackedInt32Array return switch [p_shaped, p_width, p_start, p_once, p_break_flags] {
		case [_, _, null, _, _]:__textserver_ptr().value.shaped_text_get_line_breaks_adv(((p_shaped : gd.RID)), ((p_width : gd.PackedFloat32Array)));
		case [_, _, _, null, _]:__textserver_ptr().value.shaped_text_get_line_breaks_adv(((p_shaped : gd.RID)), ((p_width : gd.PackedFloat32Array)), ((p_start : Int)));
		case [_, _, _, _, null]:__textserver_ptr().value.shaped_text_get_line_breaks_adv(((p_shaped : gd.RID)), ((p_width : gd.PackedFloat32Array)), ((p_start : Int)), ((p_once : Bool)));
		default:__textserver_ptr().value.shaped_text_get_line_breaks_adv(((p_shaped : gd.RID)), ((p_width : gd.PackedFloat32Array)), ((p_start : Int)), ((p_once : Bool)), ((p_break_flags : Int)));
	};
	public function shaped_text_get_line_breaks(p_shaped:gd.RID, p_width:Float, ?p_start:Int, ?p_break_flags:Int):gd.PackedInt32Array return switch [p_shaped, p_width, p_start, p_break_flags] {
		case [_, _, null, _]:__textserver_ptr().value.shaped_text_get_line_breaks(((p_shaped : gd.RID)), ((p_width : Float)));
		case [_, _, _, null]:__textserver_ptr().value.shaped_text_get_line_breaks(((p_shaped : gd.RID)), ((p_width : Float)), ((p_start : Int)));
		default:__textserver_ptr().value.shaped_text_get_line_breaks(((p_shaped : gd.RID)), ((p_width : Float)), ((p_start : Int)), ((p_break_flags : Int)));
	};
	public function shaped_text_get_word_breaks(p_shaped:gd.RID, ?p_grapheme_flags:Int, ?p_skip_grapheme_flags:Int):gd.PackedInt32Array return switch [p_shaped, p_grapheme_flags, p_skip_grapheme_flags] {
		case [_, null, _]:__textserver_ptr().value.shaped_text_get_word_breaks(((p_shaped : gd.RID)));
		case [_, _, null]:__textserver_ptr().value.shaped_text_get_word_breaks(((p_shaped : gd.RID)), ((p_grapheme_flags : Int)));
		default:__textserver_ptr().value.shaped_text_get_word_breaks(((p_shaped : gd.RID)), ((p_grapheme_flags : Int)), ((p_skip_grapheme_flags : Int)));
	};
	public function shaped_text_get_trim_pos(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_text_get_trim_pos(((p_shaped : gd.RID)));
	public function shaped_text_get_ellipsis_pos(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_text_get_ellipsis_pos(((p_shaped : gd.RID)));
	public function shaped_text_get_ellipsis_glyph_count(p_shaped:gd.RID):Int return __textserver_ptr().value.shaped_text_get_ellipsis_glyph_count(((p_shaped : gd.RID)));
	public function shaped_text_overrun_trim_to_width(p_shaped:gd.RID, ?p_width:Float, ?p_overrun_trim_flags:Int):Void switch [p_shaped, p_width, p_overrun_trim_flags] {
		case [_, null, _]:__textserver_ptr().value.shaped_text_overrun_trim_to_width(((p_shaped : gd.RID)));
		case [_, _, null]:__textserver_ptr().value.shaped_text_overrun_trim_to_width(((p_shaped : gd.RID)), ((p_width : Float)));
		default:__textserver_ptr().value.shaped_text_overrun_trim_to_width(((p_shaped : gd.RID)), ((p_width : Float)), ((p_overrun_trim_flags : Int)));
	};
	public function shaped_text_get_objects(p_shaped:gd.RID):gd.Array return __textserver_ptr().value.shaped_text_get_objects(((p_shaped : gd.RID)));
	public function shaped_text_get_object_rect(p_shaped:gd.RID, p_key:gd.Variant):gd.Rect2 return __textserver_ptr().value.shaped_text_get_object_rect(((p_shaped : gd.RID)), ((p_key : gd.Variant)));
	public function shaped_text_get_object_range(p_shaped:gd.RID, p_key:gd.Variant):gd.Vector2i return __textserver_ptr().value.shaped_text_get_object_range(((p_shaped : gd.RID)), ((p_key : gd.Variant)));
	public function shaped_text_get_object_glyph(p_shaped:gd.RID, p_key:gd.Variant):Int return __textserver_ptr().value.shaped_text_get_object_glyph(((p_shaped : gd.RID)), ((p_key : gd.Variant)));
	public function shaped_text_get_size(p_shaped:gd.RID):gd.Vector2 return __textserver_ptr().value.shaped_text_get_size(((p_shaped : gd.RID)));
	public function shaped_text_get_ascent(p_shaped:gd.RID):Float return __textserver_ptr().value.shaped_text_get_ascent(((p_shaped : gd.RID)));
	public function shaped_text_get_descent(p_shaped:gd.RID):Float return __textserver_ptr().value.shaped_text_get_descent(((p_shaped : gd.RID)));
	public function shaped_text_get_width(p_shaped:gd.RID):Float return __textserver_ptr().value.shaped_text_get_width(((p_shaped : gd.RID)));
	public function shaped_text_get_underline_position(p_shaped:gd.RID):Float return __textserver_ptr().value.shaped_text_get_underline_position(((p_shaped : gd.RID)));
	public function shaped_text_get_underline_thickness(p_shaped:gd.RID):Float return __textserver_ptr().value.shaped_text_get_underline_thickness(((p_shaped : gd.RID)));
	public function shaped_text_get_carets(p_shaped:gd.RID, p_position:Int):gd.Dictionary return __textserver_ptr().value.shaped_text_get_carets(((p_shaped : gd.RID)), ((p_position : Int)));
	public function shaped_text_get_selection(p_shaped:gd.RID, p_start:Int, p_end:Int):gd.PackedVector2Array return __textserver_ptr().value.shaped_text_get_selection(((p_shaped : gd.RID)), ((p_start : Int)), ((p_end : Int)));
	public function shaped_text_hit_test_grapheme(p_shaped:gd.RID, p_coords:Float):Int return __textserver_ptr().value.shaped_text_hit_test_grapheme(((p_shaped : gd.RID)), ((p_coords : Float)));
	public function shaped_text_hit_test_position(p_shaped:gd.RID, p_coords:Float):Int return __textserver_ptr().value.shaped_text_hit_test_position(((p_shaped : gd.RID)), ((p_coords : Float)));
	public function shaped_text_get_grapheme_bounds(p_shaped:gd.RID, p_pos:Int):gd.Vector2 return __textserver_ptr().value.shaped_text_get_grapheme_bounds(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_next_grapheme_pos(p_shaped:gd.RID, p_pos:Int):Int return __textserver_ptr().value.shaped_text_next_grapheme_pos(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_prev_grapheme_pos(p_shaped:gd.RID, p_pos:Int):Int return __textserver_ptr().value.shaped_text_prev_grapheme_pos(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_get_character_breaks(p_shaped:gd.RID):gd.PackedInt32Array return __textserver_ptr().value.shaped_text_get_character_breaks(((p_shaped : gd.RID)));
	public function shaped_text_next_character_pos(p_shaped:gd.RID, p_pos:Int):Int return __textserver_ptr().value.shaped_text_next_character_pos(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_prev_character_pos(p_shaped:gd.RID, p_pos:Int):Int return __textserver_ptr().value.shaped_text_prev_character_pos(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_closest_character_pos(p_shaped:gd.RID, p_pos:Int):Int return __textserver_ptr().value.shaped_text_closest_character_pos(((p_shaped : gd.RID)), ((p_pos : Int)));
	public function shaped_text_draw(p_shaped:gd.RID, p_canvas:gd.RID, p_pos:gd.Vector2, ?p_clip_l:Float, ?p_clip_r:Float, ?p_color:gd.Color):Void switch [p_shaped, p_canvas, p_pos, p_clip_l, p_clip_r, p_color] {
		case [_, _, _, null, _, _]:__textserver_ptr().value.shaped_text_draw(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)));
		case [_, _, _, _, null, _]:__textserver_ptr().value.shaped_text_draw(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)));
		case [_, _, _, _, _, null]:__textserver_ptr().value.shaped_text_draw(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)), ((p_clip_r : Float)));
		default:__textserver_ptr().value.shaped_text_draw(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)), ((p_clip_r : Float)), ((p_color : gd.Color)));
	};
	public function shaped_text_draw_outline(p_shaped:gd.RID, p_canvas:gd.RID, p_pos:gd.Vector2, ?p_clip_l:Float, ?p_clip_r:Float, ?p_outline_size:Int, ?p_color:gd.Color):Void switch [p_shaped, p_canvas, p_pos, p_clip_l, p_clip_r, p_outline_size, p_color] {
		case [_, _, _, null, _, _, _]:__textserver_ptr().value.shaped_text_draw_outline(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)));
		case [_, _, _, _, null, _, _]:__textserver_ptr().value.shaped_text_draw_outline(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)));
		case [_, _, _, _, _, null, _]:__textserver_ptr().value.shaped_text_draw_outline(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)), ((p_clip_r : Float)));
		case [_, _, _, _, _, _, null]:__textserver_ptr().value.shaped_text_draw_outline(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)), ((p_clip_r : Float)), ((p_outline_size : Int)));
		default:__textserver_ptr().value.shaped_text_draw_outline(((p_shaped : gd.RID)), ((p_canvas : gd.RID)), ((p_pos : gd.Vector2)), ((p_clip_l : Float)), ((p_clip_r : Float)), ((p_outline_size : Int)), ((p_color : gd.Color)));
	};
	public function shaped_text_get_dominant_direction_in_range(p_shaped:gd.RID, p_start:Int, p_end:Int):gd.textserver.Direction return __textserver_ptr().value.shaped_text_get_dominant_direction_in_range(((p_shaped : gd.RID)), ((p_start : Int)), ((p_end : Int)));
	public function format_number(p_number:std.String, ?p_language:std.String):std.String return switch [p_number, p_language] {
		case [_, null]:__textserver_ptr().value.format_number(((p_number : std.String)));
		default:__textserver_ptr().value.format_number(((p_number : std.String)), ((p_language : std.String)));
	};
	public function parse_number(p_number:std.String, ?p_language:std.String):std.String return switch [p_number, p_language] {
		case [_, null]:__textserver_ptr().value.parse_number(((p_number : std.String)));
		default:__textserver_ptr().value.parse_number(((p_number : std.String)), ((p_language : std.String)));
	};
	public function percent_sign(?p_language:std.String):std.String return switch [p_language] {
		case [null]:__textserver_ptr().value.percent_sign();
		default:__textserver_ptr().value.percent_sign(((p_language : std.String)));
	};
	public function string_get_word_breaks(p_string:std.String, ?p_language:std.String, ?p_chars_per_line:Int):gd.PackedInt32Array return switch [p_string, p_language, p_chars_per_line] {
		case [_, null, _]:__textserver_ptr().value.string_get_word_breaks(((p_string : std.String)));
		case [_, _, null]:__textserver_ptr().value.string_get_word_breaks(((p_string : std.String)), ((p_language : std.String)));
		default:__textserver_ptr().value.string_get_word_breaks(((p_string : std.String)), ((p_language : std.String)), ((p_chars_per_line : Int)));
	};
	public function string_get_character_breaks(p_string:std.String, ?p_language:std.String):gd.PackedInt32Array return switch [p_string, p_language] {
		case [_, null]:__textserver_ptr().value.string_get_character_breaks(((p_string : std.String)));
		default:__textserver_ptr().value.string_get_character_breaks(((p_string : std.String)), ((p_language : std.String)));
	};
	public function is_confusable(p_string:std.String, p_dict:gd.PackedStringArray):Int return __textserver_ptr().value.is_confusable(((p_string : std.String)), ((p_dict : gd.PackedStringArray)));
	public function spoof_check(p_string:std.String):Bool return __textserver_ptr().value.spoof_check(((p_string : std.String)));
	public function strip_diacritics(p_string:std.String):std.String return __textserver_ptr().value.strip_diacritics(((p_string : std.String)));
	public function is_valid_identifier(p_string:std.String):Bool return __textserver_ptr().value.is_valid_identifier(((p_string : std.String)));
	public function is_valid_letter(p_unicode:Int):Bool return __textserver_ptr().value.is_valid_letter(((p_unicode : Int)));
	public function string_to_upper(p_string:std.String, ?p_language:std.String):std.String return switch [p_string, p_language] {
		case [_, null]:__textserver_ptr().value.string_to_upper(((p_string : std.String)));
		default:__textserver_ptr().value.string_to_upper(((p_string : std.String)), ((p_language : std.String)));
	};
	public function string_to_lower(p_string:std.String, ?p_language:std.String):std.String return switch [p_string, p_language] {
		case [_, null]:__textserver_ptr().value.string_to_lower(((p_string : std.String)));
		default:__textserver_ptr().value.string_to_lower(((p_string : std.String)), ((p_language : std.String)));
	};
	public function string_to_title(p_string:std.String, ?p_language:std.String):std.String return switch [p_string, p_language] {
		case [_, null]:__textserver_ptr().value.string_to_title(((p_string : std.String)));
		default:__textserver_ptr().value.string_to_title(((p_string : std.String)), ((p_language : std.String)));
	};
}