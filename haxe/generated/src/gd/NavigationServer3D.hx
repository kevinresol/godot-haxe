package gd;
class NavigationServer3D extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.NavigationServer3D.NavigationServer3D_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "NavigationServer3D");
			trace("Allocating NavigationServer3D");
			native = gdnative.NavigationServer3D.NavigationServer3D_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.NavigationServer3D = new NavigationServer3D(gdnative.NavigationServer3D.NavigationServer3D_extern.get_singleton());
	extern inline function __navigationserver3d_ptr():cpp.Pointer<gdnative.NavigationServer3D.NavigationServer3D_extern> return cast __gd.ptr;
	public function map_create():gd.RID return __navigationserver3d_ptr().value.map_create();
	public function map_set_active(p_map:gd.RID, p_active:Bool):Void __navigationserver3d_ptr().value.map_set_active(((p_map : gd.RID)), ((p_active : Bool)));
	public function map_is_active(p_map:gd.RID):Bool return __navigationserver3d_ptr().value.map_is_active(((p_map : gd.RID)));
	public function map_set_up(p_map:gd.RID, p_up:gd.Vector3):Void __navigationserver3d_ptr().value.map_set_up(((p_map : gd.RID)), ((p_up : gd.Vector3)));
	public function map_get_up(p_map:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.map_get_up(((p_map : gd.RID)));
	public function map_set_cell_size(p_map:gd.RID, p_cell_size:Float):Void __navigationserver3d_ptr().value.map_set_cell_size(((p_map : gd.RID)), ((p_cell_size : Float)));
	public function map_get_cell_size(p_map:gd.RID):Float return __navigationserver3d_ptr().value.map_get_cell_size(((p_map : gd.RID)));
	public function map_set_cell_height(p_map:gd.RID, p_cell_height:Float):Void __navigationserver3d_ptr().value.map_set_cell_height(((p_map : gd.RID)), ((p_cell_height : Float)));
	public function map_get_cell_height(p_map:gd.RID):Float return __navigationserver3d_ptr().value.map_get_cell_height(((p_map : gd.RID)));
	public function map_set_merge_rasterizer_cell_scale(p_map:gd.RID, p_scale:Float):Void __navigationserver3d_ptr().value.map_set_merge_rasterizer_cell_scale(((p_map : gd.RID)), ((p_scale : Float)));
	public function map_get_merge_rasterizer_cell_scale(p_map:gd.RID):Float return __navigationserver3d_ptr().value.map_get_merge_rasterizer_cell_scale(((p_map : gd.RID)));
	public function map_set_use_edge_connections(p_map:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.map_set_use_edge_connections(((p_map : gd.RID)), ((p_enabled : Bool)));
	public function map_get_use_edge_connections(p_map:gd.RID):Bool return __navigationserver3d_ptr().value.map_get_use_edge_connections(((p_map : gd.RID)));
	public function map_set_edge_connection_margin(p_map:gd.RID, p_margin:Float):Void __navigationserver3d_ptr().value.map_set_edge_connection_margin(((p_map : gd.RID)), ((p_margin : Float)));
	public function map_get_edge_connection_margin(p_map:gd.RID):Float return __navigationserver3d_ptr().value.map_get_edge_connection_margin(((p_map : gd.RID)));
	public function map_set_link_connection_radius(p_map:gd.RID, p_radius:Float):Void __navigationserver3d_ptr().value.map_set_link_connection_radius(((p_map : gd.RID)), ((p_radius : Float)));
	public function map_get_link_connection_radius(p_map:gd.RID):Float return __navigationserver3d_ptr().value.map_get_link_connection_radius(((p_map : gd.RID)));
	public function map_get_path(p_map:gd.RID, p_origin:gd.Vector3, p_destination:gd.Vector3, p_optimize:Bool, ?p_navigation_layers:Int):gd.PackedVector3Array return switch [p_map, p_origin, p_destination, p_optimize, p_navigation_layers] {
		case [_, _, _, _, null]:__navigationserver3d_ptr().value.map_get_path(((p_map : gd.RID)), ((p_origin : gd.Vector3)), ((p_destination : gd.Vector3)), ((p_optimize : Bool)));
		default:__navigationserver3d_ptr().value.map_get_path(((p_map : gd.RID)), ((p_origin : gd.Vector3)), ((p_destination : gd.Vector3)), ((p_optimize : Bool)), ((p_navigation_layers : Int)));
	};
	public function map_get_closest_point_to_segment(p_map:gd.RID, p_start:gd.Vector3, p_end:gd.Vector3, ?p_use_collision:Bool):gd.Vector3 return switch [p_map, p_start, p_end, p_use_collision] {
		case [_, _, _, null]:__navigationserver3d_ptr().value.map_get_closest_point_to_segment(((p_map : gd.RID)), ((p_start : gd.Vector3)), ((p_end : gd.Vector3)));
		default:__navigationserver3d_ptr().value.map_get_closest_point_to_segment(((p_map : gd.RID)), ((p_start : gd.Vector3)), ((p_end : gd.Vector3)), ((p_use_collision : Bool)));
	};
	public function map_get_closest_point(p_map:gd.RID, p_to_point:gd.Vector3):gd.Vector3 return __navigationserver3d_ptr().value.map_get_closest_point(((p_map : gd.RID)), ((p_to_point : gd.Vector3)));
	public function map_get_closest_point_normal(p_map:gd.RID, p_to_point:gd.Vector3):gd.Vector3 return __navigationserver3d_ptr().value.map_get_closest_point_normal(((p_map : gd.RID)), ((p_to_point : gd.Vector3)));
	public function map_get_closest_point_owner(p_map:gd.RID, p_to_point:gd.Vector3):gd.RID return __navigationserver3d_ptr().value.map_get_closest_point_owner(((p_map : gd.RID)), ((p_to_point : gd.Vector3)));
	public function map_force_update(p_map:gd.RID):Void __navigationserver3d_ptr().value.map_force_update(((p_map : gd.RID)));
	public function map_get_iteration_id(p_map:gd.RID):Int return __navigationserver3d_ptr().value.map_get_iteration_id(((p_map : gd.RID)));
	public function map_get_random_point(p_map:gd.RID, p_navigation_layers:Int, p_uniformly:Bool):gd.Vector3 return __navigationserver3d_ptr().value.map_get_random_point(((p_map : gd.RID)), ((p_navigation_layers : Int)), ((p_uniformly : Bool)));
	public function query_path(p_parameters:gd.NavigationPathQueryParameters3D, p_result:gd.NavigationPathQueryResult3D):Void __navigationserver3d_ptr().value.query_path(((p_parameters : gd.NavigationPathQueryParameters3D)), ((p_result : gd.NavigationPathQueryResult3D)));
	public function region_create():gd.RID return __navigationserver3d_ptr().value.region_create();
	public function region_set_enabled(p_region:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.region_set_enabled(((p_region : gd.RID)), ((p_enabled : Bool)));
	public function region_get_enabled(p_region:gd.RID):Bool return __navigationserver3d_ptr().value.region_get_enabled(((p_region : gd.RID)));
	public function region_set_use_edge_connections(p_region:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.region_set_use_edge_connections(((p_region : gd.RID)), ((p_enabled : Bool)));
	public function region_get_use_edge_connections(p_region:gd.RID):Bool return __navigationserver3d_ptr().value.region_get_use_edge_connections(((p_region : gd.RID)));
	public function region_set_enter_cost(p_region:gd.RID, p_enter_cost:Float):Void __navigationserver3d_ptr().value.region_set_enter_cost(((p_region : gd.RID)), ((p_enter_cost : Float)));
	public function region_get_enter_cost(p_region:gd.RID):Float return __navigationserver3d_ptr().value.region_get_enter_cost(((p_region : gd.RID)));
	public function region_set_travel_cost(p_region:gd.RID, p_travel_cost:Float):Void __navigationserver3d_ptr().value.region_set_travel_cost(((p_region : gd.RID)), ((p_travel_cost : Float)));
	public function region_get_travel_cost(p_region:gd.RID):Float return __navigationserver3d_ptr().value.region_get_travel_cost(((p_region : gd.RID)));
	public function region_set_owner_id(p_region:gd.RID, p_owner_id:Int):Void __navigationserver3d_ptr().value.region_set_owner_id(((p_region : gd.RID)), ((p_owner_id : Int)));
	public function region_get_owner_id(p_region:gd.RID):Int return __navigationserver3d_ptr().value.region_get_owner_id(((p_region : gd.RID)));
	public function region_owns_point(p_region:gd.RID, p_point:gd.Vector3):Bool return __navigationserver3d_ptr().value.region_owns_point(((p_region : gd.RID)), ((p_point : gd.Vector3)));
	public function region_set_map(p_region:gd.RID, p_map:gd.RID):Void __navigationserver3d_ptr().value.region_set_map(((p_region : gd.RID)), ((p_map : gd.RID)));
	public function region_get_map(p_region:gd.RID):gd.RID return __navigationserver3d_ptr().value.region_get_map(((p_region : gd.RID)));
	public function region_set_navigation_layers(p_region:gd.RID, p_navigation_layers:Int):Void __navigationserver3d_ptr().value.region_set_navigation_layers(((p_region : gd.RID)), ((p_navigation_layers : Int)));
	public function region_get_navigation_layers(p_region:gd.RID):Int return __navigationserver3d_ptr().value.region_get_navigation_layers(((p_region : gd.RID)));
	public function region_set_navigation_mesh(p_region:gd.RID, p_navigation_mesh:gd.NavigationMesh):Void __navigationserver3d_ptr().value.region_set_navigation_mesh(((p_region : gd.RID)), ((p_navigation_mesh : gd.NavigationMesh)));
	public function region_bake_navigation_mesh(p_navigation_mesh:gd.NavigationMesh, p_root_node:gd.Node):Void __navigationserver3d_ptr().value.region_bake_navigation_mesh(((p_navigation_mesh : gd.NavigationMesh)), ((p_root_node : gd.Node)));
	public function region_get_connections_count(p_region:gd.RID):Int return __navigationserver3d_ptr().value.region_get_connections_count(((p_region : gd.RID)));
	public function region_get_connection_pathway_start(p_region:gd.RID, p_connection:Int):gd.Vector3 return __navigationserver3d_ptr().value.region_get_connection_pathway_start(((p_region : gd.RID)), ((p_connection : Int)));
	public function region_get_connection_pathway_end(p_region:gd.RID, p_connection:Int):gd.Vector3 return __navigationserver3d_ptr().value.region_get_connection_pathway_end(((p_region : gd.RID)), ((p_connection : Int)));
	public function region_get_random_point(p_region:gd.RID, p_navigation_layers:Int, p_uniformly:Bool):gd.Vector3 return __navigationserver3d_ptr().value.region_get_random_point(((p_region : gd.RID)), ((p_navigation_layers : Int)), ((p_uniformly : Bool)));
	public function link_create():gd.RID return __navigationserver3d_ptr().value.link_create();
	public function link_set_map(p_link:gd.RID, p_map:gd.RID):Void __navigationserver3d_ptr().value.link_set_map(((p_link : gd.RID)), ((p_map : gd.RID)));
	public function link_get_map(p_link:gd.RID):gd.RID return __navigationserver3d_ptr().value.link_get_map(((p_link : gd.RID)));
	public function link_set_enabled(p_link:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.link_set_enabled(((p_link : gd.RID)), ((p_enabled : Bool)));
	public function link_get_enabled(p_link:gd.RID):Bool return __navigationserver3d_ptr().value.link_get_enabled(((p_link : gd.RID)));
	public function link_set_bidirectional(p_link:gd.RID, p_bidirectional:Bool):Void __navigationserver3d_ptr().value.link_set_bidirectional(((p_link : gd.RID)), ((p_bidirectional : Bool)));
	public function link_is_bidirectional(p_link:gd.RID):Bool return __navigationserver3d_ptr().value.link_is_bidirectional(((p_link : gd.RID)));
	public function link_set_navigation_layers(p_link:gd.RID, p_navigation_layers:Int):Void __navigationserver3d_ptr().value.link_set_navigation_layers(((p_link : gd.RID)), ((p_navigation_layers : Int)));
	public function link_get_navigation_layers(p_link:gd.RID):Int return __navigationserver3d_ptr().value.link_get_navigation_layers(((p_link : gd.RID)));
	public function link_set_start_position(p_link:gd.RID, p_position:gd.Vector3):Void __navigationserver3d_ptr().value.link_set_start_position(((p_link : gd.RID)), ((p_position : gd.Vector3)));
	public function link_get_start_position(p_link:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.link_get_start_position(((p_link : gd.RID)));
	public function link_set_end_position(p_link:gd.RID, p_position:gd.Vector3):Void __navigationserver3d_ptr().value.link_set_end_position(((p_link : gd.RID)), ((p_position : gd.Vector3)));
	public function link_get_end_position(p_link:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.link_get_end_position(((p_link : gd.RID)));
	public function link_set_enter_cost(p_link:gd.RID, p_enter_cost:Float):Void __navigationserver3d_ptr().value.link_set_enter_cost(((p_link : gd.RID)), ((p_enter_cost : Float)));
	public function link_get_enter_cost(p_link:gd.RID):Float return __navigationserver3d_ptr().value.link_get_enter_cost(((p_link : gd.RID)));
	public function link_set_travel_cost(p_link:gd.RID, p_travel_cost:Float):Void __navigationserver3d_ptr().value.link_set_travel_cost(((p_link : gd.RID)), ((p_travel_cost : Float)));
	public function link_get_travel_cost(p_link:gd.RID):Float return __navigationserver3d_ptr().value.link_get_travel_cost(((p_link : gd.RID)));
	public function link_set_owner_id(p_link:gd.RID, p_owner_id:Int):Void __navigationserver3d_ptr().value.link_set_owner_id(((p_link : gd.RID)), ((p_owner_id : Int)));
	public function link_get_owner_id(p_link:gd.RID):Int return __navigationserver3d_ptr().value.link_get_owner_id(((p_link : gd.RID)));
	public function agent_create():gd.RID return __navigationserver3d_ptr().value.agent_create();
	public function agent_set_avoidance_enabled(p_agent:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.agent_set_avoidance_enabled(((p_agent : gd.RID)), ((p_enabled : Bool)));
	public function agent_get_avoidance_enabled(p_agent:gd.RID):Bool return __navigationserver3d_ptr().value.agent_get_avoidance_enabled(((p_agent : gd.RID)));
	public function agent_set_use_3d_avoidance(p_agent:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.agent_set_use_3d_avoidance(((p_agent : gd.RID)), ((p_enabled : Bool)));
	public function agent_get_use_3d_avoidance(p_agent:gd.RID):Bool return __navigationserver3d_ptr().value.agent_get_use_3d_avoidance(((p_agent : gd.RID)));
	public function agent_set_map(p_agent:gd.RID, p_map:gd.RID):Void __navigationserver3d_ptr().value.agent_set_map(((p_agent : gd.RID)), ((p_map : gd.RID)));
	public function agent_get_map(p_agent:gd.RID):gd.RID return __navigationserver3d_ptr().value.agent_get_map(((p_agent : gd.RID)));
	public function agent_set_paused(p_agent:gd.RID, p_paused:Bool):Void __navigationserver3d_ptr().value.agent_set_paused(((p_agent : gd.RID)), ((p_paused : Bool)));
	public function agent_get_paused(p_agent:gd.RID):Bool return __navigationserver3d_ptr().value.agent_get_paused(((p_agent : gd.RID)));
	public function agent_set_neighbor_distance(p_agent:gd.RID, p_distance:Float):Void __navigationserver3d_ptr().value.agent_set_neighbor_distance(((p_agent : gd.RID)), ((p_distance : Float)));
	public function agent_get_neighbor_distance(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_neighbor_distance(((p_agent : gd.RID)));
	public function agent_set_max_neighbors(p_agent:gd.RID, p_count:Int):Void __navigationserver3d_ptr().value.agent_set_max_neighbors(((p_agent : gd.RID)), ((p_count : Int)));
	public function agent_get_max_neighbors(p_agent:gd.RID):Int return __navigationserver3d_ptr().value.agent_get_max_neighbors(((p_agent : gd.RID)));
	public function agent_set_time_horizon_agents(p_agent:gd.RID, p_time_horizon:Float):Void __navigationserver3d_ptr().value.agent_set_time_horizon_agents(((p_agent : gd.RID)), ((p_time_horizon : Float)));
	public function agent_get_time_horizon_agents(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_time_horizon_agents(((p_agent : gd.RID)));
	public function agent_set_time_horizon_obstacles(p_agent:gd.RID, p_time_horizon:Float):Void __navigationserver3d_ptr().value.agent_set_time_horizon_obstacles(((p_agent : gd.RID)), ((p_time_horizon : Float)));
	public function agent_get_time_horizon_obstacles(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_time_horizon_obstacles(((p_agent : gd.RID)));
	public function agent_set_radius(p_agent:gd.RID, p_radius:Float):Void __navigationserver3d_ptr().value.agent_set_radius(((p_agent : gd.RID)), ((p_radius : Float)));
	public function agent_get_radius(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_radius(((p_agent : gd.RID)));
	public function agent_set_height(p_agent:gd.RID, p_height:Float):Void __navigationserver3d_ptr().value.agent_set_height(((p_agent : gd.RID)), ((p_height : Float)));
	public function agent_get_height(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_height(((p_agent : gd.RID)));
	public function agent_set_max_speed(p_agent:gd.RID, p_max_speed:Float):Void __navigationserver3d_ptr().value.agent_set_max_speed(((p_agent : gd.RID)), ((p_max_speed : Float)));
	public function agent_get_max_speed(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_max_speed(((p_agent : gd.RID)));
	public function agent_set_velocity_forced(p_agent:gd.RID, p_velocity:gd.Vector3):Void __navigationserver3d_ptr().value.agent_set_velocity_forced(((p_agent : gd.RID)), ((p_velocity : gd.Vector3)));
	public function agent_set_velocity(p_agent:gd.RID, p_velocity:gd.Vector3):Void __navigationserver3d_ptr().value.agent_set_velocity(((p_agent : gd.RID)), ((p_velocity : gd.Vector3)));
	public function agent_get_velocity(p_agent:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.agent_get_velocity(((p_agent : gd.RID)));
	public function agent_set_position(p_agent:gd.RID, p_position:gd.Vector3):Void __navigationserver3d_ptr().value.agent_set_position(((p_agent : gd.RID)), ((p_position : gd.Vector3)));
	public function agent_get_position(p_agent:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.agent_get_position(((p_agent : gd.RID)));
	public function agent_is_map_changed(p_agent:gd.RID):Bool return __navigationserver3d_ptr().value.agent_is_map_changed(((p_agent : gd.RID)));
	public function agent_set_avoidance_callback(p_agent:gd.RID, p_callback:gd.Callable):Void __navigationserver3d_ptr().value.agent_set_avoidance_callback(((p_agent : gd.RID)), ((p_callback : gd.Callable)));
	public function agent_has_avoidance_callback(p_agent:gd.RID):Bool return __navigationserver3d_ptr().value.agent_has_avoidance_callback(((p_agent : gd.RID)));
	public function agent_set_avoidance_layers(p_agent:gd.RID, p_layers:Int):Void __navigationserver3d_ptr().value.agent_set_avoidance_layers(((p_agent : gd.RID)), ((p_layers : Int)));
	public function agent_get_avoidance_layers(p_agent:gd.RID):Int return __navigationserver3d_ptr().value.agent_get_avoidance_layers(((p_agent : gd.RID)));
	public function agent_set_avoidance_mask(p_agent:gd.RID, p_mask:Int):Void __navigationserver3d_ptr().value.agent_set_avoidance_mask(((p_agent : gd.RID)), ((p_mask : Int)));
	public function agent_get_avoidance_mask(p_agent:gd.RID):Int return __navigationserver3d_ptr().value.agent_get_avoidance_mask(((p_agent : gd.RID)));
	public function agent_set_avoidance_priority(p_agent:gd.RID, p_priority:Float):Void __navigationserver3d_ptr().value.agent_set_avoidance_priority(((p_agent : gd.RID)), ((p_priority : Float)));
	public function agent_get_avoidance_priority(p_agent:gd.RID):Float return __navigationserver3d_ptr().value.agent_get_avoidance_priority(((p_agent : gd.RID)));
	public function obstacle_create():gd.RID return __navigationserver3d_ptr().value.obstacle_create();
	public function obstacle_set_avoidance_enabled(p_obstacle:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.obstacle_set_avoidance_enabled(((p_obstacle : gd.RID)), ((p_enabled : Bool)));
	public function obstacle_get_avoidance_enabled(p_obstacle:gd.RID):Bool return __navigationserver3d_ptr().value.obstacle_get_avoidance_enabled(((p_obstacle : gd.RID)));
	public function obstacle_set_use_3d_avoidance(p_obstacle:gd.RID, p_enabled:Bool):Void __navigationserver3d_ptr().value.obstacle_set_use_3d_avoidance(((p_obstacle : gd.RID)), ((p_enabled : Bool)));
	public function obstacle_get_use_3d_avoidance(p_obstacle:gd.RID):Bool return __navigationserver3d_ptr().value.obstacle_get_use_3d_avoidance(((p_obstacle : gd.RID)));
	public function obstacle_set_map(p_obstacle:gd.RID, p_map:gd.RID):Void __navigationserver3d_ptr().value.obstacle_set_map(((p_obstacle : gd.RID)), ((p_map : gd.RID)));
	public function obstacle_get_map(p_obstacle:gd.RID):gd.RID return __navigationserver3d_ptr().value.obstacle_get_map(((p_obstacle : gd.RID)));
	public function obstacle_set_paused(p_obstacle:gd.RID, p_paused:Bool):Void __navigationserver3d_ptr().value.obstacle_set_paused(((p_obstacle : gd.RID)), ((p_paused : Bool)));
	public function obstacle_get_paused(p_obstacle:gd.RID):Bool return __navigationserver3d_ptr().value.obstacle_get_paused(((p_obstacle : gd.RID)));
	public function obstacle_set_radius(p_obstacle:gd.RID, p_radius:Float):Void __navigationserver3d_ptr().value.obstacle_set_radius(((p_obstacle : gd.RID)), ((p_radius : Float)));
	public function obstacle_get_radius(p_obstacle:gd.RID):Float return __navigationserver3d_ptr().value.obstacle_get_radius(((p_obstacle : gd.RID)));
	public function obstacle_set_height(p_obstacle:gd.RID, p_height:Float):Void __navigationserver3d_ptr().value.obstacle_set_height(((p_obstacle : gd.RID)), ((p_height : Float)));
	public function obstacle_get_height(p_obstacle:gd.RID):Float return __navigationserver3d_ptr().value.obstacle_get_height(((p_obstacle : gd.RID)));
	public function obstacle_set_velocity(p_obstacle:gd.RID, p_velocity:gd.Vector3):Void __navigationserver3d_ptr().value.obstacle_set_velocity(((p_obstacle : gd.RID)), ((p_velocity : gd.Vector3)));
	public function obstacle_get_velocity(p_obstacle:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.obstacle_get_velocity(((p_obstacle : gd.RID)));
	public function obstacle_set_position(p_obstacle:gd.RID, p_position:gd.Vector3):Void __navigationserver3d_ptr().value.obstacle_set_position(((p_obstacle : gd.RID)), ((p_position : gd.Vector3)));
	public function obstacle_get_position(p_obstacle:gd.RID):gd.Vector3 return __navigationserver3d_ptr().value.obstacle_get_position(((p_obstacle : gd.RID)));
	public function obstacle_set_vertices(p_obstacle:gd.RID, p_vertices:gd.PackedVector3Array):Void __navigationserver3d_ptr().value.obstacle_set_vertices(((p_obstacle : gd.RID)), ((p_vertices : gd.PackedVector3Array)));
	public function obstacle_get_vertices(p_obstacle:gd.RID):gd.PackedVector3Array return __navigationserver3d_ptr().value.obstacle_get_vertices(((p_obstacle : gd.RID)));
	public function obstacle_set_avoidance_layers(p_obstacle:gd.RID, p_layers:Int):Void __navigationserver3d_ptr().value.obstacle_set_avoidance_layers(((p_obstacle : gd.RID)), ((p_layers : Int)));
	public function obstacle_get_avoidance_layers(p_obstacle:gd.RID):Int return __navigationserver3d_ptr().value.obstacle_get_avoidance_layers(((p_obstacle : gd.RID)));
	public function parse_source_geometry_data(p_navigation_mesh:gd.NavigationMesh, p_source_geometry_data:gd.NavigationMeshSourceGeometryData3D, p_root_node:gd.Node, ?p_callback:gd.Callable):Void switch [p_navigation_mesh, p_source_geometry_data, p_root_node, p_callback] {
		case [_, _, _, null]:__navigationserver3d_ptr().value.parse_source_geometry_data(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)), ((p_root_node : gd.Node)));
		default:__navigationserver3d_ptr().value.parse_source_geometry_data(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)), ((p_root_node : gd.Node)), ((p_callback : gd.Callable)));
	};
	public function bake_from_source_geometry_data(p_navigation_mesh:gd.NavigationMesh, p_source_geometry_data:gd.NavigationMeshSourceGeometryData3D, ?p_callback:gd.Callable):Void switch [p_navigation_mesh, p_source_geometry_data, p_callback] {
		case [_, _, null]:__navigationserver3d_ptr().value.bake_from_source_geometry_data(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)));
		default:__navigationserver3d_ptr().value.bake_from_source_geometry_data(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)), ((p_callback : gd.Callable)));
	};
	public function bake_from_source_geometry_data_async(p_navigation_mesh:gd.NavigationMesh, p_source_geometry_data:gd.NavigationMeshSourceGeometryData3D, ?p_callback:gd.Callable):Void switch [p_navigation_mesh, p_source_geometry_data, p_callback] {
		case [_, _, null]:__navigationserver3d_ptr().value.bake_from_source_geometry_data_async(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)));
		default:__navigationserver3d_ptr().value.bake_from_source_geometry_data_async(((p_navigation_mesh : gd.NavigationMesh)), ((p_source_geometry_data : gd.NavigationMeshSourceGeometryData3D)), ((p_callback : gd.Callable)));
	};
	public function is_baking_navigation_mesh(p_navigation_mesh:gd.NavigationMesh):Bool return __navigationserver3d_ptr().value.is_baking_navigation_mesh(((p_navigation_mesh : gd.NavigationMesh)));
	public function source_geometry_parser_create():gd.RID return __navigationserver3d_ptr().value.source_geometry_parser_create();
	public function source_geometry_parser_set_callback(p_parser:gd.RID, p_callback:gd.Callable):Void __navigationserver3d_ptr().value.source_geometry_parser_set_callback(((p_parser : gd.RID)), ((p_callback : gd.Callable)));
	public function simplify_path(p_path:gd.PackedVector3Array, p_epsilon:Float):gd.PackedVector3Array return __navigationserver3d_ptr().value.simplify_path(((p_path : gd.PackedVector3Array)), ((p_epsilon : Float)));
	public function free_rid(p_rid:gd.RID):Void __navigationserver3d_ptr().value.free_rid(((p_rid : gd.RID)));
	public function set_active(p_active:Bool):Void __navigationserver3d_ptr().value.set_active(((p_active : Bool)));
	public function set_debug_enabled(p_enabled:Bool):Void __navigationserver3d_ptr().value.set_debug_enabled(((p_enabled : Bool)));
	public function get_debug_enabled():Bool return __navigationserver3d_ptr().value.get_debug_enabled();
	public function get_process_info(p_process_info:gd.navigationserver3d.ProcessInfo):Int return __navigationserver3d_ptr().value.get_process_info(((p_process_info : gd.navigationserver3d.ProcessInfo)));
}