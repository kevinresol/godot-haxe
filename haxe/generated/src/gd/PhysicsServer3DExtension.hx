package gd;
class PhysicsServer3DExtension extends gd.PhysicsServer3D {
	public function new(?native:cpp.Pointer<gdnative.PhysicsServer3DExtension.PhysicsServer3DExtension_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "PhysicsServer3DExtension");
			trace("Allocating PhysicsServer3DExtension");
			native = gdnative.PhysicsServer3DExtension.PhysicsServer3DExtension_extern.__alloc();
		};
		super(native.reinterpret());
	}
	extern inline function __physicsserver3dextension_ptr():cpp.Pointer<gdnative.PhysicsServer3DExtension.PhysicsServer3DExtension_extern> return cast __gd.ptr;
	public function _world_boundary_shape_create():gd.RID return __physicsserver3dextension_ptr().value._world_boundary_shape_create();
	public function _separation_ray_shape_create():gd.RID return __physicsserver3dextension_ptr().value._separation_ray_shape_create();
	public function _sphere_shape_create():gd.RID return __physicsserver3dextension_ptr().value._sphere_shape_create();
	public function _box_shape_create():gd.RID return __physicsserver3dextension_ptr().value._box_shape_create();
	public function _capsule_shape_create():gd.RID return __physicsserver3dextension_ptr().value._capsule_shape_create();
	public function _cylinder_shape_create():gd.RID return __physicsserver3dextension_ptr().value._cylinder_shape_create();
	public function _convex_polygon_shape_create():gd.RID return __physicsserver3dextension_ptr().value._convex_polygon_shape_create();
	public function _concave_polygon_shape_create():gd.RID return __physicsserver3dextension_ptr().value._concave_polygon_shape_create();
	public function _heightmap_shape_create():gd.RID return __physicsserver3dextension_ptr().value._heightmap_shape_create();
	public function _custom_shape_create():gd.RID return __physicsserver3dextension_ptr().value._custom_shape_create();
	public function _shape_set_data(p_shape:gd.RID, p_data:gd.Variant):Void __physicsserver3dextension_ptr().value._shape_set_data(((p_shape : gd.RID)), ((p_data : gd.Variant)));
	public function _shape_set_custom_solver_bias(p_shape:gd.RID, p_bias:Float):Void __physicsserver3dextension_ptr().value._shape_set_custom_solver_bias(((p_shape : gd.RID)), ((p_bias : Float)));
	public function _shape_set_margin(p_shape:gd.RID, p_margin:Float):Void __physicsserver3dextension_ptr().value._shape_set_margin(((p_shape : gd.RID)), ((p_margin : Float)));
	public function _shape_get_margin(p_shape:gd.RID):Float return __physicsserver3dextension_ptr().value._shape_get_margin(((p_shape : gd.RID)));
	public function _shape_get_type(p_shape:gd.RID):gd.physicsserver3d.ShapeType return __physicsserver3dextension_ptr().value._shape_get_type(((p_shape : gd.RID)));
	public function _shape_get_data(p_shape:gd.RID):gd.Variant return __physicsserver3dextension_ptr().value._shape_get_data(((p_shape : gd.RID)));
	public function _shape_get_custom_solver_bias(p_shape:gd.RID):Float return __physicsserver3dextension_ptr().value._shape_get_custom_solver_bias(((p_shape : gd.RID)));
	public function _space_create():gd.RID return __physicsserver3dextension_ptr().value._space_create();
	public function _space_set_active(p_space:gd.RID, p_active:Bool):Void __physicsserver3dextension_ptr().value._space_set_active(((p_space : gd.RID)), ((p_active : Bool)));
	public function _space_is_active(p_space:gd.RID):Bool return __physicsserver3dextension_ptr().value._space_is_active(((p_space : gd.RID)));
	public function _space_set_param(p_space:gd.RID, p_param:gd.physicsserver3d.SpaceParameter, p_value:Float):Void __physicsserver3dextension_ptr().value._space_set_param(((p_space : gd.RID)), ((p_param : gd.physicsserver3d.SpaceParameter)), ((p_value : Float)));
	public function _space_get_param(p_space:gd.RID, p_param:gd.physicsserver3d.SpaceParameter):Float return __physicsserver3dextension_ptr().value._space_get_param(((p_space : gd.RID)), ((p_param : gd.physicsserver3d.SpaceParameter)));
	public function _space_get_direct_state(p_space:gd.RID):gd.PhysicsDirectSpaceState3D return __physicsserver3dextension_ptr().value._space_get_direct_state(((p_space : gd.RID)));
	public function _space_set_debug_contacts(p_space:gd.RID, p_max_contacts:Int):Void __physicsserver3dextension_ptr().value._space_set_debug_contacts(((p_space : gd.RID)), ((p_max_contacts : Int)));
	public function _space_get_contacts(p_space:gd.RID):gd.PackedVector3Array return __physicsserver3dextension_ptr().value._space_get_contacts(((p_space : gd.RID)));
	public function _space_get_contact_count(p_space:gd.RID):Int return __physicsserver3dextension_ptr().value._space_get_contact_count(((p_space : gd.RID)));
	public function _area_create():gd.RID return __physicsserver3dextension_ptr().value._area_create();
	public function _area_set_space(p_area:gd.RID, p_space:gd.RID):Void __physicsserver3dextension_ptr().value._area_set_space(((p_area : gd.RID)), ((p_space : gd.RID)));
	public function _area_get_space(p_area:gd.RID):gd.RID return __physicsserver3dextension_ptr().value._area_get_space(((p_area : gd.RID)));
	public function _area_set_shape(p_area:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver3dextension_ptr().value._area_set_shape(((p_area : gd.RID)), ((p_shape_idx : Int)), ((p_shape : gd.RID)));
	public function _area_set_shape_disabled(p_area:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver3dextension_ptr().value._area_set_shape_disabled(((p_area : gd.RID)), ((p_shape_idx : Int)), ((p_disabled : Bool)));
	public function _area_get_shape_count(p_area:gd.RID):Int return __physicsserver3dextension_ptr().value._area_get_shape_count(((p_area : gd.RID)));
	public function _area_get_shape(p_area:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver3dextension_ptr().value._area_get_shape(((p_area : gd.RID)), ((p_shape_idx : Int)));
	public function _area_remove_shape(p_area:gd.RID, p_shape_idx:Int):Void __physicsserver3dextension_ptr().value._area_remove_shape(((p_area : gd.RID)), ((p_shape_idx : Int)));
	public function _area_clear_shapes(p_area:gd.RID):Void __physicsserver3dextension_ptr().value._area_clear_shapes(((p_area : gd.RID)));
	public function _area_attach_object_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver3dextension_ptr().value._area_attach_object_instance_id(((p_area : gd.RID)), ((p_id : Int)));
	public function _area_get_object_instance_id(p_area:gd.RID):Int return __physicsserver3dextension_ptr().value._area_get_object_instance_id(((p_area : gd.RID)));
	public function _area_set_param(p_area:gd.RID, p_param:gd.physicsserver3d.AreaParameter, p_value:gd.Variant):Void __physicsserver3dextension_ptr().value._area_set_param(((p_area : gd.RID)), ((p_param : gd.physicsserver3d.AreaParameter)), ((p_value : gd.Variant)));
	public function _area_get_param(p_area:gd.RID, p_param:gd.physicsserver3d.AreaParameter):gd.Variant return __physicsserver3dextension_ptr().value._area_get_param(((p_area : gd.RID)), ((p_param : gd.physicsserver3d.AreaParameter)));
	public function _area_set_collision_layer(p_area:gd.RID, p_layer:Int):Void __physicsserver3dextension_ptr().value._area_set_collision_layer(((p_area : gd.RID)), ((p_layer : Int)));
	public function _area_get_collision_layer(p_area:gd.RID):Int return __physicsserver3dextension_ptr().value._area_get_collision_layer(((p_area : gd.RID)));
	public function _area_set_collision_mask(p_area:gd.RID, p_mask:Int):Void __physicsserver3dextension_ptr().value._area_set_collision_mask(((p_area : gd.RID)), ((p_mask : Int)));
	public function _area_get_collision_mask(p_area:gd.RID):Int return __physicsserver3dextension_ptr().value._area_get_collision_mask(((p_area : gd.RID)));
	public function _area_set_monitorable(p_area:gd.RID, p_monitorable:Bool):Void __physicsserver3dextension_ptr().value._area_set_monitorable(((p_area : gd.RID)), ((p_monitorable : Bool)));
	public function _area_set_ray_pickable(p_area:gd.RID, p_enable:Bool):Void __physicsserver3dextension_ptr().value._area_set_ray_pickable(((p_area : gd.RID)), ((p_enable : Bool)));
	public function _area_set_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver3dextension_ptr().value._area_set_monitor_callback(((p_area : gd.RID)), ((p_callback : gd.Callable)));
	public function _area_set_area_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver3dextension_ptr().value._area_set_area_monitor_callback(((p_area : gd.RID)), ((p_callback : gd.Callable)));
	public function _body_create():gd.RID return __physicsserver3dextension_ptr().value._body_create();
	public function _body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver3dextension_ptr().value._body_set_space(((p_body : gd.RID)), ((p_space : gd.RID)));
	public function _body_get_space(p_body:gd.RID):gd.RID return __physicsserver3dextension_ptr().value._body_get_space(((p_body : gd.RID)));
	public function _body_set_mode(p_body:gd.RID, p_mode:gd.physicsserver3d.BodyMode):Void __physicsserver3dextension_ptr().value._body_set_mode(((p_body : gd.RID)), ((p_mode : gd.physicsserver3d.BodyMode)));
	public function _body_get_mode(p_body:gd.RID):gd.physicsserver3d.BodyMode return __physicsserver3dextension_ptr().value._body_get_mode(((p_body : gd.RID)));
	public function _body_set_shape(p_body:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver3dextension_ptr().value._body_set_shape(((p_body : gd.RID)), ((p_shape_idx : Int)), ((p_shape : gd.RID)));
	public function _body_set_shape_disabled(p_body:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver3dextension_ptr().value._body_set_shape_disabled(((p_body : gd.RID)), ((p_shape_idx : Int)), ((p_disabled : Bool)));
	public function _body_get_shape_count(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_shape_count(((p_body : gd.RID)));
	public function _body_get_shape(p_body:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver3dextension_ptr().value._body_get_shape(((p_body : gd.RID)), ((p_shape_idx : Int)));
	public function _body_remove_shape(p_body:gd.RID, p_shape_idx:Int):Void __physicsserver3dextension_ptr().value._body_remove_shape(((p_body : gd.RID)), ((p_shape_idx : Int)));
	public function _body_clear_shapes(p_body:gd.RID):Void __physicsserver3dextension_ptr().value._body_clear_shapes(((p_body : gd.RID)));
	public function _body_attach_object_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver3dextension_ptr().value._body_attach_object_instance_id(((p_body : gd.RID)), ((p_id : Int)));
	public function _body_get_object_instance_id(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_object_instance_id(((p_body : gd.RID)));
	public function _body_set_enable_continuous_collision_detection(p_body:gd.RID, p_enable:Bool):Void __physicsserver3dextension_ptr().value._body_set_enable_continuous_collision_detection(((p_body : gd.RID)), ((p_enable : Bool)));
	public function _body_is_continuous_collision_detection_enabled(p_body:gd.RID):Bool return __physicsserver3dextension_ptr().value._body_is_continuous_collision_detection_enabled(((p_body : gd.RID)));
	public function _body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver3dextension_ptr().value._body_set_collision_layer(((p_body : gd.RID)), ((p_layer : Int)));
	public function _body_get_collision_layer(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_collision_layer(((p_body : gd.RID)));
	public function _body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver3dextension_ptr().value._body_set_collision_mask(((p_body : gd.RID)), ((p_mask : Int)));
	public function _body_get_collision_mask(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_collision_mask(((p_body : gd.RID)));
	public function _body_set_collision_priority(p_body:gd.RID, p_priority:Float):Void __physicsserver3dextension_ptr().value._body_set_collision_priority(((p_body : gd.RID)), ((p_priority : Float)));
	public function _body_get_collision_priority(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._body_get_collision_priority(((p_body : gd.RID)));
	public function _body_set_user_flags(p_body:gd.RID, p_flags:Int):Void __physicsserver3dextension_ptr().value._body_set_user_flags(((p_body : gd.RID)), ((p_flags : Int)));
	public function _body_get_user_flags(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_user_flags(((p_body : gd.RID)));
	public function _body_set_param(p_body:gd.RID, p_param:gd.physicsserver3d.BodyParameter, p_value:gd.Variant):Void __physicsserver3dextension_ptr().value._body_set_param(((p_body : gd.RID)), ((p_param : gd.physicsserver3d.BodyParameter)), ((p_value : gd.Variant)));
	public function _body_get_param(p_body:gd.RID, p_param:gd.physicsserver3d.BodyParameter):gd.Variant return __physicsserver3dextension_ptr().value._body_get_param(((p_body : gd.RID)), ((p_param : gd.physicsserver3d.BodyParameter)));
	public function _body_reset_mass_properties(p_body:gd.RID):Void __physicsserver3dextension_ptr().value._body_reset_mass_properties(((p_body : gd.RID)));
	public function _body_set_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState, p_value:gd.Variant):Void __physicsserver3dextension_ptr().value._body_set_state(((p_body : gd.RID)), ((p_state : gd.physicsserver3d.BodyState)), ((p_value : gd.Variant)));
	public function _body_get_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState):gd.Variant return __physicsserver3dextension_ptr().value._body_get_state(((p_body : gd.RID)), ((p_state : gd.physicsserver3d.BodyState)));
	public function _body_apply_central_impulse(p_body:gd.RID, p_impulse:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_central_impulse(((p_body : gd.RID)), ((p_impulse : gd.Vector3)));
	public function _body_apply_impulse(p_body:gd.RID, p_impulse:gd.Vector3, p_position:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_impulse(((p_body : gd.RID)), ((p_impulse : gd.Vector3)), ((p_position : gd.Vector3)));
	public function _body_apply_torque_impulse(p_body:gd.RID, p_impulse:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_torque_impulse(((p_body : gd.RID)), ((p_impulse : gd.Vector3)));
	public function _body_apply_central_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_central_force(((p_body : gd.RID)), ((p_force : gd.Vector3)));
	public function _body_apply_force(p_body:gd.RID, p_force:gd.Vector3, p_position:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_force(((p_body : gd.RID)), ((p_force : gd.Vector3)), ((p_position : gd.Vector3)));
	public function _body_apply_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_apply_torque(((p_body : gd.RID)), ((p_torque : gd.Vector3)));
	public function _body_add_constant_central_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_add_constant_central_force(((p_body : gd.RID)), ((p_force : gd.Vector3)));
	public function _body_add_constant_force(p_body:gd.RID, p_force:gd.Vector3, p_position:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_add_constant_force(((p_body : gd.RID)), ((p_force : gd.Vector3)), ((p_position : gd.Vector3)));
	public function _body_add_constant_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_add_constant_torque(((p_body : gd.RID)), ((p_torque : gd.Vector3)));
	public function _body_set_constant_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_set_constant_force(((p_body : gd.RID)), ((p_force : gd.Vector3)));
	public function _body_get_constant_force(p_body:gd.RID):gd.Vector3 return __physicsserver3dextension_ptr().value._body_get_constant_force(((p_body : gd.RID)));
	public function _body_set_constant_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_set_constant_torque(((p_body : gd.RID)), ((p_torque : gd.Vector3)));
	public function _body_get_constant_torque(p_body:gd.RID):gd.Vector3 return __physicsserver3dextension_ptr().value._body_get_constant_torque(((p_body : gd.RID)));
	public function _body_set_axis_velocity(p_body:gd.RID, p_axis_velocity:gd.Vector3):Void __physicsserver3dextension_ptr().value._body_set_axis_velocity(((p_body : gd.RID)), ((p_axis_velocity : gd.Vector3)));
	public function _body_set_axis_lock(p_body:gd.RID, p_axis:gd.physicsserver3d.BodyAxis, p_lock:Bool):Void __physicsserver3dextension_ptr().value._body_set_axis_lock(((p_body : gd.RID)), ((p_axis : gd.physicsserver3d.BodyAxis)), ((p_lock : Bool)));
	public function _body_is_axis_locked(p_body:gd.RID, p_axis:gd.physicsserver3d.BodyAxis):Bool return __physicsserver3dextension_ptr().value._body_is_axis_locked(((p_body : gd.RID)), ((p_axis : gd.physicsserver3d.BodyAxis)));
	public function _body_add_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver3dextension_ptr().value._body_add_collision_exception(((p_body : gd.RID)), ((p_excepted_body : gd.RID)));
	public function _body_remove_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver3dextension_ptr().value._body_remove_collision_exception(((p_body : gd.RID)), ((p_excepted_body : gd.RID)));
	public function _body_set_max_contacts_reported(p_body:gd.RID, p_amount:Int):Void __physicsserver3dextension_ptr().value._body_set_max_contacts_reported(((p_body : gd.RID)), ((p_amount : Int)));
	public function _body_get_max_contacts_reported(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._body_get_max_contacts_reported(((p_body : gd.RID)));
	public function _body_set_contacts_reported_depth_threshold(p_body:gd.RID, p_threshold:Float):Void __physicsserver3dextension_ptr().value._body_set_contacts_reported_depth_threshold(((p_body : gd.RID)), ((p_threshold : Float)));
	public function _body_get_contacts_reported_depth_threshold(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._body_get_contacts_reported_depth_threshold(((p_body : gd.RID)));
	public function _body_set_omit_force_integration(p_body:gd.RID, p_enable:Bool):Void __physicsserver3dextension_ptr().value._body_set_omit_force_integration(((p_body : gd.RID)), ((p_enable : Bool)));
	public function _body_is_omitting_force_integration(p_body:gd.RID):Bool return __physicsserver3dextension_ptr().value._body_is_omitting_force_integration(((p_body : gd.RID)));
	public function _body_set_state_sync_callback(p_body:gd.RID, p_callable:gd.Callable):Void __physicsserver3dextension_ptr().value._body_set_state_sync_callback(((p_body : gd.RID)), ((p_callable : gd.Callable)));
	public function _body_set_force_integration_callback(p_body:gd.RID, p_callable:gd.Callable, p_userdata:gd.Variant):Void __physicsserver3dextension_ptr().value._body_set_force_integration_callback(((p_body : gd.RID)), ((p_callable : gd.Callable)), ((p_userdata : gd.Variant)));
	public function _body_set_ray_pickable(p_body:gd.RID, p_enable:Bool):Void __physicsserver3dextension_ptr().value._body_set_ray_pickable(((p_body : gd.RID)), ((p_enable : Bool)));
	public function _body_get_direct_state(p_body:gd.RID):gd.PhysicsDirectBodyState3D return __physicsserver3dextension_ptr().value._body_get_direct_state(((p_body : gd.RID)));
	public function _soft_body_create():gd.RID return __physicsserver3dextension_ptr().value._soft_body_create();
	public function _soft_body_update_rendering_server(p_body:gd.RID, p_rendering_server_handler:gd.PhysicsServer3DRenderingServerHandler):Void __physicsserver3dextension_ptr().value._soft_body_update_rendering_server(((p_body : gd.RID)), ((p_rendering_server_handler : gd.PhysicsServer3DRenderingServerHandler)));
	public function _soft_body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver3dextension_ptr().value._soft_body_set_space(((p_body : gd.RID)), ((p_space : gd.RID)));
	public function _soft_body_get_space(p_body:gd.RID):gd.RID return __physicsserver3dextension_ptr().value._soft_body_get_space(((p_body : gd.RID)));
	public function _soft_body_set_ray_pickable(p_body:gd.RID, p_enable:Bool):Void __physicsserver3dextension_ptr().value._soft_body_set_ray_pickable(((p_body : gd.RID)), ((p_enable : Bool)));
	public function _soft_body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver3dextension_ptr().value._soft_body_set_collision_layer(((p_body : gd.RID)), ((p_layer : Int)));
	public function _soft_body_get_collision_layer(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._soft_body_get_collision_layer(((p_body : gd.RID)));
	public function _soft_body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver3dextension_ptr().value._soft_body_set_collision_mask(((p_body : gd.RID)), ((p_mask : Int)));
	public function _soft_body_get_collision_mask(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._soft_body_get_collision_mask(((p_body : gd.RID)));
	public function _soft_body_add_collision_exception(p_body:gd.RID, p_body_b:gd.RID):Void __physicsserver3dextension_ptr().value._soft_body_add_collision_exception(((p_body : gd.RID)), ((p_body_b : gd.RID)));
	public function _soft_body_remove_collision_exception(p_body:gd.RID, p_body_b:gd.RID):Void __physicsserver3dextension_ptr().value._soft_body_remove_collision_exception(((p_body : gd.RID)), ((p_body_b : gd.RID)));
	public function _soft_body_set_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState, p_variant:gd.Variant):Void __physicsserver3dextension_ptr().value._soft_body_set_state(((p_body : gd.RID)), ((p_state : gd.physicsserver3d.BodyState)), ((p_variant : gd.Variant)));
	public function _soft_body_get_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState):gd.Variant return __physicsserver3dextension_ptr().value._soft_body_get_state(((p_body : gd.RID)), ((p_state : gd.physicsserver3d.BodyState)));
	public function _soft_body_set_simulation_precision(p_body:gd.RID, p_simulation_precision:Int):Void __physicsserver3dextension_ptr().value._soft_body_set_simulation_precision(((p_body : gd.RID)), ((p_simulation_precision : Int)));
	public function _soft_body_get_simulation_precision(p_body:gd.RID):Int return __physicsserver3dextension_ptr().value._soft_body_get_simulation_precision(((p_body : gd.RID)));
	public function _soft_body_set_total_mass(p_body:gd.RID, p_total_mass:Float):Void __physicsserver3dextension_ptr().value._soft_body_set_total_mass(((p_body : gd.RID)), ((p_total_mass : Float)));
	public function _soft_body_get_total_mass(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._soft_body_get_total_mass(((p_body : gd.RID)));
	public function _soft_body_set_linear_stiffness(p_body:gd.RID, p_linear_stiffness:Float):Void __physicsserver3dextension_ptr().value._soft_body_set_linear_stiffness(((p_body : gd.RID)), ((p_linear_stiffness : Float)));
	public function _soft_body_get_linear_stiffness(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._soft_body_get_linear_stiffness(((p_body : gd.RID)));
	public function _soft_body_set_pressure_coefficient(p_body:gd.RID, p_pressure_coefficient:Float):Void __physicsserver3dextension_ptr().value._soft_body_set_pressure_coefficient(((p_body : gd.RID)), ((p_pressure_coefficient : Float)));
	public function _soft_body_get_pressure_coefficient(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._soft_body_get_pressure_coefficient(((p_body : gd.RID)));
	public function _soft_body_set_damping_coefficient(p_body:gd.RID, p_damping_coefficient:Float):Void __physicsserver3dextension_ptr().value._soft_body_set_damping_coefficient(((p_body : gd.RID)), ((p_damping_coefficient : Float)));
	public function _soft_body_get_damping_coefficient(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._soft_body_get_damping_coefficient(((p_body : gd.RID)));
	public function _soft_body_set_drag_coefficient(p_body:gd.RID, p_drag_coefficient:Float):Void __physicsserver3dextension_ptr().value._soft_body_set_drag_coefficient(((p_body : gd.RID)), ((p_drag_coefficient : Float)));
	public function _soft_body_get_drag_coefficient(p_body:gd.RID):Float return __physicsserver3dextension_ptr().value._soft_body_get_drag_coefficient(((p_body : gd.RID)));
	public function _soft_body_set_mesh(p_body:gd.RID, p_mesh:gd.RID):Void __physicsserver3dextension_ptr().value._soft_body_set_mesh(((p_body : gd.RID)), ((p_mesh : gd.RID)));
	public function _soft_body_get_bounds(p_body:gd.RID):gd.AABB return __physicsserver3dextension_ptr().value._soft_body_get_bounds(((p_body : gd.RID)));
	public function _soft_body_move_point(p_body:gd.RID, p_point_index:Int, p_global_position:gd.Vector3):Void __physicsserver3dextension_ptr().value._soft_body_move_point(((p_body : gd.RID)), ((p_point_index : Int)), ((p_global_position : gd.Vector3)));
	public function _soft_body_get_point_global_position(p_body:gd.RID, p_point_index:Int):gd.Vector3 return __physicsserver3dextension_ptr().value._soft_body_get_point_global_position(((p_body : gd.RID)), ((p_point_index : Int)));
	public function _soft_body_remove_all_pinned_points(p_body:gd.RID):Void __physicsserver3dextension_ptr().value._soft_body_remove_all_pinned_points(((p_body : gd.RID)));
	public function _soft_body_pin_point(p_body:gd.RID, p_point_index:Int, p_pin:Bool):Void __physicsserver3dextension_ptr().value._soft_body_pin_point(((p_body : gd.RID)), ((p_point_index : Int)), ((p_pin : Bool)));
	public function _soft_body_is_point_pinned(p_body:gd.RID, p_point_index:Int):Bool return __physicsserver3dextension_ptr().value._soft_body_is_point_pinned(((p_body : gd.RID)), ((p_point_index : Int)));
	public function _joint_create():gd.RID return __physicsserver3dextension_ptr().value._joint_create();
	public function _joint_clear(p_joint:gd.RID):Void __physicsserver3dextension_ptr().value._joint_clear(((p_joint : gd.RID)));
	public function _joint_make_pin(p_joint:gd.RID, p_body_A:gd.RID, p_local_A:gd.Vector3, p_body_B:gd.RID, p_local_B:gd.Vector3):Void __physicsserver3dextension_ptr().value._joint_make_pin(((p_joint : gd.RID)), ((p_body_A : gd.RID)), ((p_local_A : gd.Vector3)), ((p_body_B : gd.RID)), ((p_local_B : gd.Vector3)));
	public function _pin_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.PinJointParam, p_value:Float):Void __physicsserver3dextension_ptr().value._pin_joint_set_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.PinJointParam)), ((p_value : Float)));
	public function _pin_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.PinJointParam):Float return __physicsserver3dextension_ptr().value._pin_joint_get_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.PinJointParam)));
	public function _pin_joint_set_local_a(p_joint:gd.RID, p_local_A:gd.Vector3):Void __physicsserver3dextension_ptr().value._pin_joint_set_local_a(((p_joint : gd.RID)), ((p_local_A : gd.Vector3)));
	public function _pin_joint_get_local_a(p_joint:gd.RID):gd.Vector3 return __physicsserver3dextension_ptr().value._pin_joint_get_local_a(((p_joint : gd.RID)));
	public function _pin_joint_set_local_b(p_joint:gd.RID, p_local_B:gd.Vector3):Void __physicsserver3dextension_ptr().value._pin_joint_set_local_b(((p_joint : gd.RID)), ((p_local_B : gd.Vector3)));
	public function _pin_joint_get_local_b(p_joint:gd.RID):gd.Vector3 return __physicsserver3dextension_ptr().value._pin_joint_get_local_b(((p_joint : gd.RID)));
	public function _joint_make_hinge_simple(p_joint:gd.RID, p_body_A:gd.RID, p_pivot_A:gd.Vector3, p_axis_A:gd.Vector3, p_body_B:gd.RID, p_pivot_B:gd.Vector3, p_axis_B:gd.Vector3):Void __physicsserver3dextension_ptr().value._joint_make_hinge_simple(((p_joint : gd.RID)), ((p_body_A : gd.RID)), ((p_pivot_A : gd.Vector3)), ((p_axis_A : gd.Vector3)), ((p_body_B : gd.RID)), ((p_pivot_B : gd.Vector3)), ((p_axis_B : gd.Vector3)));
	public function _hinge_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.HingeJointParam, p_value:Float):Void __physicsserver3dextension_ptr().value._hinge_joint_set_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.HingeJointParam)), ((p_value : Float)));
	public function _hinge_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.HingeJointParam):Float return __physicsserver3dextension_ptr().value._hinge_joint_get_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.HingeJointParam)));
	public function _hinge_joint_set_flag(p_joint:gd.RID, p_flag:gd.physicsserver3d.HingeJointFlag, p_enabled:Bool):Void __physicsserver3dextension_ptr().value._hinge_joint_set_flag(((p_joint : gd.RID)), ((p_flag : gd.physicsserver3d.HingeJointFlag)), ((p_enabled : Bool)));
	public function _hinge_joint_get_flag(p_joint:gd.RID, p_flag:gd.physicsserver3d.HingeJointFlag):Bool return __physicsserver3dextension_ptr().value._hinge_joint_get_flag(((p_joint : gd.RID)), ((p_flag : gd.physicsserver3d.HingeJointFlag)));
	public function _slider_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.SliderJointParam, p_value:Float):Void __physicsserver3dextension_ptr().value._slider_joint_set_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.SliderJointParam)), ((p_value : Float)));
	public function _slider_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.SliderJointParam):Float return __physicsserver3dextension_ptr().value._slider_joint_get_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.SliderJointParam)));
	public function _cone_twist_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.ConeTwistJointParam, p_value:Float):Void __physicsserver3dextension_ptr().value._cone_twist_joint_set_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.ConeTwistJointParam)), ((p_value : Float)));
	public function _cone_twist_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.ConeTwistJointParam):Float return __physicsserver3dextension_ptr().value._cone_twist_joint_get_param(((p_joint : gd.RID)), ((p_param : gd.physicsserver3d.ConeTwistJointParam)));
	public function _generic_6dof_joint_set_param(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_param:gd.physicsserver3d.G6DOFJointAxisParam, p_value:Float):Void __physicsserver3dextension_ptr().value._generic_6dof_joint_set_param(((p_joint : gd.RID)), ((p_axis : gd.vector3.Axis)), ((p_param : gd.physicsserver3d.G6DOFJointAxisParam)), ((p_value : Float)));
	public function _generic_6dof_joint_get_param(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_param:gd.physicsserver3d.G6DOFJointAxisParam):Float return __physicsserver3dextension_ptr().value._generic_6dof_joint_get_param(((p_joint : gd.RID)), ((p_axis : gd.vector3.Axis)), ((p_param : gd.physicsserver3d.G6DOFJointAxisParam)));
	public function _generic_6dof_joint_set_flag(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_flag:gd.physicsserver3d.G6DOFJointAxisFlag, p_enable:Bool):Void __physicsserver3dextension_ptr().value._generic_6dof_joint_set_flag(((p_joint : gd.RID)), ((p_axis : gd.vector3.Axis)), ((p_flag : gd.physicsserver3d.G6DOFJointAxisFlag)), ((p_enable : Bool)));
	public function _generic_6dof_joint_get_flag(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_flag:gd.physicsserver3d.G6DOFJointAxisFlag):Bool return __physicsserver3dextension_ptr().value._generic_6dof_joint_get_flag(((p_joint : gd.RID)), ((p_axis : gd.vector3.Axis)), ((p_flag : gd.physicsserver3d.G6DOFJointAxisFlag)));
	public function _joint_get_type(p_joint:gd.RID):gd.physicsserver3d.JointType return __physicsserver3dextension_ptr().value._joint_get_type(((p_joint : gd.RID)));
	public function _joint_set_solver_priority(p_joint:gd.RID, p_priority:Int):Void __physicsserver3dextension_ptr().value._joint_set_solver_priority(((p_joint : gd.RID)), ((p_priority : Int)));
	public function _joint_get_solver_priority(p_joint:gd.RID):Int return __physicsserver3dextension_ptr().value._joint_get_solver_priority(((p_joint : gd.RID)));
	public function _joint_disable_collisions_between_bodies(p_joint:gd.RID, p_disable:Bool):Void __physicsserver3dextension_ptr().value._joint_disable_collisions_between_bodies(((p_joint : gd.RID)), ((p_disable : Bool)));
	public function _joint_is_disabled_collisions_between_bodies(p_joint:gd.RID):Bool return __physicsserver3dextension_ptr().value._joint_is_disabled_collisions_between_bodies(((p_joint : gd.RID)));
	public function _free_rid(p_rid:gd.RID):Void __physicsserver3dextension_ptr().value._free_rid(((p_rid : gd.RID)));
	public function _set_active(p_active:Bool):Void __physicsserver3dextension_ptr().value._set_active(((p_active : Bool)));
	public function _init():Void __physicsserver3dextension_ptr().value._init();
	public function _step(p_step:Float):Void __physicsserver3dextension_ptr().value._step(((p_step : Float)));
	public function _sync():Void __physicsserver3dextension_ptr().value._sync();
	public function _flush_queries():Void __physicsserver3dextension_ptr().value._flush_queries();
	public function _end_sync():Void __physicsserver3dextension_ptr().value._end_sync();
	public function _finish():Void __physicsserver3dextension_ptr().value._finish();
	public function _is_flushing_queries():Bool return __physicsserver3dextension_ptr().value._is_flushing_queries();
	public function _get_process_info(p_process_info:gd.physicsserver3d.ProcessInfo):Int return __physicsserver3dextension_ptr().value._get_process_info(((p_process_info : gd.physicsserver3d.ProcessInfo)));
	public function body_test_motion_is_excluding_body(p_body:gd.RID):Bool return __physicsserver3dextension_ptr().value.body_test_motion_is_excluding_body(((p_body : gd.RID)));
	public function body_test_motion_is_excluding_object(p_object:Int):Bool return __physicsserver3dextension_ptr().value.body_test_motion_is_excluding_object(((p_object : Int)));
}