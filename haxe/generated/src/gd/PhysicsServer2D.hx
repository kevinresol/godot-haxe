package gd;
class PhysicsServer2D extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.PhysicsServer2D.PhysicsServer2D_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "PhysicsServer2D");
			trace("Allocating PhysicsServer2D");
			native = gdnative.PhysicsServer2D.PhysicsServer2D_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.PhysicsServer2D = new PhysicsServer2D(gdnative.PhysicsServer2D.PhysicsServer2D_extern.get_singleton());
	extern inline function __physicsserver2d_ptr():cpp.Pointer<gdnative.PhysicsServer2D.PhysicsServer2D_extern> return cast __gd.ptr;
	public function world_boundary_shape_create():gd.RID return __physicsserver2d_ptr().value.world_boundary_shape_create();
	public function separation_ray_shape_create():gd.RID return __physicsserver2d_ptr().value.separation_ray_shape_create();
	public function segment_shape_create():gd.RID return __physicsserver2d_ptr().value.segment_shape_create();
	public function circle_shape_create():gd.RID return __physicsserver2d_ptr().value.circle_shape_create();
	public function rectangle_shape_create():gd.RID return __physicsserver2d_ptr().value.rectangle_shape_create();
	public function capsule_shape_create():gd.RID return __physicsserver2d_ptr().value.capsule_shape_create();
	public function convex_polygon_shape_create():gd.RID return __physicsserver2d_ptr().value.convex_polygon_shape_create();
	public function concave_polygon_shape_create():gd.RID return __physicsserver2d_ptr().value.concave_polygon_shape_create();
	public function shape_set_data(p_shape:gd.RID, p_data:gd.Variant):Void __physicsserver2d_ptr().value.shape_set_data(p_shape, p_data);
	public function shape_get_type(p_shape:gd.RID):gd.physicsserver2d.ShapeType return __physicsserver2d_ptr().value.shape_get_type(p_shape);
	public function shape_get_data(p_shape:gd.RID):gd.Variant return __physicsserver2d_ptr().value.shape_get_data(p_shape);
	public function space_create():gd.RID return __physicsserver2d_ptr().value.space_create();
	public function space_set_active(p_space:gd.RID, p_active:Bool):Void __physicsserver2d_ptr().value.space_set_active(p_space, p_active);
	public function space_is_active(p_space:gd.RID):Bool return __physicsserver2d_ptr().value.space_is_active(p_space);
	public function space_set_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter, p_value:Float):Void __physicsserver2d_ptr().value.space_set_param(p_space, p_param, p_value);
	public function space_get_param(p_space:gd.RID, p_param:gd.physicsserver2d.SpaceParameter):Float return __physicsserver2d_ptr().value.space_get_param(p_space, p_param);
	public function space_get_direct_state(p_space:gd.RID):gd.PhysicsDirectSpaceState2D return __physicsserver2d_ptr().value.space_get_direct_state(p_space);
	public function area_create():gd.RID return __physicsserver2d_ptr().value.area_create();
	public function area_set_space(p_area:gd.RID, p_space:gd.RID):Void __physicsserver2d_ptr().value.area_set_space(p_area, p_space);
	public function area_get_space(p_area:gd.RID):gd.RID return __physicsserver2d_ptr().value.area_get_space(p_area);
	public function area_set_shape(p_area:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver2d_ptr().value.area_set_shape(p_area, p_shape_idx, p_shape);
	public function area_set_shape_disabled(p_area:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver2d_ptr().value.area_set_shape_disabled(p_area, p_shape_idx, p_disabled);
	public function area_get_shape_count(p_area:gd.RID):Int return __physicsserver2d_ptr().value.area_get_shape_count(p_area);
	public function area_get_shape(p_area:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver2d_ptr().value.area_get_shape(p_area, p_shape_idx);
	public function area_remove_shape(p_area:gd.RID, p_shape_idx:Int):Void __physicsserver2d_ptr().value.area_remove_shape(p_area, p_shape_idx);
	public function area_clear_shapes(p_area:gd.RID):Void __physicsserver2d_ptr().value.area_clear_shapes(p_area);
	public function area_set_collision_layer(p_area:gd.RID, p_layer:Int):Void __physicsserver2d_ptr().value.area_set_collision_layer(p_area, p_layer);
	public function area_get_collision_layer(p_area:gd.RID):Int return __physicsserver2d_ptr().value.area_get_collision_layer(p_area);
	public function area_set_collision_mask(p_area:gd.RID, p_mask:Int):Void __physicsserver2d_ptr().value.area_set_collision_mask(p_area, p_mask);
	public function area_get_collision_mask(p_area:gd.RID):Int return __physicsserver2d_ptr().value.area_get_collision_mask(p_area);
	public function area_set_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter, p_value:gd.Variant):Void __physicsserver2d_ptr().value.area_set_param(p_area, p_param, p_value);
	public function area_get_param(p_area:gd.RID, p_param:gd.physicsserver2d.AreaParameter):gd.Variant return __physicsserver2d_ptr().value.area_get_param(p_area, p_param);
	public function area_attach_object_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver2d_ptr().value.area_attach_object_instance_id(p_area, p_id);
	public function area_get_object_instance_id(p_area:gd.RID):Int return __physicsserver2d_ptr().value.area_get_object_instance_id(p_area);
	public function area_attach_canvas_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver2d_ptr().value.area_attach_canvas_instance_id(p_area, p_id);
	public function area_get_canvas_instance_id(p_area:gd.RID):Int return __physicsserver2d_ptr().value.area_get_canvas_instance_id(p_area);
	public function area_set_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver2d_ptr().value.area_set_monitor_callback(p_area, p_callback);
	public function area_set_area_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver2d_ptr().value.area_set_area_monitor_callback(p_area, p_callback);
	public function area_set_monitorable(p_area:gd.RID, p_monitorable:Bool):Void __physicsserver2d_ptr().value.area_set_monitorable(p_area, p_monitorable);
	public function body_create():gd.RID return __physicsserver2d_ptr().value.body_create();
	public function body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver2d_ptr().value.body_set_space(p_body, p_space);
	public function body_get_space(p_body:gd.RID):gd.RID return __physicsserver2d_ptr().value.body_get_space(p_body);
	public function body_set_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.BodyMode):Void __physicsserver2d_ptr().value.body_set_mode(p_body, p_mode);
	public function body_get_mode(p_body:gd.RID):gd.physicsserver2d.BodyMode return __physicsserver2d_ptr().value.body_get_mode(p_body);
	public function body_set_shape(p_body:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver2d_ptr().value.body_set_shape(p_body, p_shape_idx, p_shape);
	public function body_get_shape_count(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_shape_count(p_body);
	public function body_get_shape(p_body:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver2d_ptr().value.body_get_shape(p_body, p_shape_idx);
	public function body_remove_shape(p_body:gd.RID, p_shape_idx:Int):Void __physicsserver2d_ptr().value.body_remove_shape(p_body, p_shape_idx);
	public function body_clear_shapes(p_body:gd.RID):Void __physicsserver2d_ptr().value.body_clear_shapes(p_body);
	public function body_set_shape_disabled(p_body:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver2d_ptr().value.body_set_shape_disabled(p_body, p_shape_idx, p_disabled);
	public function body_set_shape_as_one_way_collision(p_body:gd.RID, p_shape_idx:Int, p_enable:Bool, p_margin:Float):Void __physicsserver2d_ptr().value.body_set_shape_as_one_way_collision(p_body, p_shape_idx, p_enable, p_margin);
	public function body_attach_object_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver2d_ptr().value.body_attach_object_instance_id(p_body, p_id);
	public function body_get_object_instance_id(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_object_instance_id(p_body);
	public function body_attach_canvas_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver2d_ptr().value.body_attach_canvas_instance_id(p_body, p_id);
	public function body_get_canvas_instance_id(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_canvas_instance_id(p_body);
	public function body_set_continuous_collision_detection_mode(p_body:gd.RID, p_mode:gd.physicsserver2d.CCDMode):Void __physicsserver2d_ptr().value.body_set_continuous_collision_detection_mode(p_body, p_mode);
	public function body_get_continuous_collision_detection_mode(p_body:gd.RID):gd.physicsserver2d.CCDMode return __physicsserver2d_ptr().value.body_get_continuous_collision_detection_mode(p_body);
	public function body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver2d_ptr().value.body_set_collision_layer(p_body, p_layer);
	public function body_get_collision_layer(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_collision_layer(p_body);
	public function body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver2d_ptr().value.body_set_collision_mask(p_body, p_mask);
	public function body_get_collision_mask(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_collision_mask(p_body);
	public function body_set_collision_priority(p_body:gd.RID, p_priority:Float):Void __physicsserver2d_ptr().value.body_set_collision_priority(p_body, p_priority);
	public function body_get_collision_priority(p_body:gd.RID):Float return __physicsserver2d_ptr().value.body_get_collision_priority(p_body);
	public function body_set_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter, p_value:gd.Variant):Void __physicsserver2d_ptr().value.body_set_param(p_body, p_param, p_value);
	public function body_get_param(p_body:gd.RID, p_param:gd.physicsserver2d.BodyParameter):gd.Variant return __physicsserver2d_ptr().value.body_get_param(p_body, p_param);
	public function body_reset_mass_properties(p_body:gd.RID):Void __physicsserver2d_ptr().value.body_reset_mass_properties(p_body);
	public function body_set_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState, p_value:gd.Variant):Void __physicsserver2d_ptr().value.body_set_state(p_body, p_state, p_value);
	public function body_get_state(p_body:gd.RID, p_state:gd.physicsserver2d.BodyState):gd.Variant return __physicsserver2d_ptr().value.body_get_state(p_body, p_state);
	public function body_apply_central_impulse(p_body:gd.RID, p_impulse:gd.Vector2):Void __physicsserver2d_ptr().value.body_apply_central_impulse(p_body, p_impulse);
	public function body_apply_torque_impulse(p_body:gd.RID, p_impulse:Float):Void __physicsserver2d_ptr().value.body_apply_torque_impulse(p_body, p_impulse);
	public function body_apply_central_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2d_ptr().value.body_apply_central_force(p_body, p_force);
	public function body_apply_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2d_ptr().value.body_apply_torque(p_body, p_torque);
	public function body_add_constant_central_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2d_ptr().value.body_add_constant_central_force(p_body, p_force);
	public function body_add_constant_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2d_ptr().value.body_add_constant_torque(p_body, p_torque);
	public function body_set_constant_force(p_body:gd.RID, p_force:gd.Vector2):Void __physicsserver2d_ptr().value.body_set_constant_force(p_body, p_force);
	public function body_get_constant_force(p_body:gd.RID):gd.Vector2 return __physicsserver2d_ptr().value.body_get_constant_force(p_body);
	public function body_set_constant_torque(p_body:gd.RID, p_torque:Float):Void __physicsserver2d_ptr().value.body_set_constant_torque(p_body, p_torque);
	public function body_get_constant_torque(p_body:gd.RID):Float return __physicsserver2d_ptr().value.body_get_constant_torque(p_body);
	public function body_set_axis_velocity(p_body:gd.RID, p_axis_velocity:gd.Vector2):Void __physicsserver2d_ptr().value.body_set_axis_velocity(p_body, p_axis_velocity);
	public function body_add_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver2d_ptr().value.body_add_collision_exception(p_body, p_excepted_body);
	public function body_remove_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver2d_ptr().value.body_remove_collision_exception(p_body, p_excepted_body);
	public function body_set_max_contacts_reported(p_body:gd.RID, p_amount:Int):Void __physicsserver2d_ptr().value.body_set_max_contacts_reported(p_body, p_amount);
	public function body_get_max_contacts_reported(p_body:gd.RID):Int return __physicsserver2d_ptr().value.body_get_max_contacts_reported(p_body);
	public function body_set_omit_force_integration(p_body:gd.RID, p_enable:Bool):Void __physicsserver2d_ptr().value.body_set_omit_force_integration(p_body, p_enable);
	public function body_is_omitting_force_integration(p_body:gd.RID):Bool return __physicsserver2d_ptr().value.body_is_omitting_force_integration(p_body);
	public function body_set_state_sync_callback(p_body:gd.RID, p_callable:gd.Callable):Void __physicsserver2d_ptr().value.body_set_state_sync_callback(p_body, p_callable);
	public function body_get_direct_state(p_body:gd.RID):gd.PhysicsDirectBodyState2D return __physicsserver2d_ptr().value.body_get_direct_state(p_body);
	public function joint_create():gd.RID return __physicsserver2d_ptr().value.joint_create();
	public function joint_clear(p_joint:gd.RID):Void __physicsserver2d_ptr().value.joint_clear(p_joint);
	public function joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam, p_value:Float):Void __physicsserver2d_ptr().value.joint_set_param(p_joint, p_param, p_value);
	public function joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.JointParam):Float return __physicsserver2d_ptr().value.joint_get_param(p_joint, p_param);
	public function joint_disable_collisions_between_bodies(p_joint:gd.RID, p_disable:Bool):Void __physicsserver2d_ptr().value.joint_disable_collisions_between_bodies(p_joint, p_disable);
	public function joint_is_disabled_collisions_between_bodies(p_joint:gd.RID):Bool return __physicsserver2d_ptr().value.joint_is_disabled_collisions_between_bodies(p_joint);
	public function pin_joint_set_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag, p_enabled:Bool):Void __physicsserver2d_ptr().value.pin_joint_set_flag(p_joint, p_flag, p_enabled);
	public function pin_joint_get_flag(p_joint:gd.RID, p_flag:gd.physicsserver2d.PinJointFlag):Bool return __physicsserver2d_ptr().value.pin_joint_get_flag(p_joint, p_flag);
	public function pin_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam, p_value:Float):Void __physicsserver2d_ptr().value.pin_joint_set_param(p_joint, p_param, p_value);
	public function pin_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.PinJointParam):Float return __physicsserver2d_ptr().value.pin_joint_get_param(p_joint, p_param);
	public function damped_spring_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam, p_value:Float):Void __physicsserver2d_ptr().value.damped_spring_joint_set_param(p_joint, p_param, p_value);
	public function damped_spring_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver2d.DampedSpringParam):Float return __physicsserver2d_ptr().value.damped_spring_joint_get_param(p_joint, p_param);
	public function joint_get_type(p_joint:gd.RID):gd.physicsserver2d.JointType return __physicsserver2d_ptr().value.joint_get_type(p_joint);
	public function free_rid(p_rid:gd.RID):Void __physicsserver2d_ptr().value.free_rid(p_rid);
	public function set_active(p_active:Bool):Void __physicsserver2d_ptr().value.set_active(p_active);
	public function get_process_info(p_process_info:gd.physicsserver2d.ProcessInfo):Int return __physicsserver2d_ptr().value.get_process_info(p_process_info);
}