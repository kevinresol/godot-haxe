package gd;
class NativeMenu extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.NativeMenu.NativeMenu_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "NativeMenu");
			trace("Allocating NativeMenu");
			native = gdnative.NativeMenu.NativeMenu_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.NativeMenu = new NativeMenu(gdnative.NativeMenu.NativeMenu_extern.get_singleton());
	extern inline function __nativemenu_ptr():cpp.Pointer<gdnative.NativeMenu.NativeMenu_extern> return cast __gd.ptr;
	public function has_feature(p_feature:gd.nativemenu.Feature):Bool return __nativemenu_ptr().value.has_feature(p_feature);
	public function has_system_menu(p_menu_id:gd.nativemenu.SystemMenus):Bool return __nativemenu_ptr().value.has_system_menu(p_menu_id);
	public function get_system_menu(p_menu_id:gd.nativemenu.SystemMenus):gd.RID return __nativemenu_ptr().value.get_system_menu(p_menu_id);
	public function get_system_menu_name(p_menu_id:gd.nativemenu.SystemMenus):std.String return __nativemenu_ptr().value.get_system_menu_name(p_menu_id);
	public function create_menu():gd.RID return __nativemenu_ptr().value.create_menu();
	public function has_menu(p_rid:gd.RID):Bool return __nativemenu_ptr().value.has_menu(p_rid);
	public function free_menu(p_rid:gd.RID):Void __nativemenu_ptr().value.free_menu(p_rid);
	public function get_size(p_rid:gd.RID):gd.Vector2 return __nativemenu_ptr().value.get_size(p_rid);
	public function popup(p_rid:gd.RID, p_position:gd.Vector2i):Void __nativemenu_ptr().value.popup(p_rid, p_position);
	public function set_interface_direction(p_rid:gd.RID, p_is_rtl:Bool):Void __nativemenu_ptr().value.set_interface_direction(p_rid, p_is_rtl);
	public function set_popup_open_callback(p_rid:gd.RID, p_callback:gd.Callable):Void __nativemenu_ptr().value.set_popup_open_callback(p_rid, p_callback);
	public function get_popup_open_callback(p_rid:gd.RID):gd.Callable return __nativemenu_ptr().value.get_popup_open_callback(p_rid);
	public function set_popup_close_callback(p_rid:gd.RID, p_callback:gd.Callable):Void __nativemenu_ptr().value.set_popup_close_callback(p_rid, p_callback);
	public function get_popup_close_callback(p_rid:gd.RID):gd.Callable return __nativemenu_ptr().value.get_popup_close_callback(p_rid);
	public function set_minimum_width(p_rid:gd.RID, p_width:Float):Void __nativemenu_ptr().value.set_minimum_width(p_rid, p_width);
	public function get_minimum_width(p_rid:gd.RID):Float return __nativemenu_ptr().value.get_minimum_width(p_rid);
	public function is_opened(p_rid:gd.RID):Bool return __nativemenu_ptr().value.is_opened(p_rid);
	public function add_separator(p_rid:gd.RID, ?p_index:Int = -1):Int return __nativemenu_ptr().value.add_separator(p_rid, p_index);
	public function find_item_index_with_text(p_rid:gd.RID, p_text:std.String):Int return __nativemenu_ptr().value.find_item_index_with_text(p_rid, p_text);
	public function find_item_index_with_tag(p_rid:gd.RID, p_tag:gd.Variant):Int return __nativemenu_ptr().value.find_item_index_with_tag(p_rid, p_tag);
	public function find_item_index_with_submenu(p_rid:gd.RID, p_submenu_rid:gd.RID):Int return __nativemenu_ptr().value.find_item_index_with_submenu(p_rid, p_submenu_rid);
	public function is_item_checked(p_rid:gd.RID, p_idx:Int):Bool return __nativemenu_ptr().value.is_item_checked(p_rid, p_idx);
	public function is_item_checkable(p_rid:gd.RID, p_idx:Int):Bool return __nativemenu_ptr().value.is_item_checkable(p_rid, p_idx);
	public function is_item_radio_checkable(p_rid:gd.RID, p_idx:Int):Bool return __nativemenu_ptr().value.is_item_radio_checkable(p_rid, p_idx);
	public function get_item_callback(p_rid:gd.RID, p_idx:Int):gd.Callable return __nativemenu_ptr().value.get_item_callback(p_rid, p_idx);
	public function get_item_key_callback(p_rid:gd.RID, p_idx:Int):gd.Callable return __nativemenu_ptr().value.get_item_key_callback(p_rid, p_idx);
	public function get_item_tag(p_rid:gd.RID, p_idx:Int):gd.Variant return __nativemenu_ptr().value.get_item_tag(p_rid, p_idx);
	public function get_item_text(p_rid:gd.RID, p_idx:Int):std.String return __nativemenu_ptr().value.get_item_text(p_rid, p_idx);
	public function get_item_submenu(p_rid:gd.RID, p_idx:Int):gd.RID return __nativemenu_ptr().value.get_item_submenu(p_rid, p_idx);
	public function get_item_accelerator(p_rid:gd.RID, p_idx:Int):gd.Key return __nativemenu_ptr().value.get_item_accelerator(p_rid, p_idx);
	public function is_item_disabled(p_rid:gd.RID, p_idx:Int):Bool return __nativemenu_ptr().value.is_item_disabled(p_rid, p_idx);
	public function is_item_hidden(p_rid:gd.RID, p_idx:Int):Bool return __nativemenu_ptr().value.is_item_hidden(p_rid, p_idx);
	public function get_item_tooltip(p_rid:gd.RID, p_idx:Int):std.String return __nativemenu_ptr().value.get_item_tooltip(p_rid, p_idx);
	public function get_item_state(p_rid:gd.RID, p_idx:Int):Int return __nativemenu_ptr().value.get_item_state(p_rid, p_idx);
	public function get_item_max_states(p_rid:gd.RID, p_idx:Int):Int return __nativemenu_ptr().value.get_item_max_states(p_rid, p_idx);
	public function get_item_icon(p_rid:gd.RID, p_idx:Int):gd.Texture2D return __nativemenu_ptr().value.get_item_icon(p_rid, p_idx);
	public function get_item_indentation_level(p_rid:gd.RID, p_idx:Int):Int return __nativemenu_ptr().value.get_item_indentation_level(p_rid, p_idx);
	public function set_item_checked(p_rid:gd.RID, p_idx:Int, p_checked:Bool):Void __nativemenu_ptr().value.set_item_checked(p_rid, p_idx, p_checked);
	public function set_item_checkable(p_rid:gd.RID, p_idx:Int, p_checkable:Bool):Void __nativemenu_ptr().value.set_item_checkable(p_rid, p_idx, p_checkable);
	public function set_item_radio_checkable(p_rid:gd.RID, p_idx:Int, p_checkable:Bool):Void __nativemenu_ptr().value.set_item_radio_checkable(p_rid, p_idx, p_checkable);
	public function set_item_callback(p_rid:gd.RID, p_idx:Int, p_callback:gd.Callable):Void __nativemenu_ptr().value.set_item_callback(p_rid, p_idx, p_callback);
	public function set_item_hover_callbacks(p_rid:gd.RID, p_idx:Int, p_callback:gd.Callable):Void __nativemenu_ptr().value.set_item_hover_callbacks(p_rid, p_idx, p_callback);
	public function set_item_key_callback(p_rid:gd.RID, p_idx:Int, p_key_callback:gd.Callable):Void __nativemenu_ptr().value.set_item_key_callback(p_rid, p_idx, p_key_callback);
	public function set_item_tag(p_rid:gd.RID, p_idx:Int, p_tag:gd.Variant):Void __nativemenu_ptr().value.set_item_tag(p_rid, p_idx, p_tag);
	public function set_item_text(p_rid:gd.RID, p_idx:Int, p_text:std.String):Void __nativemenu_ptr().value.set_item_text(p_rid, p_idx, p_text);
	public function set_item_submenu(p_rid:gd.RID, p_idx:Int, p_submenu_rid:gd.RID):Void __nativemenu_ptr().value.set_item_submenu(p_rid, p_idx, p_submenu_rid);
	public function set_item_accelerator(p_rid:gd.RID, p_idx:Int, p_keycode:gd.Key):Void __nativemenu_ptr().value.set_item_accelerator(p_rid, p_idx, p_keycode);
	public function set_item_disabled(p_rid:gd.RID, p_idx:Int, p_disabled:Bool):Void __nativemenu_ptr().value.set_item_disabled(p_rid, p_idx, p_disabled);
	public function set_item_hidden(p_rid:gd.RID, p_idx:Int, p_hidden:Bool):Void __nativemenu_ptr().value.set_item_hidden(p_rid, p_idx, p_hidden);
	public function set_item_tooltip(p_rid:gd.RID, p_idx:Int, p_tooltip:std.String):Void __nativemenu_ptr().value.set_item_tooltip(p_rid, p_idx, p_tooltip);
	public function set_item_state(p_rid:gd.RID, p_idx:Int, p_state:Int):Void __nativemenu_ptr().value.set_item_state(p_rid, p_idx, p_state);
	public function set_item_max_states(p_rid:gd.RID, p_idx:Int, p_max_states:Int):Void __nativemenu_ptr().value.set_item_max_states(p_rid, p_idx, p_max_states);
	public function set_item_icon(p_rid:gd.RID, p_idx:Int, p_icon:gd.Texture2D):Void __nativemenu_ptr().value.set_item_icon(p_rid, p_idx, p_icon);
	public function set_item_indentation_level(p_rid:gd.RID, p_idx:Int, p_level:Int):Void __nativemenu_ptr().value.set_item_indentation_level(p_rid, p_idx, p_level);
	public function get_item_count(p_rid:gd.RID):Int return __nativemenu_ptr().value.get_item_count(p_rid);
	public function is_system_menu(p_rid:gd.RID):Bool return __nativemenu_ptr().value.is_system_menu(p_rid);
	public function remove_item(p_rid:gd.RID, p_idx:Int):Void __nativemenu_ptr().value.remove_item(p_rid, p_idx);
	public function clear(p_rid:gd.RID):Void __nativemenu_ptr().value.clear(p_rid);
}