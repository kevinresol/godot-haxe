package gd;
class NavigationServer2D extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.NavigationServer2D.NavigationServer2D_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "NavigationServer2D");
			trace("Allocating NavigationServer2D");
			native = gdnative.NavigationServer2D.NavigationServer2D_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.NavigationServer2D = new NavigationServer2D(gdnative.NavigationServer2D.NavigationServer2D_extern.get_singleton());
	extern inline function __navigationserver2d_ptr():cpp.Pointer<gdnative.NavigationServer2D.NavigationServer2D_extern> return cast __gd.ptr;
	public function map_create():gd.RID return __navigationserver2d_ptr().value.map_create();
	public function map_set_active(p_map:gd.RID, p_active:Bool):Void __navigationserver2d_ptr().value.map_set_active(p_map, p_active);
	public function map_is_active(p_map:gd.RID):Bool return __navigationserver2d_ptr().value.map_is_active(p_map);
	public function map_set_cell_size(p_map:gd.RID, p_cell_size:Float):Void __navigationserver2d_ptr().value.map_set_cell_size(p_map, p_cell_size);
	public function map_get_cell_size(p_map:gd.RID):Float return __navigationserver2d_ptr().value.map_get_cell_size(p_map);
	public function map_set_use_edge_connections(p_map:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.map_set_use_edge_connections(p_map, p_enabled);
	public function map_get_use_edge_connections(p_map:gd.RID):Bool return __navigationserver2d_ptr().value.map_get_use_edge_connections(p_map);
	public function map_set_edge_connection_margin(p_map:gd.RID, p_margin:Float):Void __navigationserver2d_ptr().value.map_set_edge_connection_margin(p_map, p_margin);
	public function map_get_edge_connection_margin(p_map:gd.RID):Float return __navigationserver2d_ptr().value.map_get_edge_connection_margin(p_map);
	public function map_set_link_connection_radius(p_map:gd.RID, p_radius:Float):Void __navigationserver2d_ptr().value.map_set_link_connection_radius(p_map, p_radius);
	public function map_get_link_connection_radius(p_map:gd.RID):Float return __navigationserver2d_ptr().value.map_get_link_connection_radius(p_map);
	public function map_get_path(p_map:gd.RID, p_origin:gd.Vector2, p_destination:gd.Vector2, p_optimize:Bool, ?p_navigation_layers:Int = 1):gd.PackedVector2Array return __navigationserver2d_ptr().value.map_get_path(p_map, p_origin, p_destination, p_optimize, p_navigation_layers);
	public function map_get_closest_point(p_map:gd.RID, p_to_point:gd.Vector2):gd.Vector2 return __navigationserver2d_ptr().value.map_get_closest_point(p_map, p_to_point);
	public function map_get_closest_point_owner(p_map:gd.RID, p_to_point:gd.Vector2):gd.RID return __navigationserver2d_ptr().value.map_get_closest_point_owner(p_map, p_to_point);
	public function map_force_update(p_map:gd.RID):Void __navigationserver2d_ptr().value.map_force_update(p_map);
	public function map_get_iteration_id(p_map:gd.RID):Int return __navigationserver2d_ptr().value.map_get_iteration_id(p_map);
	public function map_get_random_point(p_map:gd.RID, p_navigation_layers:Int, p_uniformly:Bool):gd.Vector2 return __navigationserver2d_ptr().value.map_get_random_point(p_map, p_navigation_layers, p_uniformly);
	public function query_path(p_parameters:gd.NavigationPathQueryParameters2D, p_result:gd.NavigationPathQueryResult2D):Void __navigationserver2d_ptr().value.query_path(p_parameters, p_result);
	public function region_create():gd.RID return __navigationserver2d_ptr().value.region_create();
	public function region_set_enabled(p_region:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.region_set_enabled(p_region, p_enabled);
	public function region_get_enabled(p_region:gd.RID):Bool return __navigationserver2d_ptr().value.region_get_enabled(p_region);
	public function region_set_use_edge_connections(p_region:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.region_set_use_edge_connections(p_region, p_enabled);
	public function region_get_use_edge_connections(p_region:gd.RID):Bool return __navigationserver2d_ptr().value.region_get_use_edge_connections(p_region);
	public function region_set_enter_cost(p_region:gd.RID, p_enter_cost:Float):Void __navigationserver2d_ptr().value.region_set_enter_cost(p_region, p_enter_cost);
	public function region_get_enter_cost(p_region:gd.RID):Float return __navigationserver2d_ptr().value.region_get_enter_cost(p_region);
	public function region_set_travel_cost(p_region:gd.RID, p_travel_cost:Float):Void __navigationserver2d_ptr().value.region_set_travel_cost(p_region, p_travel_cost);
	public function region_get_travel_cost(p_region:gd.RID):Float return __navigationserver2d_ptr().value.region_get_travel_cost(p_region);
	public function region_set_owner_id(p_region:gd.RID, p_owner_id:Int):Void __navigationserver2d_ptr().value.region_set_owner_id(p_region, p_owner_id);
	public function region_get_owner_id(p_region:gd.RID):Int return __navigationserver2d_ptr().value.region_get_owner_id(p_region);
	public function region_owns_point(p_region:gd.RID, p_point:gd.Vector2):Bool return __navigationserver2d_ptr().value.region_owns_point(p_region, p_point);
	public function region_set_map(p_region:gd.RID, p_map:gd.RID):Void __navigationserver2d_ptr().value.region_set_map(p_region, p_map);
	public function region_get_map(p_region:gd.RID):gd.RID return __navigationserver2d_ptr().value.region_get_map(p_region);
	public function region_set_navigation_layers(p_region:gd.RID, p_navigation_layers:Int):Void __navigationserver2d_ptr().value.region_set_navigation_layers(p_region, p_navigation_layers);
	public function region_get_navigation_layers(p_region:gd.RID):Int return __navigationserver2d_ptr().value.region_get_navigation_layers(p_region);
	public function region_set_navigation_polygon(p_region:gd.RID, p_navigation_polygon:gd.NavigationPolygon):Void __navigationserver2d_ptr().value.region_set_navigation_polygon(p_region, p_navigation_polygon);
	public function region_get_connections_count(p_region:gd.RID):Int return __navigationserver2d_ptr().value.region_get_connections_count(p_region);
	public function region_get_connection_pathway_start(p_region:gd.RID, p_connection:Int):gd.Vector2 return __navigationserver2d_ptr().value.region_get_connection_pathway_start(p_region, p_connection);
	public function region_get_connection_pathway_end(p_region:gd.RID, p_connection:Int):gd.Vector2 return __navigationserver2d_ptr().value.region_get_connection_pathway_end(p_region, p_connection);
	public function region_get_random_point(p_region:gd.RID, p_navigation_layers:Int, p_uniformly:Bool):gd.Vector2 return __navigationserver2d_ptr().value.region_get_random_point(p_region, p_navigation_layers, p_uniformly);
	public function link_create():gd.RID return __navigationserver2d_ptr().value.link_create();
	public function link_set_map(p_link:gd.RID, p_map:gd.RID):Void __navigationserver2d_ptr().value.link_set_map(p_link, p_map);
	public function link_get_map(p_link:gd.RID):gd.RID return __navigationserver2d_ptr().value.link_get_map(p_link);
	public function link_set_enabled(p_link:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.link_set_enabled(p_link, p_enabled);
	public function link_get_enabled(p_link:gd.RID):Bool return __navigationserver2d_ptr().value.link_get_enabled(p_link);
	public function link_set_bidirectional(p_link:gd.RID, p_bidirectional:Bool):Void __navigationserver2d_ptr().value.link_set_bidirectional(p_link, p_bidirectional);
	public function link_is_bidirectional(p_link:gd.RID):Bool return __navigationserver2d_ptr().value.link_is_bidirectional(p_link);
	public function link_set_navigation_layers(p_link:gd.RID, p_navigation_layers:Int):Void __navigationserver2d_ptr().value.link_set_navigation_layers(p_link, p_navigation_layers);
	public function link_get_navigation_layers(p_link:gd.RID):Int return __navigationserver2d_ptr().value.link_get_navigation_layers(p_link);
	public function link_set_start_position(p_link:gd.RID, p_position:gd.Vector2):Void __navigationserver2d_ptr().value.link_set_start_position(p_link, p_position);
	public function link_get_start_position(p_link:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.link_get_start_position(p_link);
	public function link_set_end_position(p_link:gd.RID, p_position:gd.Vector2):Void __navigationserver2d_ptr().value.link_set_end_position(p_link, p_position);
	public function link_get_end_position(p_link:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.link_get_end_position(p_link);
	public function link_set_enter_cost(p_link:gd.RID, p_enter_cost:Float):Void __navigationserver2d_ptr().value.link_set_enter_cost(p_link, p_enter_cost);
	public function link_get_enter_cost(p_link:gd.RID):Float return __navigationserver2d_ptr().value.link_get_enter_cost(p_link);
	public function link_set_travel_cost(p_link:gd.RID, p_travel_cost:Float):Void __navigationserver2d_ptr().value.link_set_travel_cost(p_link, p_travel_cost);
	public function link_get_travel_cost(p_link:gd.RID):Float return __navigationserver2d_ptr().value.link_get_travel_cost(p_link);
	public function link_set_owner_id(p_link:gd.RID, p_owner_id:Int):Void __navigationserver2d_ptr().value.link_set_owner_id(p_link, p_owner_id);
	public function link_get_owner_id(p_link:gd.RID):Int return __navigationserver2d_ptr().value.link_get_owner_id(p_link);
	public function agent_create():gd.RID return __navigationserver2d_ptr().value.agent_create();
	public function agent_set_avoidance_enabled(p_agent:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.agent_set_avoidance_enabled(p_agent, p_enabled);
	public function agent_get_avoidance_enabled(p_agent:gd.RID):Bool return __navigationserver2d_ptr().value.agent_get_avoidance_enabled(p_agent);
	public function agent_set_map(p_agent:gd.RID, p_map:gd.RID):Void __navigationserver2d_ptr().value.agent_set_map(p_agent, p_map);
	public function agent_get_map(p_agent:gd.RID):gd.RID return __navigationserver2d_ptr().value.agent_get_map(p_agent);
	public function agent_set_paused(p_agent:gd.RID, p_paused:Bool):Void __navigationserver2d_ptr().value.agent_set_paused(p_agent, p_paused);
	public function agent_get_paused(p_agent:gd.RID):Bool return __navigationserver2d_ptr().value.agent_get_paused(p_agent);
	public function agent_set_neighbor_distance(p_agent:gd.RID, p_distance:Float):Void __navigationserver2d_ptr().value.agent_set_neighbor_distance(p_agent, p_distance);
	public function agent_get_neighbor_distance(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_neighbor_distance(p_agent);
	public function agent_set_max_neighbors(p_agent:gd.RID, p_count:Int):Void __navigationserver2d_ptr().value.agent_set_max_neighbors(p_agent, p_count);
	public function agent_get_max_neighbors(p_agent:gd.RID):Int return __navigationserver2d_ptr().value.agent_get_max_neighbors(p_agent);
	public function agent_set_time_horizon_agents(p_agent:gd.RID, p_time_horizon:Float):Void __navigationserver2d_ptr().value.agent_set_time_horizon_agents(p_agent, p_time_horizon);
	public function agent_get_time_horizon_agents(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_time_horizon_agents(p_agent);
	public function agent_set_time_horizon_obstacles(p_agent:gd.RID, p_time_horizon:Float):Void __navigationserver2d_ptr().value.agent_set_time_horizon_obstacles(p_agent, p_time_horizon);
	public function agent_get_time_horizon_obstacles(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_time_horizon_obstacles(p_agent);
	public function agent_set_radius(p_agent:gd.RID, p_radius:Float):Void __navigationserver2d_ptr().value.agent_set_radius(p_agent, p_radius);
	public function agent_get_radius(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_radius(p_agent);
	public function agent_set_max_speed(p_agent:gd.RID, p_max_speed:Float):Void __navigationserver2d_ptr().value.agent_set_max_speed(p_agent, p_max_speed);
	public function agent_get_max_speed(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_max_speed(p_agent);
	public function agent_set_velocity_forced(p_agent:gd.RID, p_velocity:gd.Vector2):Void __navigationserver2d_ptr().value.agent_set_velocity_forced(p_agent, p_velocity);
	public function agent_set_velocity(p_agent:gd.RID, p_velocity:gd.Vector2):Void __navigationserver2d_ptr().value.agent_set_velocity(p_agent, p_velocity);
	public function agent_get_velocity(p_agent:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.agent_get_velocity(p_agent);
	public function agent_set_position(p_agent:gd.RID, p_position:gd.Vector2):Void __navigationserver2d_ptr().value.agent_set_position(p_agent, p_position);
	public function agent_get_position(p_agent:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.agent_get_position(p_agent);
	public function agent_is_map_changed(p_agent:gd.RID):Bool return __navigationserver2d_ptr().value.agent_is_map_changed(p_agent);
	public function agent_set_avoidance_callback(p_agent:gd.RID, p_callback:gd.Callable):Void __navigationserver2d_ptr().value.agent_set_avoidance_callback(p_agent, p_callback);
	public function agent_has_avoidance_callback(p_agent:gd.RID):Bool return __navigationserver2d_ptr().value.agent_has_avoidance_callback(p_agent);
	public function agent_set_avoidance_layers(p_agent:gd.RID, p_layers:Int):Void __navigationserver2d_ptr().value.agent_set_avoidance_layers(p_agent, p_layers);
	public function agent_get_avoidance_layers(p_agent:gd.RID):Int return __navigationserver2d_ptr().value.agent_get_avoidance_layers(p_agent);
	public function agent_set_avoidance_mask(p_agent:gd.RID, p_mask:Int):Void __navigationserver2d_ptr().value.agent_set_avoidance_mask(p_agent, p_mask);
	public function agent_get_avoidance_mask(p_agent:gd.RID):Int return __navigationserver2d_ptr().value.agent_get_avoidance_mask(p_agent);
	public function agent_set_avoidance_priority(p_agent:gd.RID, p_priority:Float):Void __navigationserver2d_ptr().value.agent_set_avoidance_priority(p_agent, p_priority);
	public function agent_get_avoidance_priority(p_agent:gd.RID):Float return __navigationserver2d_ptr().value.agent_get_avoidance_priority(p_agent);
	public function obstacle_create():gd.RID return __navigationserver2d_ptr().value.obstacle_create();
	public function obstacle_set_avoidance_enabled(p_obstacle:gd.RID, p_enabled:Bool):Void __navigationserver2d_ptr().value.obstacle_set_avoidance_enabled(p_obstacle, p_enabled);
	public function obstacle_get_avoidance_enabled(p_obstacle:gd.RID):Bool return __navigationserver2d_ptr().value.obstacle_get_avoidance_enabled(p_obstacle);
	public function obstacle_set_map(p_obstacle:gd.RID, p_map:gd.RID):Void __navigationserver2d_ptr().value.obstacle_set_map(p_obstacle, p_map);
	public function obstacle_get_map(p_obstacle:gd.RID):gd.RID return __navigationserver2d_ptr().value.obstacle_get_map(p_obstacle);
	public function obstacle_set_paused(p_obstacle:gd.RID, p_paused:Bool):Void __navigationserver2d_ptr().value.obstacle_set_paused(p_obstacle, p_paused);
	public function obstacle_get_paused(p_obstacle:gd.RID):Bool return __navigationserver2d_ptr().value.obstacle_get_paused(p_obstacle);
	public function obstacle_set_radius(p_obstacle:gd.RID, p_radius:Float):Void __navigationserver2d_ptr().value.obstacle_set_radius(p_obstacle, p_radius);
	public function obstacle_get_radius(p_obstacle:gd.RID):Float return __navigationserver2d_ptr().value.obstacle_get_radius(p_obstacle);
	public function obstacle_set_velocity(p_obstacle:gd.RID, p_velocity:gd.Vector2):Void __navigationserver2d_ptr().value.obstacle_set_velocity(p_obstacle, p_velocity);
	public function obstacle_get_velocity(p_obstacle:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.obstacle_get_velocity(p_obstacle);
	public function obstacle_set_position(p_obstacle:gd.RID, p_position:gd.Vector2):Void __navigationserver2d_ptr().value.obstacle_set_position(p_obstacle, p_position);
	public function obstacle_get_position(p_obstacle:gd.RID):gd.Vector2 return __navigationserver2d_ptr().value.obstacle_get_position(p_obstacle);
	public function obstacle_set_vertices(p_obstacle:gd.RID, p_vertices:gd.PackedVector2Array):Void __navigationserver2d_ptr().value.obstacle_set_vertices(p_obstacle, p_vertices);
	public function obstacle_get_vertices(p_obstacle:gd.RID):gd.PackedVector2Array return __navigationserver2d_ptr().value.obstacle_get_vertices(p_obstacle);
	public function obstacle_set_avoidance_layers(p_obstacle:gd.RID, p_layers:Int):Void __navigationserver2d_ptr().value.obstacle_set_avoidance_layers(p_obstacle, p_layers);
	public function obstacle_get_avoidance_layers(p_obstacle:gd.RID):Int return __navigationserver2d_ptr().value.obstacle_get_avoidance_layers(p_obstacle);
	public function is_baking_navigation_polygon(p_navigation_polygon:gd.NavigationPolygon):Bool return __navigationserver2d_ptr().value.is_baking_navigation_polygon(p_navigation_polygon);
	public function source_geometry_parser_create():gd.RID return __navigationserver2d_ptr().value.source_geometry_parser_create();
	public function source_geometry_parser_set_callback(p_parser:gd.RID, p_callback:gd.Callable):Void __navigationserver2d_ptr().value.source_geometry_parser_set_callback(p_parser, p_callback);
	public function simplify_path(p_path:gd.PackedVector2Array, p_epsilon:Float):gd.PackedVector2Array return __navigationserver2d_ptr().value.simplify_path(p_path, p_epsilon);
	public function free_rid(p_rid:gd.RID):Void __navigationserver2d_ptr().value.free_rid(p_rid);
	public function set_debug_enabled(p_enabled:Bool):Void __navigationserver2d_ptr().value.set_debug_enabled(p_enabled);
	public function get_debug_enabled():Bool return __navigationserver2d_ptr().value.get_debug_enabled();
}