package gd;
class PhysicsServer3D extends gd.Object {
	public function new(?native:cpp.Pointer<gdnative.PhysicsServer3D.PhysicsServer3D_extern>) {
		if (native == null) {
			gd.Utils.checkAndWarnForMissingOwner(this, "PhysicsServer3D");
			trace("Allocating PhysicsServer3D");
			native = gdnative.PhysicsServer3D.PhysicsServer3D_extern.__alloc();
		};
		super(native.reinterpret());
	}
	static public final singleton : gd.PhysicsServer3D = new PhysicsServer3D(gdnative.PhysicsServer3D.PhysicsServer3D_extern.get_singleton());
	extern inline function __physicsserver3d_ptr():cpp.Pointer<gdnative.PhysicsServer3D.PhysicsServer3D_extern> return cast __gd.ptr;
	public function world_boundary_shape_create():gd.RID return __physicsserver3d_ptr().value.world_boundary_shape_create();
	public function separation_ray_shape_create():gd.RID return __physicsserver3d_ptr().value.separation_ray_shape_create();
	public function sphere_shape_create():gd.RID return __physicsserver3d_ptr().value.sphere_shape_create();
	public function box_shape_create():gd.RID return __physicsserver3d_ptr().value.box_shape_create();
	public function capsule_shape_create():gd.RID return __physicsserver3d_ptr().value.capsule_shape_create();
	public function cylinder_shape_create():gd.RID return __physicsserver3d_ptr().value.cylinder_shape_create();
	public function convex_polygon_shape_create():gd.RID return __physicsserver3d_ptr().value.convex_polygon_shape_create();
	public function concave_polygon_shape_create():gd.RID return __physicsserver3d_ptr().value.concave_polygon_shape_create();
	public function heightmap_shape_create():gd.RID return __physicsserver3d_ptr().value.heightmap_shape_create();
	public function custom_shape_create():gd.RID return __physicsserver3d_ptr().value.custom_shape_create();
	public function shape_set_data(p_shape:gd.RID, p_data:gd.Variant):Void __physicsserver3d_ptr().value.shape_set_data(p_shape, p_data);
	public function shape_set_margin(p_shape:gd.RID, p_margin:Float):Void __physicsserver3d_ptr().value.shape_set_margin(p_shape, p_margin);
	public function shape_get_type(p_shape:gd.RID):gd.physicsserver3d.ShapeType return __physicsserver3d_ptr().value.shape_get_type(p_shape);
	public function shape_get_data(p_shape:gd.RID):gd.Variant return __physicsserver3d_ptr().value.shape_get_data(p_shape);
	public function shape_get_margin(p_shape:gd.RID):Float return __physicsserver3d_ptr().value.shape_get_margin(p_shape);
	public function space_create():gd.RID return __physicsserver3d_ptr().value.space_create();
	public function space_set_active(p_space:gd.RID, p_active:Bool):Void __physicsserver3d_ptr().value.space_set_active(p_space, p_active);
	public function space_is_active(p_space:gd.RID):Bool return __physicsserver3d_ptr().value.space_is_active(p_space);
	public function space_set_param(p_space:gd.RID, p_param:gd.physicsserver3d.SpaceParameter, p_value:Float):Void __physicsserver3d_ptr().value.space_set_param(p_space, p_param, p_value);
	public function space_get_param(p_space:gd.RID, p_param:gd.physicsserver3d.SpaceParameter):Float return __physicsserver3d_ptr().value.space_get_param(p_space, p_param);
	public function space_get_direct_state(p_space:gd.RID):gd.PhysicsDirectSpaceState3D return __physicsserver3d_ptr().value.space_get_direct_state(p_space);
	public function area_create():gd.RID return __physicsserver3d_ptr().value.area_create();
	public function area_set_space(p_area:gd.RID, p_space:gd.RID):Void __physicsserver3d_ptr().value.area_set_space(p_area, p_space);
	public function area_get_space(p_area:gd.RID):gd.RID return __physicsserver3d_ptr().value.area_get_space(p_area);
	public function area_set_shape(p_area:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver3d_ptr().value.area_set_shape(p_area, p_shape_idx, p_shape);
	public function area_set_shape_disabled(p_area:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver3d_ptr().value.area_set_shape_disabled(p_area, p_shape_idx, p_disabled);
	public function area_get_shape_count(p_area:gd.RID):Int return __physicsserver3d_ptr().value.area_get_shape_count(p_area);
	public function area_get_shape(p_area:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver3d_ptr().value.area_get_shape(p_area, p_shape_idx);
	public function area_remove_shape(p_area:gd.RID, p_shape_idx:Int):Void __physicsserver3d_ptr().value.area_remove_shape(p_area, p_shape_idx);
	public function area_clear_shapes(p_area:gd.RID):Void __physicsserver3d_ptr().value.area_clear_shapes(p_area);
	public function area_set_collision_layer(p_area:gd.RID, p_layer:Int):Void __physicsserver3d_ptr().value.area_set_collision_layer(p_area, p_layer);
	public function area_get_collision_layer(p_area:gd.RID):Int return __physicsserver3d_ptr().value.area_get_collision_layer(p_area);
	public function area_set_collision_mask(p_area:gd.RID, p_mask:Int):Void __physicsserver3d_ptr().value.area_set_collision_mask(p_area, p_mask);
	public function area_get_collision_mask(p_area:gd.RID):Int return __physicsserver3d_ptr().value.area_get_collision_mask(p_area);
	public function area_set_param(p_area:gd.RID, p_param:gd.physicsserver3d.AreaParameter, p_value:gd.Variant):Void __physicsserver3d_ptr().value.area_set_param(p_area, p_param, p_value);
	public function area_get_param(p_area:gd.RID, p_param:gd.physicsserver3d.AreaParameter):gd.Variant return __physicsserver3d_ptr().value.area_get_param(p_area, p_param);
	public function area_attach_object_instance_id(p_area:gd.RID, p_id:Int):Void __physicsserver3d_ptr().value.area_attach_object_instance_id(p_area, p_id);
	public function area_get_object_instance_id(p_area:gd.RID):Int return __physicsserver3d_ptr().value.area_get_object_instance_id(p_area);
	public function area_set_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver3d_ptr().value.area_set_monitor_callback(p_area, p_callback);
	public function area_set_area_monitor_callback(p_area:gd.RID, p_callback:gd.Callable):Void __physicsserver3d_ptr().value.area_set_area_monitor_callback(p_area, p_callback);
	public function area_set_monitorable(p_area:gd.RID, p_monitorable:Bool):Void __physicsserver3d_ptr().value.area_set_monitorable(p_area, p_monitorable);
	public function area_set_ray_pickable(p_area:gd.RID, p_enable:Bool):Void __physicsserver3d_ptr().value.area_set_ray_pickable(p_area, p_enable);
	public function body_create():gd.RID return __physicsserver3d_ptr().value.body_create();
	public function body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver3d_ptr().value.body_set_space(p_body, p_space);
	public function body_get_space(p_body:gd.RID):gd.RID return __physicsserver3d_ptr().value.body_get_space(p_body);
	public function body_set_mode(p_body:gd.RID, p_mode:gd.physicsserver3d.BodyMode):Void __physicsserver3d_ptr().value.body_set_mode(p_body, p_mode);
	public function body_get_mode(p_body:gd.RID):gd.physicsserver3d.BodyMode return __physicsserver3d_ptr().value.body_get_mode(p_body);
	public function body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver3d_ptr().value.body_set_collision_layer(p_body, p_layer);
	public function body_get_collision_layer(p_body:gd.RID):Int return __physicsserver3d_ptr().value.body_get_collision_layer(p_body);
	public function body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver3d_ptr().value.body_set_collision_mask(p_body, p_mask);
	public function body_get_collision_mask(p_body:gd.RID):Int return __physicsserver3d_ptr().value.body_get_collision_mask(p_body);
	public function body_set_collision_priority(p_body:gd.RID, p_priority:Float):Void __physicsserver3d_ptr().value.body_set_collision_priority(p_body, p_priority);
	public function body_get_collision_priority(p_body:gd.RID):Float return __physicsserver3d_ptr().value.body_get_collision_priority(p_body);
	public function body_set_shape(p_body:gd.RID, p_shape_idx:Int, p_shape:gd.RID):Void __physicsserver3d_ptr().value.body_set_shape(p_body, p_shape_idx, p_shape);
	public function body_set_shape_disabled(p_body:gd.RID, p_shape_idx:Int, p_disabled:Bool):Void __physicsserver3d_ptr().value.body_set_shape_disabled(p_body, p_shape_idx, p_disabled);
	public function body_get_shape_count(p_body:gd.RID):Int return __physicsserver3d_ptr().value.body_get_shape_count(p_body);
	public function body_get_shape(p_body:gd.RID, p_shape_idx:Int):gd.RID return __physicsserver3d_ptr().value.body_get_shape(p_body, p_shape_idx);
	public function body_remove_shape(p_body:gd.RID, p_shape_idx:Int):Void __physicsserver3d_ptr().value.body_remove_shape(p_body, p_shape_idx);
	public function body_clear_shapes(p_body:gd.RID):Void __physicsserver3d_ptr().value.body_clear_shapes(p_body);
	public function body_attach_object_instance_id(p_body:gd.RID, p_id:Int):Void __physicsserver3d_ptr().value.body_attach_object_instance_id(p_body, p_id);
	public function body_get_object_instance_id(p_body:gd.RID):Int return __physicsserver3d_ptr().value.body_get_object_instance_id(p_body);
	public function body_set_enable_continuous_collision_detection(p_body:gd.RID, p_enable:Bool):Void __physicsserver3d_ptr().value.body_set_enable_continuous_collision_detection(p_body, p_enable);
	public function body_is_continuous_collision_detection_enabled(p_body:gd.RID):Bool return __physicsserver3d_ptr().value.body_is_continuous_collision_detection_enabled(p_body);
	public function body_set_param(p_body:gd.RID, p_param:gd.physicsserver3d.BodyParameter, p_value:gd.Variant):Void __physicsserver3d_ptr().value.body_set_param(p_body, p_param, p_value);
	public function body_get_param(p_body:gd.RID, p_param:gd.physicsserver3d.BodyParameter):gd.Variant return __physicsserver3d_ptr().value.body_get_param(p_body, p_param);
	public function body_reset_mass_properties(p_body:gd.RID):Void __physicsserver3d_ptr().value.body_reset_mass_properties(p_body);
	public function body_set_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState, p_value:gd.Variant):Void __physicsserver3d_ptr().value.body_set_state(p_body, p_state, p_value);
	public function body_get_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState):gd.Variant return __physicsserver3d_ptr().value.body_get_state(p_body, p_state);
	public function body_apply_central_impulse(p_body:gd.RID, p_impulse:gd.Vector3):Void __physicsserver3d_ptr().value.body_apply_central_impulse(p_body, p_impulse);
	public function body_apply_torque_impulse(p_body:gd.RID, p_impulse:gd.Vector3):Void __physicsserver3d_ptr().value.body_apply_torque_impulse(p_body, p_impulse);
	public function body_apply_central_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3d_ptr().value.body_apply_central_force(p_body, p_force);
	public function body_apply_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3d_ptr().value.body_apply_torque(p_body, p_torque);
	public function body_add_constant_central_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3d_ptr().value.body_add_constant_central_force(p_body, p_force);
	public function body_add_constant_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3d_ptr().value.body_add_constant_torque(p_body, p_torque);
	public function body_set_constant_force(p_body:gd.RID, p_force:gd.Vector3):Void __physicsserver3d_ptr().value.body_set_constant_force(p_body, p_force);
	public function body_get_constant_force(p_body:gd.RID):gd.Vector3 return __physicsserver3d_ptr().value.body_get_constant_force(p_body);
	public function body_set_constant_torque(p_body:gd.RID, p_torque:gd.Vector3):Void __physicsserver3d_ptr().value.body_set_constant_torque(p_body, p_torque);
	public function body_get_constant_torque(p_body:gd.RID):gd.Vector3 return __physicsserver3d_ptr().value.body_get_constant_torque(p_body);
	public function body_set_axis_velocity(p_body:gd.RID, p_axis_velocity:gd.Vector3):Void __physicsserver3d_ptr().value.body_set_axis_velocity(p_body, p_axis_velocity);
	public function body_set_axis_lock(p_body:gd.RID, p_axis:gd.physicsserver3d.BodyAxis, p_lock:Bool):Void __physicsserver3d_ptr().value.body_set_axis_lock(p_body, p_axis, p_lock);
	public function body_is_axis_locked(p_body:gd.RID, p_axis:gd.physicsserver3d.BodyAxis):Bool return __physicsserver3d_ptr().value.body_is_axis_locked(p_body, p_axis);
	public function body_add_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver3d_ptr().value.body_add_collision_exception(p_body, p_excepted_body);
	public function body_remove_collision_exception(p_body:gd.RID, p_excepted_body:gd.RID):Void __physicsserver3d_ptr().value.body_remove_collision_exception(p_body, p_excepted_body);
	public function body_set_max_contacts_reported(p_body:gd.RID, p_amount:Int):Void __physicsserver3d_ptr().value.body_set_max_contacts_reported(p_body, p_amount);
	public function body_get_max_contacts_reported(p_body:gd.RID):Int return __physicsserver3d_ptr().value.body_get_max_contacts_reported(p_body);
	public function body_set_omit_force_integration(p_body:gd.RID, p_enable:Bool):Void __physicsserver3d_ptr().value.body_set_omit_force_integration(p_body, p_enable);
	public function body_is_omitting_force_integration(p_body:gd.RID):Bool return __physicsserver3d_ptr().value.body_is_omitting_force_integration(p_body);
	public function body_set_state_sync_callback(p_body:gd.RID, p_callable:gd.Callable):Void __physicsserver3d_ptr().value.body_set_state_sync_callback(p_body, p_callable);
	public function body_set_ray_pickable(p_body:gd.RID, p_enable:Bool):Void __physicsserver3d_ptr().value.body_set_ray_pickable(p_body, p_enable);
	public function body_get_direct_state(p_body:gd.RID):gd.PhysicsDirectBodyState3D return __physicsserver3d_ptr().value.body_get_direct_state(p_body);
	public function soft_body_create():gd.RID return __physicsserver3d_ptr().value.soft_body_create();
	public function soft_body_update_rendering_server(p_body:gd.RID, p_rendering_server_handler:gd.PhysicsServer3DRenderingServerHandler):Void __physicsserver3d_ptr().value.soft_body_update_rendering_server(p_body, p_rendering_server_handler);
	public function soft_body_set_space(p_body:gd.RID, p_space:gd.RID):Void __physicsserver3d_ptr().value.soft_body_set_space(p_body, p_space);
	public function soft_body_get_space(p_body:gd.RID):gd.RID return __physicsserver3d_ptr().value.soft_body_get_space(p_body);
	public function soft_body_set_mesh(p_body:gd.RID, p_mesh:gd.RID):Void __physicsserver3d_ptr().value.soft_body_set_mesh(p_body, p_mesh);
	public function soft_body_get_bounds(p_body:gd.RID):gd.AABB return __physicsserver3d_ptr().value.soft_body_get_bounds(p_body);
	public function soft_body_set_collision_layer(p_body:gd.RID, p_layer:Int):Void __physicsserver3d_ptr().value.soft_body_set_collision_layer(p_body, p_layer);
	public function soft_body_get_collision_layer(p_body:gd.RID):Int return __physicsserver3d_ptr().value.soft_body_get_collision_layer(p_body);
	public function soft_body_set_collision_mask(p_body:gd.RID, p_mask:Int):Void __physicsserver3d_ptr().value.soft_body_set_collision_mask(p_body, p_mask);
	public function soft_body_get_collision_mask(p_body:gd.RID):Int return __physicsserver3d_ptr().value.soft_body_get_collision_mask(p_body);
	public function soft_body_add_collision_exception(p_body:gd.RID, p_body_b:gd.RID):Void __physicsserver3d_ptr().value.soft_body_add_collision_exception(p_body, p_body_b);
	public function soft_body_remove_collision_exception(p_body:gd.RID, p_body_b:gd.RID):Void __physicsserver3d_ptr().value.soft_body_remove_collision_exception(p_body, p_body_b);
	public function soft_body_set_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState, p_variant:gd.Variant):Void __physicsserver3d_ptr().value.soft_body_set_state(p_body, p_state, p_variant);
	public function soft_body_get_state(p_body:gd.RID, p_state:gd.physicsserver3d.BodyState):gd.Variant return __physicsserver3d_ptr().value.soft_body_get_state(p_body, p_state);
	public function soft_body_set_ray_pickable(p_body:gd.RID, p_enable:Bool):Void __physicsserver3d_ptr().value.soft_body_set_ray_pickable(p_body, p_enable);
	public function soft_body_set_simulation_precision(p_body:gd.RID, p_simulation_precision:Int):Void __physicsserver3d_ptr().value.soft_body_set_simulation_precision(p_body, p_simulation_precision);
	public function soft_body_get_simulation_precision(p_body:gd.RID):Int return __physicsserver3d_ptr().value.soft_body_get_simulation_precision(p_body);
	public function soft_body_set_total_mass(p_body:gd.RID, p_total_mass:Float):Void __physicsserver3d_ptr().value.soft_body_set_total_mass(p_body, p_total_mass);
	public function soft_body_get_total_mass(p_body:gd.RID):Float return __physicsserver3d_ptr().value.soft_body_get_total_mass(p_body);
	public function soft_body_set_linear_stiffness(p_body:gd.RID, p_stiffness:Float):Void __physicsserver3d_ptr().value.soft_body_set_linear_stiffness(p_body, p_stiffness);
	public function soft_body_get_linear_stiffness(p_body:gd.RID):Float return __physicsserver3d_ptr().value.soft_body_get_linear_stiffness(p_body);
	public function soft_body_set_pressure_coefficient(p_body:gd.RID, p_pressure_coefficient:Float):Void __physicsserver3d_ptr().value.soft_body_set_pressure_coefficient(p_body, p_pressure_coefficient);
	public function soft_body_get_pressure_coefficient(p_body:gd.RID):Float return __physicsserver3d_ptr().value.soft_body_get_pressure_coefficient(p_body);
	public function soft_body_set_damping_coefficient(p_body:gd.RID, p_damping_coefficient:Float):Void __physicsserver3d_ptr().value.soft_body_set_damping_coefficient(p_body, p_damping_coefficient);
	public function soft_body_get_damping_coefficient(p_body:gd.RID):Float return __physicsserver3d_ptr().value.soft_body_get_damping_coefficient(p_body);
	public function soft_body_set_drag_coefficient(p_body:gd.RID, p_drag_coefficient:Float):Void __physicsserver3d_ptr().value.soft_body_set_drag_coefficient(p_body, p_drag_coefficient);
	public function soft_body_get_drag_coefficient(p_body:gd.RID):Float return __physicsserver3d_ptr().value.soft_body_get_drag_coefficient(p_body);
	public function soft_body_move_point(p_body:gd.RID, p_point_index:Int, p_global_position:gd.Vector3):Void __physicsserver3d_ptr().value.soft_body_move_point(p_body, p_point_index, p_global_position);
	public function soft_body_get_point_global_position(p_body:gd.RID, p_point_index:Int):gd.Vector3 return __physicsserver3d_ptr().value.soft_body_get_point_global_position(p_body, p_point_index);
	public function soft_body_remove_all_pinned_points(p_body:gd.RID):Void __physicsserver3d_ptr().value.soft_body_remove_all_pinned_points(p_body);
	public function soft_body_pin_point(p_body:gd.RID, p_point_index:Int, p_pin:Bool):Void __physicsserver3d_ptr().value.soft_body_pin_point(p_body, p_point_index, p_pin);
	public function soft_body_is_point_pinned(p_body:gd.RID, p_point_index:Int):Bool return __physicsserver3d_ptr().value.soft_body_is_point_pinned(p_body, p_point_index);
	public function joint_create():gd.RID return __physicsserver3d_ptr().value.joint_create();
	public function joint_clear(p_joint:gd.RID):Void __physicsserver3d_ptr().value.joint_clear(p_joint);
	public function joint_make_pin(p_joint:gd.RID, p_body_A:gd.RID, p_local_A:gd.Vector3, p_body_B:gd.RID, p_local_B:gd.Vector3):Void __physicsserver3d_ptr().value.joint_make_pin(p_joint, p_body_A, p_local_A, p_body_B, p_local_B);
	public function pin_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.PinJointParam, p_value:Float):Void __physicsserver3d_ptr().value.pin_joint_set_param(p_joint, p_param, p_value);
	public function pin_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.PinJointParam):Float return __physicsserver3d_ptr().value.pin_joint_get_param(p_joint, p_param);
	public function pin_joint_set_local_a(p_joint:gd.RID, p_local_A:gd.Vector3):Void __physicsserver3d_ptr().value.pin_joint_set_local_a(p_joint, p_local_A);
	public function pin_joint_get_local_a(p_joint:gd.RID):gd.Vector3 return __physicsserver3d_ptr().value.pin_joint_get_local_a(p_joint);
	public function pin_joint_set_local_b(p_joint:gd.RID, p_local_B:gd.Vector3):Void __physicsserver3d_ptr().value.pin_joint_set_local_b(p_joint, p_local_B);
	public function pin_joint_get_local_b(p_joint:gd.RID):gd.Vector3 return __physicsserver3d_ptr().value.pin_joint_get_local_b(p_joint);
	public function hinge_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.HingeJointParam, p_value:Float):Void __physicsserver3d_ptr().value.hinge_joint_set_param(p_joint, p_param, p_value);
	public function hinge_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.HingeJointParam):Float return __physicsserver3d_ptr().value.hinge_joint_get_param(p_joint, p_param);
	public function hinge_joint_set_flag(p_joint:gd.RID, p_flag:gd.physicsserver3d.HingeJointFlag, p_enabled:Bool):Void __physicsserver3d_ptr().value.hinge_joint_set_flag(p_joint, p_flag, p_enabled);
	public function hinge_joint_get_flag(p_joint:gd.RID, p_flag:gd.physicsserver3d.HingeJointFlag):Bool return __physicsserver3d_ptr().value.hinge_joint_get_flag(p_joint, p_flag);
	public function slider_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.SliderJointParam, p_value:Float):Void __physicsserver3d_ptr().value.slider_joint_set_param(p_joint, p_param, p_value);
	public function slider_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.SliderJointParam):Float return __physicsserver3d_ptr().value.slider_joint_get_param(p_joint, p_param);
	public function cone_twist_joint_set_param(p_joint:gd.RID, p_param:gd.physicsserver3d.ConeTwistJointParam, p_value:Float):Void __physicsserver3d_ptr().value.cone_twist_joint_set_param(p_joint, p_param, p_value);
	public function cone_twist_joint_get_param(p_joint:gd.RID, p_param:gd.physicsserver3d.ConeTwistJointParam):Float return __physicsserver3d_ptr().value.cone_twist_joint_get_param(p_joint, p_param);
	public function joint_get_type(p_joint:gd.RID):gd.physicsserver3d.JointType return __physicsserver3d_ptr().value.joint_get_type(p_joint);
	public function joint_set_solver_priority(p_joint:gd.RID, p_priority:Int):Void __physicsserver3d_ptr().value.joint_set_solver_priority(p_joint, p_priority);
	public function joint_get_solver_priority(p_joint:gd.RID):Int return __physicsserver3d_ptr().value.joint_get_solver_priority(p_joint);
	public function joint_disable_collisions_between_bodies(p_joint:gd.RID, p_disable:Bool):Void __physicsserver3d_ptr().value.joint_disable_collisions_between_bodies(p_joint, p_disable);
	public function joint_is_disabled_collisions_between_bodies(p_joint:gd.RID):Bool return __physicsserver3d_ptr().value.joint_is_disabled_collisions_between_bodies(p_joint);
	public function generic_6dof_joint_set_param(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_param:gd.physicsserver3d.G6DOFJointAxisParam, p_value:Float):Void __physicsserver3d_ptr().value.generic_6dof_joint_set_param(p_joint, p_axis, p_param, p_value);
	public function generic_6dof_joint_get_param(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_param:gd.physicsserver3d.G6DOFJointAxisParam):Float return __physicsserver3d_ptr().value.generic_6dof_joint_get_param(p_joint, p_axis, p_param);
	public function generic_6dof_joint_set_flag(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_flag:gd.physicsserver3d.G6DOFJointAxisFlag, p_enable:Bool):Void __physicsserver3d_ptr().value.generic_6dof_joint_set_flag(p_joint, p_axis, p_flag, p_enable);
	public function generic_6dof_joint_get_flag(p_joint:gd.RID, p_axis:gd.vector3.Axis, p_flag:gd.physicsserver3d.G6DOFJointAxisFlag):Bool return __physicsserver3d_ptr().value.generic_6dof_joint_get_flag(p_joint, p_axis, p_flag);
	public function free_rid(p_rid:gd.RID):Void __physicsserver3d_ptr().value.free_rid(p_rid);
	public function set_active(p_active:Bool):Void __physicsserver3d_ptr().value.set_active(p_active);
	public function get_process_info(p_process_info:gd.physicsserver3d.ProcessInfo):Int return __physicsserver3d_ptr().value.get_process_info(p_process_info);
}