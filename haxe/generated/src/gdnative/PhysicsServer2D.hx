package gdnative;
@:include("godot_cpp/classes/physics_server2d.hpp") @:native("godot::PhysicsServer2D") @:structAccess extern class PhysicsServer2D_extern extends gdnative.Object.Object_extern {
	extern static inline function __alloc():cpp.Pointer<PhysicsServer2D_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::PhysicsServer2D"));
	static function get_singleton():cpp.Pointer<PhysicsServer2D_extern>;
	function world_boundary_shape_create():gdnative.RID;
	function separation_ray_shape_create():gdnative.RID;
	function segment_shape_create():gdnative.RID;
	function circle_shape_create():gdnative.RID;
	function rectangle_shape_create():gdnative.RID;
	function capsule_shape_create():gdnative.RID;
	function convex_polygon_shape_create():gdnative.RID;
	function concave_polygon_shape_create():gdnative.RID;
	function shape_set_data(p_shape:gdnative.RID, p_data:gdnative.Variant):Void;
	function shape_get_type(p_shape:gdnative.RID):gdnative.physicsserver2d.ShapeType;
	function shape_get_data(p_shape:gdnative.RID):gdnative.Variant;
	function space_create():gdnative.RID;
	function space_set_active(p_space:gdnative.RID, p_active:Bool):Void;
	function space_is_active(p_space:gdnative.RID):Bool;
	function space_set_param(p_space:gdnative.RID, p_param:gdnative.physicsserver2d.SpaceParameter, p_value:Float):Void;
	function space_get_param(p_space:gdnative.RID, p_param:gdnative.physicsserver2d.SpaceParameter):Float;
	function space_get_direct_state(p_space:gdnative.RID):gdnative.PhysicsDirectSpaceState2D;
	function area_create():gdnative.RID;
	function area_set_space(p_area:gdnative.RID, p_space:gdnative.RID):Void;
	function area_get_space(p_area:gdnative.RID):gdnative.RID;
	function area_set_shape(p_area:gdnative.RID, p_shape_idx:Int, p_shape:gdnative.RID):Void;
	function area_set_shape_disabled(p_area:gdnative.RID, p_shape_idx:Int, p_disabled:Bool):Void;
	function area_get_shape_count(p_area:gdnative.RID):Int;
	function area_get_shape(p_area:gdnative.RID, p_shape_idx:Int):gdnative.RID;
	function area_remove_shape(p_area:gdnative.RID, p_shape_idx:Int):Void;
	function area_clear_shapes(p_area:gdnative.RID):Void;
	function area_set_collision_layer(p_area:gdnative.RID, p_layer:Int):Void;
	function area_get_collision_layer(p_area:gdnative.RID):Int;
	function area_set_collision_mask(p_area:gdnative.RID, p_mask:Int):Void;
	function area_get_collision_mask(p_area:gdnative.RID):Int;
	function area_set_param(p_area:gdnative.RID, p_param:gdnative.physicsserver2d.AreaParameter, p_value:gdnative.Variant):Void;
	function area_get_param(p_area:gdnative.RID, p_param:gdnative.physicsserver2d.AreaParameter):gdnative.Variant;
	function area_attach_object_instance_id(p_area:gdnative.RID, p_id:Int):Void;
	function area_get_object_instance_id(p_area:gdnative.RID):Int;
	function area_attach_canvas_instance_id(p_area:gdnative.RID, p_id:Int):Void;
	function area_get_canvas_instance_id(p_area:gdnative.RID):Int;
	function area_set_monitor_callback(p_area:gdnative.RID, p_callback:gdnative.Callable):Void;
	function area_set_area_monitor_callback(p_area:gdnative.RID, p_callback:gdnative.Callable):Void;
	function area_set_monitorable(p_area:gdnative.RID, p_monitorable:Bool):Void;
	function body_create():gdnative.RID;
	function body_set_space(p_body:gdnative.RID, p_space:gdnative.RID):Void;
	function body_get_space(p_body:gdnative.RID):gdnative.RID;
	function body_set_mode(p_body:gdnative.RID, p_mode:gdnative.physicsserver2d.BodyMode):Void;
	function body_get_mode(p_body:gdnative.RID):gdnative.physicsserver2d.BodyMode;
	function body_set_shape(p_body:gdnative.RID, p_shape_idx:Int, p_shape:gdnative.RID):Void;
	function body_get_shape_count(p_body:gdnative.RID):Int;
	function body_get_shape(p_body:gdnative.RID, p_shape_idx:Int):gdnative.RID;
	function body_remove_shape(p_body:gdnative.RID, p_shape_idx:Int):Void;
	function body_clear_shapes(p_body:gdnative.RID):Void;
	function body_set_shape_disabled(p_body:gdnative.RID, p_shape_idx:Int, p_disabled:Bool):Void;
	function body_set_shape_as_one_way_collision(p_body:gdnative.RID, p_shape_idx:Int, p_enable:Bool, p_margin:Float):Void;
	function body_attach_object_instance_id(p_body:gdnative.RID, p_id:Int):Void;
	function body_get_object_instance_id(p_body:gdnative.RID):Int;
	function body_attach_canvas_instance_id(p_body:gdnative.RID, p_id:Int):Void;
	function body_get_canvas_instance_id(p_body:gdnative.RID):Int;
	function body_set_continuous_collision_detection_mode(p_body:gdnative.RID, p_mode:gdnative.physicsserver2d.CCDMode):Void;
	function body_get_continuous_collision_detection_mode(p_body:gdnative.RID):gdnative.physicsserver2d.CCDMode;
	function body_set_collision_layer(p_body:gdnative.RID, p_layer:Int):Void;
	function body_get_collision_layer(p_body:gdnative.RID):Int;
	function body_set_collision_mask(p_body:gdnative.RID, p_mask:Int):Void;
	function body_get_collision_mask(p_body:gdnative.RID):Int;
	function body_set_collision_priority(p_body:gdnative.RID, p_priority:Float):Void;
	function body_get_collision_priority(p_body:gdnative.RID):Float;
	function body_set_param(p_body:gdnative.RID, p_param:gdnative.physicsserver2d.BodyParameter, p_value:gdnative.Variant):Void;
	function body_get_param(p_body:gdnative.RID, p_param:gdnative.physicsserver2d.BodyParameter):gdnative.Variant;
	function body_reset_mass_properties(p_body:gdnative.RID):Void;
	function body_set_state(p_body:gdnative.RID, p_state:gdnative.physicsserver2d.BodyState, p_value:gdnative.Variant):Void;
	function body_get_state(p_body:gdnative.RID, p_state:gdnative.physicsserver2d.BodyState):gdnative.Variant;
	function body_apply_central_impulse(p_body:gdnative.RID, p_impulse:gdnative.Vector2):Void;
	function body_apply_torque_impulse(p_body:gdnative.RID, p_impulse:Float):Void;
	overload function body_apply_impulse(p_body:gdnative.RID, p_impulse:gdnative.Vector2, p_position:gdnative.Vector2):Void;
	overload function body_apply_impulse(p_body:gdnative.RID, p_impulse:gdnative.Vector2):Void;
	function body_apply_central_force(p_body:gdnative.RID, p_force:gdnative.Vector2):Void;
	overload function body_apply_force(p_body:gdnative.RID, p_force:gdnative.Vector2, p_position:gdnative.Vector2):Void;
	overload function body_apply_force(p_body:gdnative.RID, p_force:gdnative.Vector2):Void;
	function body_apply_torque(p_body:gdnative.RID, p_torque:Float):Void;
	function body_add_constant_central_force(p_body:gdnative.RID, p_force:gdnative.Vector2):Void;
	overload function body_add_constant_force(p_body:gdnative.RID, p_force:gdnative.Vector2, p_position:gdnative.Vector2):Void;
	overload function body_add_constant_force(p_body:gdnative.RID, p_force:gdnative.Vector2):Void;
	function body_add_constant_torque(p_body:gdnative.RID, p_torque:Float):Void;
	function body_set_constant_force(p_body:gdnative.RID, p_force:gdnative.Vector2):Void;
	function body_get_constant_force(p_body:gdnative.RID):gdnative.Vector2;
	function body_set_constant_torque(p_body:gdnative.RID, p_torque:Float):Void;
	function body_get_constant_torque(p_body:gdnative.RID):Float;
	function body_set_axis_velocity(p_body:gdnative.RID, p_axis_velocity:gdnative.Vector2):Void;
	function body_add_collision_exception(p_body:gdnative.RID, p_excepted_body:gdnative.RID):Void;
	function body_remove_collision_exception(p_body:gdnative.RID, p_excepted_body:gdnative.RID):Void;
	function body_set_max_contacts_reported(p_body:gdnative.RID, p_amount:Int):Void;
	function body_get_max_contacts_reported(p_body:gdnative.RID):Int;
	function body_set_omit_force_integration(p_body:gdnative.RID, p_enable:Bool):Void;
	function body_is_omitting_force_integration(p_body:gdnative.RID):Bool;
	function body_set_state_sync_callback(p_body:gdnative.RID, p_callable:gdnative.Callable):Void;
	overload function body_set_force_integration_callback(p_body:gdnative.RID, p_callable:gdnative.Callable, p_userdata:gdnative.Variant):Void;
	overload function body_set_force_integration_callback(p_body:gdnative.RID, p_callable:gdnative.Callable):Void;
	overload function body_test_motion(p_body:gdnative.RID, p_parameters:gdnative.PhysicsTestMotionParameters2D, p_result:gdnative.PhysicsTestMotionResult2D):Bool;
	overload function body_test_motion(p_body:gdnative.RID, p_parameters:gdnative.PhysicsTestMotionParameters2D):Bool;
	function body_get_direct_state(p_body:gdnative.RID):gdnative.PhysicsDirectBodyState2D;
	function joint_create():gdnative.RID;
	function joint_clear(p_joint:gdnative.RID):Void;
	function joint_set_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.JointParam, p_value:Float):Void;
	function joint_get_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.JointParam):Float;
	function joint_disable_collisions_between_bodies(p_joint:gdnative.RID, p_disable:Bool):Void;
	function joint_is_disabled_collisions_between_bodies(p_joint:gdnative.RID):Bool;
	overload function joint_make_pin(p_joint:gdnative.RID, p_anchor:gdnative.Vector2, p_body_a:gdnative.RID, p_body_b:gdnative.RID):Void;
	overload function joint_make_pin(p_joint:gdnative.RID, p_anchor:gdnative.Vector2, p_body_a:gdnative.RID):Void;
	overload function joint_make_groove(p_joint:gdnative.RID, p_groove1_a:gdnative.Vector2, p_groove2_a:gdnative.Vector2, p_anchor_b:gdnative.Vector2, p_body_a:gdnative.RID, p_body_b:gdnative.RID):Void;
	overload function joint_make_groove(p_joint:gdnative.RID, p_groove1_a:gdnative.Vector2, p_groove2_a:gdnative.Vector2, p_anchor_b:gdnative.Vector2, p_body_a:gdnative.RID):Void;
	overload function joint_make_groove(p_joint:gdnative.RID, p_groove1_a:gdnative.Vector2, p_groove2_a:gdnative.Vector2, p_anchor_b:gdnative.Vector2):Void;
	overload function joint_make_damped_spring(p_joint:gdnative.RID, p_anchor_a:gdnative.Vector2, p_anchor_b:gdnative.Vector2, p_body_a:gdnative.RID, p_body_b:gdnative.RID):Void;
	overload function joint_make_damped_spring(p_joint:gdnative.RID, p_anchor_a:gdnative.Vector2, p_anchor_b:gdnative.Vector2, p_body_a:gdnative.RID):Void;
	function pin_joint_set_flag(p_joint:gdnative.RID, p_flag:gdnative.physicsserver2d.PinJointFlag, p_enabled:Bool):Void;
	function pin_joint_get_flag(p_joint:gdnative.RID, p_flag:gdnative.physicsserver2d.PinJointFlag):Bool;
	function pin_joint_set_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.PinJointParam, p_value:Float):Void;
	function pin_joint_get_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.PinJointParam):Float;
	function damped_spring_joint_set_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.DampedSpringParam, p_value:Float):Void;
	function damped_spring_joint_get_param(p_joint:gdnative.RID, p_param:gdnative.physicsserver2d.DampedSpringParam):Float;
	function joint_get_type(p_joint:gdnative.RID):gdnative.physicsserver2d.JointType;
	function free_rid(p_rid:gdnative.RID):Void;
	function set_active(p_active:Bool):Void;
	function get_process_info(p_process_info:gdnative.physicsserver2d.ProcessInfo):Int;
}
@:forward abstract PhysicsServer2D(cpp.Pointer<PhysicsServer2D_extern>) from cpp.Pointer<PhysicsServer2D_extern> to cpp.Pointer<PhysicsServer2D_extern> {
	@:from
	static inline function fromWrapper(v:gd.PhysicsServer2D):gdnative.PhysicsServer2D return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.PhysicsServer2D {
		final v = new gd.PhysicsServer2D(this);
		return v;
	}
}