package gdnative;
@:include("godot_cpp/classes/rendering_device.hpp") @:native("godot::RenderingDevice") @:structAccess extern class RenderingDevice_extern extends gdnative.Object.Object_extern {
	extern static inline function __alloc():cpp.Pointer<RenderingDevice_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::RenderingDevice"));
	function texture_create_shared(p_view:gdnative.RDTextureView, p_with_texture:gdnative.RID):gdnative.RID;
	function texture_create_shared_from_slice(p_view:gdnative.RDTextureView, p_with_texture:gdnative.RID, p_layer:Int, p_mipmap:Int, ?p_mipmaps:Int, ?p_slice_type:gdnative.renderingdevice.TextureSliceType):gdnative.RID;
	function texture_create_from_extension(p_type:gdnative.renderingdevice.TextureType, p_format:gdnative.renderingdevice.DataFormat, p_samples:gdnative.renderingdevice.TextureSamples, p_usage_flags:Int, p_image:Int, p_width:Int, p_height:Int, p_depth:Int, p_layers:Int):gdnative.RID;
	function texture_update(p_texture:gdnative.RID, p_layer:Int, p_data:gdnative.PackedByteArray):gdnative.Error;
	function texture_get_data(p_texture:gdnative.RID, p_layer:Int):gdnative.PackedByteArray;
	function texture_is_format_supported_for_usage(p_format:gdnative.renderingdevice.DataFormat, p_usage_flags:Int):Bool;
	function texture_is_shared(p_texture:gdnative.RID):Bool;
	function texture_is_valid(p_texture:gdnative.RID):Bool;
	function texture_copy(p_from_texture:gdnative.RID, p_to_texture:gdnative.RID, p_from_pos:gdnative.Vector3, p_to_pos:gdnative.Vector3, p_size:gdnative.Vector3, p_src_mipmap:Int, p_dst_mipmap:Int, p_src_layer:Int, p_dst_layer:Int):gdnative.Error;
	function texture_clear(p_texture:gdnative.RID, p_color:gdnative.Color, p_base_mipmap:Int, p_mipmap_count:Int, p_base_layer:Int, p_layer_count:Int):gdnative.Error;
	function texture_resolve_multisample(p_from_texture:gdnative.RID, p_to_texture:gdnative.RID):gdnative.Error;
	function texture_get_format(p_texture:gdnative.RID):gdnative.RDTextureFormat;
	function texture_get_native_handle(p_texture:gdnative.RID):Int;
	function framebuffer_format_create_empty(?p_samples:gdnative.renderingdevice.TextureSamples):Int;
	function framebuffer_format_get_texture_samples(p_format:Int, ?p_render_pass:Int):gdnative.renderingdevice.TextureSamples;
	function framebuffer_create_empty(p_size:gdnative.Vector2i, ?p_samples:gdnative.renderingdevice.TextureSamples, ?p_validate_with_format:Int):gdnative.RID;
	function framebuffer_get_format(p_framebuffer:gdnative.RID):Int;
	function framebuffer_is_valid(p_framebuffer:gdnative.RID):Bool;
	function sampler_create(p_state:gdnative.RDSamplerState):gdnative.RID;
	function sampler_is_format_supported_for_filter(p_format:gdnative.renderingdevice.DataFormat, p_sampler_filter:gdnative.renderingdevice.SamplerFilter):Bool;
	function vertex_buffer_create(p_size_bytes:Int, ?p_data:gdnative.PackedByteArray, ?p_use_as_storage:Bool):gdnative.RID;
	function index_buffer_create(p_size_indices:Int, p_format:gdnative.renderingdevice.IndexBufferFormat, ?p_data:gdnative.PackedByteArray, ?p_use_restart_indices:Bool):gdnative.RID;
	function index_array_create(p_index_buffer:gdnative.RID, p_index_offset:Int, p_index_count:Int):gdnative.RID;
	function shader_compile_spirv_from_source(p_shader_source:gdnative.RDShaderSource, ?p_allow_cache:Bool):gdnative.RDShaderSPIRV;
	function shader_compile_binary_from_spirv(p_spirv_data:gdnative.RDShaderSPIRV, ?p_name:gdnative.String):gdnative.PackedByteArray;
	function shader_create_from_spirv(p_spirv_data:gdnative.RDShaderSPIRV, ?p_name:gdnative.String):gdnative.RID;
	function shader_create_from_bytecode(p_binary_data:gdnative.PackedByteArray, ?p_placeholder_rid:gdnative.RID):gdnative.RID;
	function shader_create_placeholder():gdnative.RID;
	function shader_get_vertex_input_attribute_mask(p_shader:gdnative.RID):Int;
	function uniform_buffer_create(p_size_bytes:Int, ?p_data:gdnative.PackedByteArray):gdnative.RID;
	function storage_buffer_create(p_size_bytes:Int, ?p_data:gdnative.PackedByteArray, ?p_usage:Int):gdnative.RID;
	function texture_buffer_create(p_size_bytes:Int, p_format:gdnative.renderingdevice.DataFormat, ?p_data:gdnative.PackedByteArray):gdnative.RID;
	function uniform_set_is_valid(p_uniform_set:gdnative.RID):Bool;
	function buffer_copy(p_src_buffer:gdnative.RID, p_dst_buffer:gdnative.RID, p_src_offset:Int, p_dst_offset:Int, p_size:Int):gdnative.Error;
	function buffer_update(p_buffer:gdnative.RID, p_offset:Int, p_size_bytes:Int, p_data:gdnative.PackedByteArray):gdnative.Error;
	function buffer_clear(p_buffer:gdnative.RID, p_offset:Int, p_size_bytes:Int):gdnative.Error;
	function buffer_get_data(p_buffer:gdnative.RID, ?p_offset_bytes:Int, ?p_size_bytes:Int):gdnative.PackedByteArray;
	function render_pipeline_is_valid(p_render_pipeline:gdnative.RID):Bool;
	function compute_pipeline_is_valid(p_compute_pipeline:gdnative.RID):Bool;
	function screen_get_width(?p_screen:Int):Int;
	function screen_get_height(?p_screen:Int):Int;
	function screen_get_framebuffer_format(?p_screen:Int):Int;
	function draw_list_begin_for_screen(?p_screen:Int, ?p_clear_color:gdnative.Color):Int;
	function draw_list_begin(p_framebuffer:gdnative.RID, p_initial_color_action:gdnative.renderingdevice.InitialAction, p_final_color_action:gdnative.renderingdevice.FinalAction, p_initial_depth_action:gdnative.renderingdevice.InitialAction, p_final_depth_action:gdnative.renderingdevice.FinalAction, ?p_clear_color_values:gdnative.PackedColorArray, ?p_clear_depth:Float, ?p_clear_stencil:Int, ?p_region:gdnative.Rect2):Int;
	function draw_list_set_blend_constants(p_draw_list:Int, p_color:gdnative.Color):Void;
	function draw_list_bind_render_pipeline(p_draw_list:Int, p_render_pipeline:gdnative.RID):Void;
	function draw_list_bind_uniform_set(p_draw_list:Int, p_uniform_set:gdnative.RID, p_set_index:Int):Void;
	function draw_list_bind_vertex_array(p_draw_list:Int, p_vertex_array:gdnative.RID):Void;
	function draw_list_bind_index_array(p_draw_list:Int, p_index_array:gdnative.RID):Void;
	function draw_list_set_push_constant(p_draw_list:Int, p_buffer:gdnative.PackedByteArray, p_size_bytes:Int):Void;
	function draw_list_draw(p_draw_list:Int, p_use_indices:Bool, p_instances:Int, ?p_procedural_vertex_count:Int):Void;
	function draw_list_enable_scissor(p_draw_list:Int, ?p_rect:gdnative.Rect2):Void;
	function draw_list_disable_scissor(p_draw_list:Int):Void;
	function draw_list_switch_to_next_pass():Int;
	function draw_list_switch_to_next_pass_split(p_splits:Int):gdnative.PackedInt64Array;
	function draw_list_end():Void;
	function compute_list_begin():Int;
	function compute_list_bind_compute_pipeline(p_compute_list:Int, p_compute_pipeline:gdnative.RID):Void;
	function compute_list_set_push_constant(p_compute_list:Int, p_buffer:gdnative.PackedByteArray, p_size_bytes:Int):Void;
	function compute_list_bind_uniform_set(p_compute_list:Int, p_uniform_set:gdnative.RID, p_set_index:Int):Void;
	function compute_list_dispatch(p_compute_list:Int, p_x_groups:Int, p_y_groups:Int, p_z_groups:Int):Void;
	function compute_list_dispatch_indirect(p_compute_list:Int, p_buffer:gdnative.RID, p_offset:Int):Void;
	function compute_list_add_barrier(p_compute_list:Int):Void;
	function compute_list_end():Void;
	function free_rid(p_rid:gdnative.RID):Void;
	function capture_timestamp(p_name:gdnative.String):Void;
	function get_captured_timestamps_count():Int;
	function get_captured_timestamps_frame():Int;
	function get_captured_timestamp_gpu_time(p_index:Int):Int;
	function get_captured_timestamp_cpu_time(p_index:Int):Int;
	function get_captured_timestamp_name(p_index:Int):gdnative.String;
	function limit_get(p_limit:gdnative.renderingdevice.Limit):Int;
	function get_frame_delay():Int;
	function submit():Void;
	function sync():Void;
	function barrier(?p_from:Int, ?p_to:Int):Void;
	function full_barrier():Void;
	function create_local_device():gdnative.RenderingDevice;
	function set_resource_name(p_id:gdnative.RID, p_name:gdnative.String):Void;
	function draw_command_begin_label(p_name:gdnative.String, p_color:gdnative.Color):Void;
	function draw_command_insert_label(p_name:gdnative.String, p_color:gdnative.Color):Void;
	function draw_command_end_label():Void;
	function get_device_vendor_name():gdnative.String;
	function get_device_name():gdnative.String;
	function get_device_pipeline_cache_uuid():gdnative.String;
	function get_memory_usage(p_type:gdnative.renderingdevice.MemoryType):Int;
	function get_driver_resource(p_resource:gdnative.renderingdevice.DriverResource, p_rid:gdnative.RID, p_index:Int):Int;
}
@:forward abstract RenderingDevice(cpp.Pointer<RenderingDevice_extern>) from cpp.Pointer<RenderingDevice_extern> to cpp.Pointer<RenderingDevice_extern> {
	@:from
	static inline function fromWrapper(v:gd.RenderingDevice):gdnative.RenderingDevice return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.RenderingDevice {
		final v = new gd.RenderingDevice(this);
		return v;
	}
}