package gdnative;
@:include("godot_cpp/classes/rich_text_label.hpp") @:native("godot::RichTextLabel") @:structAccess extern class RichTextLabel_extern extends gdnative.Control.Control_extern {
	extern static inline function __alloc():cpp.Pointer<RichTextLabel_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::RichTextLabel"));
	function get_parsed_text():gdnative.String;
	function add_text(p_text:gdnative.String):Void;
	function set_text(p_text:gdnative.String):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_key:gdnative.Variant, p_pad:Bool, p_tooltip:gdnative.String, p_size_in_percent:Bool):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_key:gdnative.Variant, p_pad:Bool, p_tooltip:gdnative.String):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_key:gdnative.Variant, p_pad:Bool):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_key:gdnative.Variant):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int, p_height:Int):Void;
	overload function add_image(p_image:gdnative.Texture2D, p_width:Int):Void;
	overload function add_image(p_image:gdnative.Texture2D):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_pad:Bool, p_tooltip:gdnative.String, p_size_in_percent:Bool):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_pad:Bool, p_tooltip:gdnative.String):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2, p_pad:Bool):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment, p_region:gdnative.Rect2):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color, p_inline_align:gdnative.InlineAlignment):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int, p_color:gdnative.Color):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int, p_height:Int):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D, p_width:Int):Void;
	overload function update_image(p_key:gdnative.Variant, p_mask:Int, p_image:gdnative.Texture2D):Void;
	function newline():Void;
	overload function remove_paragraph(p_paragraph:Int, p_no_invalidate:Bool):Bool;
	overload function remove_paragraph(p_paragraph:Int):Bool;
	function invalidate_paragraph(p_paragraph:Int):Bool;
	overload function push_font(p_font:gdnative.Font, p_font_size:Int):Void;
	overload function push_font(p_font:gdnative.Font):Void;
	function push_font_size(p_font_size:Int):Void;
	function push_normal():Void;
	function push_bold():Void;
	function push_bold_italics():Void;
	function push_italics():Void;
	function push_mono():Void;
	function push_color(p_color:gdnative.Color):Void;
	function push_outline_size(p_outline_size:Int):Void;
	function push_outline_color(p_color:gdnative.Color):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment, p_base_direction:gdnative.control.TextDirection, p_language:gdnative.String, p_st_parser:gdnative.textserver.StructuredTextParser, p_justification_flags:Int, p_tab_stops:gdnative.PackedFloat32Array):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment, p_base_direction:gdnative.control.TextDirection, p_language:gdnative.String, p_st_parser:gdnative.textserver.StructuredTextParser, p_justification_flags:Int):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment, p_base_direction:gdnative.control.TextDirection, p_language:gdnative.String, p_st_parser:gdnative.textserver.StructuredTextParser):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment, p_base_direction:gdnative.control.TextDirection, p_language:gdnative.String):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment, p_base_direction:gdnative.control.TextDirection):Void;
	overload function push_paragraph(p_alignment:gdnative.HorizontalAlignment):Void;
	function push_indent(p_level:Int):Void;
	overload function push_list(p_level:Int, p_type:gdnative.richtextlabel.ListType, p_capitalize:Bool, p_bullet:gdnative.String):Void;
	overload function push_list(p_level:Int, p_type:gdnative.richtextlabel.ListType, p_capitalize:Bool):Void;
	overload function push_meta(p_data:gdnative.Variant, p_underline_mode:gdnative.richtextlabel.MetaUnderline):Void;
	overload function push_meta(p_data:gdnative.Variant):Void;
	function push_hint(p_description:gdnative.String):Void;
	function push_language(p_language:gdnative.String):Void;
	function push_underline():Void;
	function push_strikethrough():Void;
	overload function push_table(p_columns:Int, p_inline_align:gdnative.InlineAlignment, p_align_to_row:Int):Void;
	overload function push_table(p_columns:Int, p_inline_align:gdnative.InlineAlignment):Void;
	overload function push_table(p_columns:Int):Void;
	overload function push_dropcap(p_string:gdnative.String, p_font:gdnative.Font, p_size:Int, p_dropcap_margins:gdnative.Rect2, p_color:gdnative.Color, p_outline_size:Int, p_outline_color:gdnative.Color):Void;
	overload function push_dropcap(p_string:gdnative.String, p_font:gdnative.Font, p_size:Int, p_dropcap_margins:gdnative.Rect2, p_color:gdnative.Color, p_outline_size:Int):Void;
	overload function push_dropcap(p_string:gdnative.String, p_font:gdnative.Font, p_size:Int, p_dropcap_margins:gdnative.Rect2, p_color:gdnative.Color):Void;
	overload function push_dropcap(p_string:gdnative.String, p_font:gdnative.Font, p_size:Int, p_dropcap_margins:gdnative.Rect2):Void;
	overload function push_dropcap(p_string:gdnative.String, p_font:gdnative.Font, p_size:Int):Void;
	overload function set_table_column_expand(p_column:Int, p_expand:Bool, p_ratio:Int):Void;
	overload function set_table_column_expand(p_column:Int, p_expand:Bool):Void;
	function set_cell_row_background_color(p_odd_row_bg:gdnative.Color, p_even_row_bg:gdnative.Color):Void;
	function set_cell_border_color(p_color:gdnative.Color):Void;
	function set_cell_size_override(p_min_size:gdnative.Vector2, p_max_size:gdnative.Vector2):Void;
	function set_cell_padding(p_padding:gdnative.Rect2):Void;
	function push_cell():Void;
	function push_fgcolor(p_fgcolor:gdnative.Color):Void;
	function push_bgcolor(p_bgcolor:gdnative.Color):Void;
	function push_customfx(p_effect:gdnative.RichTextEffect, p_env:gdnative.Dictionary):Void;
	function push_context():Void;
	function pop_context():Void;
	function pop():Void;
	function pop_all():Void;
	function clear():Void;
	function set_structured_text_bidi_override(p_parser:gdnative.textserver.StructuredTextParser):Void;
	function get_structured_text_bidi_override():gdnative.textserver.StructuredTextParser;
	function set_structured_text_bidi_override_options(p_args:gdnative.Array):Void;
	function get_structured_text_bidi_override_options():gdnative.Array;
	function set_text_direction(p_direction:gdnative.control.TextDirection):Void;
	function get_text_direction():gdnative.control.TextDirection;
	function set_language(p_language:gdnative.String):Void;
	function get_language():gdnative.String;
	function set_autowrap_mode(p_autowrap_mode:gdnative.textserver.AutowrapMode):Void;
	function get_autowrap_mode():gdnative.textserver.AutowrapMode;
	function set_meta_underline(p_enable:Bool):Void;
	function is_meta_underlined():Bool;
	function set_hint_underline(p_enable:Bool):Void;
	function is_hint_underlined():Bool;
	function set_scroll_active(p_active:Bool):Void;
	function is_scroll_active():Bool;
	function set_scroll_follow(p_follow:Bool):Void;
	function is_scroll_following():Bool;
	function get_v_scroll_bar():gdnative.VScrollBar;
	function scroll_to_line(p_line:Int):Void;
	function scroll_to_paragraph(p_paragraph:Int):Void;
	function scroll_to_selection():Void;
	function set_tab_size(p_spaces:Int):Void;
	function get_tab_size():Int;
	function set_fit_content(p_enabled:Bool):Void;
	function is_fit_content_enabled():Bool;
	function set_selection_enabled(p_enabled:Bool):Void;
	function is_selection_enabled():Bool;
	function set_context_menu_enabled(p_enabled:Bool):Void;
	function is_context_menu_enabled():Bool;
	function set_shortcut_keys_enabled(p_enabled:Bool):Void;
	function is_shortcut_keys_enabled():Bool;
	function set_deselect_on_focus_loss_enabled(p_enable:Bool):Void;
	function is_deselect_on_focus_loss_enabled():Bool;
	function set_drag_and_drop_selection_enabled(p_enable:Bool):Void;
	function is_drag_and_drop_selection_enabled():Bool;
	function get_selection_from():Int;
	function get_selection_to():Int;
	function select_all():Void;
	function get_selected_text():gdnative.String;
	function deselect():Void;
	function parse_bbcode(p_bbcode:gdnative.String):Void;
	function append_text(p_bbcode:gdnative.String):Void;
	function get_text():gdnative.String;
	function is_ready():Bool;
	function set_threaded(p_threaded:Bool):Void;
	function is_threaded():Bool;
	function set_progress_bar_delay(p_delay_ms:Int):Void;
	function get_progress_bar_delay():Int;
	function set_visible_characters(p_amount:Int):Void;
	function get_visible_characters():Int;
	function get_visible_characters_behavior():gdnative.textserver.VisibleCharactersBehavior;
	function set_visible_characters_behavior(p_behavior:gdnative.textserver.VisibleCharactersBehavior):Void;
	function set_visible_ratio(p_ratio:Float):Void;
	function get_visible_ratio():Float;
	function get_character_line(p_character:Int):Int;
	function get_character_paragraph(p_character:Int):Int;
	function get_total_character_count():Int;
	function set_use_bbcode(p_enable:Bool):Void;
	function is_using_bbcode():Bool;
	function get_line_count():Int;
	function get_visible_line_count():Int;
	function get_paragraph_count():Int;
	function get_visible_paragraph_count():Int;
	function get_content_height():Int;
	function get_content_width():Int;
	function get_line_offset(p_line:Int):Float;
	function get_paragraph_offset(p_paragraph:Int):Float;
	function parse_expressions_for_values(p_expressions:gdnative.PackedStringArray):gdnative.Dictionary;
	function set_effects(p_effects:gdnative.Array):Void;
	function get_effects():gdnative.Array;
	function install_effect(p_effect:gdnative.Variant):Void;
	function get_menu():gdnative.PopupMenu;
	function is_menu_visible():Bool;
	function menu_option(p_option:Int):Void;
}
@:forward abstract RichTextLabel(cpp.Pointer<RichTextLabel_extern>) from cpp.Pointer<RichTextLabel_extern> to cpp.Pointer<RichTextLabel_extern> {
	@:from
	static inline function fromWrapper(v:gd.RichTextLabel):gdnative.RichTextLabel return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.RichTextLabel {
		final v = new gd.RichTextLabel(this);
		return v;
	}
}