package gdnative;
/**
	Class
**/
@:forward abstract TreeItem(cpp.Pointer<TreeItem_extern>) from cpp.Pointer<TreeItem_extern> to cpp.Pointer<TreeItem_extern> {
	@:from
	static inline function fromWrapper(v:gd.TreeItem):gdnative.TreeItem return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.TreeItem return new gd.TreeItem(this);
}
@:include("godot_cpp/classes/tree_item.hpp") @:native("godot::TreeItem") @:structAccess extern class TreeItem_extern extends gdnative.Object.Object_extern {
	extern static inline function __alloc():cpp.Pointer<TreeItem_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::TreeItem"));
	function set_cell_mode(p_column:Int, p_mode:gdnative.treeitem.TreeCellMode):Void;
	function get_cell_mode(p_column:Int):gdnative.treeitem.TreeCellMode;
	function set_edit_multiline(p_column:Int, p_multiline:Bool):Void;
	function is_edit_multiline(p_column:Int):Bool;
	function set_checked(p_column:Int, p_checked:Bool):Void;
	function set_indeterminate(p_column:Int, p_indeterminate:Bool):Void;
	function is_checked(p_column:Int):Bool;
	function is_indeterminate(p_column:Int):Bool;
	overload function propagate_check(p_column:Int):Void;
	overload function propagate_check(p_column:Int, p_emit_signal:Bool):Void;
	function set_text(p_column:Int, p_text:gdnative.String):Void;
	function get_text(p_column:Int):gdnative.String;
	function set_text_direction(p_column:Int, p_direction:gdnative.control.TextDirection):Void;
	function get_text_direction(p_column:Int):gdnative.control.TextDirection;
	function set_autowrap_mode(p_column:Int, p_autowrap_mode:gdnative.textserver.AutowrapMode):Void;
	function get_autowrap_mode(p_column:Int):gdnative.textserver.AutowrapMode;
	function set_text_overrun_behavior(p_column:Int, p_overrun_behavior:gdnative.textserver.OverrunBehavior):Void;
	function get_text_overrun_behavior(p_column:Int):gdnative.textserver.OverrunBehavior;
	function set_structured_text_bidi_override(p_column:Int, p_parser:gdnative.textserver.StructuredTextParser):Void;
	function get_structured_text_bidi_override(p_column:Int):gdnative.textserver.StructuredTextParser;
	function set_structured_text_bidi_override_options(p_column:Int, p_args:gdnative.Array):Void;
	function get_structured_text_bidi_override_options(p_column:Int):gdnative.Array;
	function set_language(p_column:Int, p_language:gdnative.String):Void;
	function get_language(p_column:Int):gdnative.String;
	function set_suffix(p_column:Int, p_text:gdnative.String):Void;
	function get_suffix(p_column:Int):gdnative.String;
	function set_icon(p_column:Int, p_texture:gdnative.Texture2D):Void;
	function get_icon(p_column:Int):gdnative.Texture2D;
	function set_icon_region(p_column:Int, p_region:gdnative.Rect2):Void;
	function get_icon_region(p_column:Int):gdnative.Rect2;
	function set_icon_max_width(p_column:Int, p_width:Int):Void;
	function get_icon_max_width(p_column:Int):Int;
	function set_icon_modulate(p_column:Int, p_modulate:gdnative.Color):Void;
	function get_icon_modulate(p_column:Int):gdnative.Color;
	function set_range(p_column:Int, p_value:Float):Void;
	function get_range(p_column:Int):Float;
	overload function set_range_config(p_column:Int, p_min:Float, p_max:Float, p_step:Float):Void;
	overload function set_range_config(p_column:Int, p_min:Float, p_max:Float, p_step:Float, p_expr:Bool):Void;
	function get_range_config(p_column:Int):gdnative.Dictionary;
	function set_metadata(p_column:Int, p_meta:gdnative.Variant):Void;
	function get_metadata(p_column:Int):gdnative.Variant;
	function set_custom_draw(p_column:Int, p_object:gdnative.Object, p_callback:gdnative.StringName):Void;
	function set_custom_draw_callback(p_column:Int, p_callback:gdnative.Callable):Void;
	function get_custom_draw_callback(p_column:Int):gdnative.Callable;
	function set_collapsed(p_enable:Bool):Void;
	function is_collapsed():Bool;
	function set_collapsed_recursive(p_enable:Bool):Void;
	overload function is_any_collapsed():Bool;
	overload function is_any_collapsed(p_only_visible:Bool):Bool;
	function set_visible(p_enable:Bool):Void;
	function is_visible():Bool;
	function is_visible_in_tree():Bool;
	function uncollapse_tree():Void;
	function set_custom_minimum_height(p_height:Int):Void;
	function get_custom_minimum_height():Int;
	function set_selectable(p_column:Int, p_selectable:Bool):Void;
	function is_selectable(p_column:Int):Bool;
	function is_selected(p_column:Int):Bool;
	function select(p_column:Int):Void;
	function deselect(p_column:Int):Void;
	function set_editable(p_column:Int, p_enabled:Bool):Void;
	function is_editable(p_column:Int):Bool;
	function set_custom_color(p_column:Int, p_color:gdnative.Color):Void;
	function get_custom_color(p_column:Int):gdnative.Color;
	function clear_custom_color(p_column:Int):Void;
	function set_custom_font(p_column:Int, p_font:gdnative.Font):Void;
	function get_custom_font(p_column:Int):gdnative.Font;
	function set_custom_font_size(p_column:Int, p_font_size:Int):Void;
	function get_custom_font_size(p_column:Int):Int;
	overload function set_custom_bg_color(p_column:Int, p_color:gdnative.Color):Void;
	overload function set_custom_bg_color(p_column:Int, p_color:gdnative.Color, p_just_outline:Bool):Void;
	function clear_custom_bg_color(p_column:Int):Void;
	function get_custom_bg_color(p_column:Int):gdnative.Color;
	function set_custom_as_button(p_column:Int, p_enable:Bool):Void;
	function is_custom_set_as_button(p_column:Int):Bool;
	overload function add_button(p_column:Int, p_button:gdnative.Texture2D):Void;
	overload function add_button(p_column:Int, p_button:gdnative.Texture2D, p_id:Int):Void;
	overload function add_button(p_column:Int, p_button:gdnative.Texture2D, p_id:Int, p_disabled:Bool):Void;
	overload function add_button(p_column:Int, p_button:gdnative.Texture2D, p_id:Int, p_disabled:Bool, p_tooltip_text:gdnative.String):Void;
	function get_button_count(p_column:Int):Int;
	function get_button_tooltip_text(p_column:Int, p_button_index:Int):gdnative.String;
	function get_button_id(p_column:Int, p_button_index:Int):Int;
	function get_button_by_id(p_column:Int, p_id:Int):Int;
	function get_button_color(p_column:Int, p_id:Int):gdnative.Color;
	function get_button(p_column:Int, p_button_index:Int):gdnative.Texture2D;
	function set_button_tooltip_text(p_column:Int, p_button_index:Int, p_tooltip:gdnative.String):Void;
	function set_button(p_column:Int, p_button_index:Int, p_button:gdnative.Texture2D):Void;
	function erase_button(p_column:Int, p_button_index:Int):Void;
	function set_button_disabled(p_column:Int, p_button_index:Int, p_disabled:Bool):Void;
	function set_button_color(p_column:Int, p_button_index:Int, p_color:gdnative.Color):Void;
	function is_button_disabled(p_column:Int, p_button_index:Int):Bool;
	function set_tooltip_text(p_column:Int, p_tooltip:gdnative.String):Void;
	function get_tooltip_text(p_column:Int):gdnative.String;
	function set_text_alignment(p_column:Int, p_text_alignment:gdnative.HorizontalAlignment):Void;
	function get_text_alignment(p_column:Int):gdnative.HorizontalAlignment;
	function set_expand_right(p_column:Int, p_enable:Bool):Void;
	function get_expand_right(p_column:Int):Bool;
	function set_disable_folding(p_disable:Bool):Void;
	function is_folding_disabled():Bool;
	overload function create_child():gdnative.TreeItem;
	overload function create_child(p_index:Int):gdnative.TreeItem;
	function add_child(p_child:gdnative.TreeItem):Void;
	function remove_child(p_child:gdnative.TreeItem):Void;
	function get_tree():gdnative.Tree;
	function get_next():gdnative.TreeItem;
	function get_prev():gdnative.TreeItem;
	function get_parent():gdnative.TreeItem;
	function get_first_child():gdnative.TreeItem;
	overload function get_next_in_tree():gdnative.TreeItem;
	overload function get_next_in_tree(p_wrap:Bool):gdnative.TreeItem;
	overload function get_prev_in_tree():gdnative.TreeItem;
	overload function get_prev_in_tree(p_wrap:Bool):gdnative.TreeItem;
	overload function get_next_visible():gdnative.TreeItem;
	overload function get_next_visible(p_wrap:Bool):gdnative.TreeItem;
	overload function get_prev_visible():gdnative.TreeItem;
	overload function get_prev_visible(p_wrap:Bool):gdnative.TreeItem;
	function get_child(p_index:Int):gdnative.TreeItem;
	function get_child_count():Int;
	function get_index():Int;
	function move_before(p_item:gdnative.TreeItem):Void;
	function move_after(p_item:gdnative.TreeItem):Void;
	function call_recursive(p_method:gdnative.StringName):Void;
}