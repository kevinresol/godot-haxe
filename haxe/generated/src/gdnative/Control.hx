package gdnative;
@:include("godot_cpp/classes/control.hpp") @:native("godot::Control") @:structAccess extern class Control_extern extends gdnative.CanvasItem.CanvasItem_extern {
	extern static inline function __alloc():cpp.Pointer<Control_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::Control"));
	function _has_point(p_point:gdnative.Vector2):Bool;
	function _get_minimum_size():gdnative.Vector2;
	function _get_tooltip(p_at_position:gdnative.Vector2):gdnative.String;
	function _get_drag_data(p_at_position:gdnative.Vector2):gdnative.Variant;
	function _can_drop_data(p_at_position:gdnative.Vector2, p_data:gdnative.Variant):Bool;
	function _drop_data(p_at_position:gdnative.Vector2, p_data:gdnative.Variant):Void;
	function _make_custom_tooltip(p_for_text:gdnative.String):gdnative.Object;
	function _gui_input(p_event:gdnative.InputEvent):Void;
	function accept_event():Void;
	function get_minimum_size():gdnative.Vector2;
	function get_combined_minimum_size():gdnative.Vector2;
	function set_anchors_preset(p_preset:gdnative.control.LayoutPreset, ?p_keep_offsets:Bool):Void;
	function set_offsets_preset(p_preset:gdnative.control.LayoutPreset, ?p_resize_mode:gdnative.control.LayoutPresetMode, ?p_margin:Int):Void;
	function set_anchors_and_offsets_preset(p_preset:gdnative.control.LayoutPreset, ?p_resize_mode:gdnative.control.LayoutPresetMode, ?p_margin:Int):Void;
	function set_anchor(p_side:gdnative.Side, p_anchor:Float, ?p_keep_offset:Bool, ?p_push_opposite_anchor:Bool):Void;
	function get_anchor(p_side:gdnative.Side):Float;
	function set_offset(p_side:gdnative.Side, p_offset:Float):Void;
	function get_offset(p_offset:gdnative.Side):Float;
	function set_anchor_and_offset(p_side:gdnative.Side, p_anchor:Float, p_offset:Float, ?p_push_opposite_anchor:Bool):Void;
	function set_begin(p_position:gdnative.Vector2):Void;
	function set_end(p_position:gdnative.Vector2):Void;
	function set_position(p_position:gdnative.Vector2, ?p_keep_offsets:Bool):Void;
	function set_size(p_size:gdnative.Vector2, ?p_keep_offsets:Bool):Void;
	function reset_size():Void;
	function set_custom_minimum_size(p_size:gdnative.Vector2):Void;
	function set_global_position(p_position:gdnative.Vector2, ?p_keep_offsets:Bool):Void;
	function set_rotation(p_radians:Float):Void;
	function set_rotation_degrees(p_degrees:Float):Void;
	function set_scale(p_scale:gdnative.Vector2):Void;
	function set_pivot_offset(p_pivot_offset:gdnative.Vector2):Void;
	function get_begin():gdnative.Vector2;
	function get_end():gdnative.Vector2;
	function get_position():gdnative.Vector2;
	function get_size():gdnative.Vector2;
	function get_rotation():Float;
	function get_rotation_degrees():Float;
	function get_scale():gdnative.Vector2;
	function get_pivot_offset():gdnative.Vector2;
	function get_custom_minimum_size():gdnative.Vector2;
	function get_parent_area_size():gdnative.Vector2;
	function get_global_position():gdnative.Vector2;
	function get_screen_position():gdnative.Vector2;
	function get_rect():gdnative.Rect2;
	function get_global_rect():gdnative.Rect2;
	function set_focus_mode(p_mode:gdnative.control.FocusMode):Void;
	function get_focus_mode():gdnative.control.FocusMode;
	function has_focus():Bool;
	function grab_focus():Void;
	function release_focus():Void;
	function find_prev_valid_focus():gdnative.Control;
	function find_next_valid_focus():gdnative.Control;
	function find_valid_focus_neighbor(p_side:gdnative.Side):gdnative.Control;
	function set_h_size_flags(p_flags:Int):Void;
	function get_h_size_flags():Int;
	function set_stretch_ratio(p_ratio:Float):Void;
	function get_stretch_ratio():Float;
	function set_v_size_flags(p_flags:Int):Void;
	function get_v_size_flags():Int;
	function set_theme(p_theme:gdnative.Theme):Void;
	function get_theme():gdnative.Theme;
	function set_theme_type_variation(p_theme_type:gdnative.StringName):Void;
	function get_theme_type_variation():gdnative.StringName;
	function begin_bulk_theme_override():Void;
	function end_bulk_theme_override():Void;
	function add_theme_icon_override(p_name:gdnative.StringName, p_texture:gdnative.Texture2D):Void;
	function add_theme_stylebox_override(p_name:gdnative.StringName, p_stylebox:gdnative.StyleBox):Void;
	function add_theme_font_override(p_name:gdnative.StringName, p_font:gdnative.Font):Void;
	function add_theme_font_size_override(p_name:gdnative.StringName, p_font_size:Int):Void;
	function add_theme_color_override(p_name:gdnative.StringName, p_color:gdnative.Color):Void;
	function add_theme_constant_override(p_name:gdnative.StringName, p_constant:Int):Void;
	function remove_theme_icon_override(p_name:gdnative.StringName):Void;
	function remove_theme_stylebox_override(p_name:gdnative.StringName):Void;
	function remove_theme_font_override(p_name:gdnative.StringName):Void;
	function remove_theme_font_size_override(p_name:gdnative.StringName):Void;
	function remove_theme_color_override(p_name:gdnative.StringName):Void;
	function remove_theme_constant_override(p_name:gdnative.StringName):Void;
	function get_theme_icon(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):gdnative.Texture2D;
	function get_theme_stylebox(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):gdnative.StyleBox;
	function get_theme_font(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):gdnative.Font;
	function get_theme_font_size(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Int;
	function get_theme_color(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):gdnative.Color;
	function get_theme_constant(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Int;
	function has_theme_icon_override(p_name:gdnative.StringName):Bool;
	function has_theme_stylebox_override(p_name:gdnative.StringName):Bool;
	function has_theme_font_override(p_name:gdnative.StringName):Bool;
	function has_theme_font_size_override(p_name:gdnative.StringName):Bool;
	function has_theme_color_override(p_name:gdnative.StringName):Bool;
	function has_theme_constant_override(p_name:gdnative.StringName):Bool;
	function has_theme_icon(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function has_theme_stylebox(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function has_theme_font(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function has_theme_font_size(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function has_theme_color(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function has_theme_constant(p_name:gdnative.StringName, ?p_theme_type:gdnative.StringName):Bool;
	function get_theme_default_base_scale():Float;
	function get_theme_default_font():gdnative.Font;
	function get_theme_default_font_size():Int;
	function get_parent_control():gdnative.Control;
	function set_h_grow_direction(p_direction:gdnative.control.GrowDirection):Void;
	function get_h_grow_direction():gdnative.control.GrowDirection;
	function set_v_grow_direction(p_direction:gdnative.control.GrowDirection):Void;
	function get_v_grow_direction():gdnative.control.GrowDirection;
	function set_tooltip_text(p_hint:gdnative.String):Void;
	function get_tooltip_text():gdnative.String;
	function get_tooltip(?p_at_position:gdnative.Vector2):gdnative.String;
	function set_default_cursor_shape(p_shape:gdnative.control.CursorShape):Void;
	function get_default_cursor_shape():gdnative.control.CursorShape;
	function get_cursor_shape(?p_position:gdnative.Vector2):gdnative.control.CursorShape;
	function set_focus_neighbor(p_side:gdnative.Side, p_neighbor:gdnative.NodePath):Void;
	function get_focus_neighbor(p_side:gdnative.Side):gdnative.NodePath;
	function set_focus_next(p_next:gdnative.NodePath):Void;
	function get_focus_next():gdnative.NodePath;
	function set_focus_previous(p_previous:gdnative.NodePath):Void;
	function get_focus_previous():gdnative.NodePath;
	function force_drag(p_data:gdnative.Variant, p_preview:gdnative.Control):Void;
	function set_mouse_filter(p_filter:gdnative.control.MouseFilter):Void;
	function get_mouse_filter():gdnative.control.MouseFilter;
	function set_force_pass_scroll_events(p_force_pass_scroll_events:Bool):Void;
	function is_force_pass_scroll_events():Bool;
	function set_clip_contents(p_enable:Bool):Void;
	function is_clipping_contents():Bool;
	function grab_click_focus():Void;
	function set_drag_forwarding(p_drag_func:gdnative.Callable, p_can_drop_func:gdnative.Callable, p_drop_func:gdnative.Callable):Void;
	function set_drag_preview(p_control:gdnative.Control):Void;
	function is_drag_successful():Bool;
	function warp_mouse(p_position:gdnative.Vector2):Void;
	function set_shortcut_context(p_node:gdnative.Node):Void;
	function get_shortcut_context():gdnative.Node;
	function update_minimum_size():Void;
	function set_layout_direction(p_direction:gdnative.control.LayoutDirection):Void;
	function get_layout_direction():gdnative.control.LayoutDirection;
	function is_layout_rtl():Bool;
	function set_auto_translate(p_enable:Bool):Void;
	function is_auto_translating():Bool;
	function set_localize_numeral_system(p_enable:Bool):Void;
	function is_localizing_numeral_system():Bool;
}
@:forward abstract Control(cpp.Pointer<Control_extern>) from cpp.Pointer<Control_extern> to cpp.Pointer<Control_extern> {
	@:from
	static inline function fromWrapper(v:gd.Control):gdnative.Control return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.Control {
		final v = new gd.Control(this);
		return v;
	}
}