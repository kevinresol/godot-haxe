package gdnative;
@:include("godot_cpp/classes/code_edit.hpp") @:native("godot::CodeEdit") @:structAccess extern class CodeEdit_extern extends gdnative.TextEdit.TextEdit_extern {
	extern static inline function __alloc():cpp.Pointer<CodeEdit_extern> return gdnative.Memory.Memory_extern.memnew(untyped __cpp__("godot::CodeEdit"));
	function _confirm_code_completion(p_replace:Bool):Void;
	function _request_code_completion(p_force:Bool):Void;
	function set_indent_size(p_size:Int):Void;
	function get_indent_size():Int;
	function set_indent_using_spaces(p_use_spaces:Bool):Void;
	function is_indent_using_spaces():Bool;
	function set_auto_indent_enabled(p_enable:Bool):Void;
	function is_auto_indent_enabled():Bool;
	function do_indent():Void;
	function indent_lines():Void;
	function unindent_lines():Void;
	function convert_indent(?p_from_line:Int, ?p_to_line:Int):Void;
	function set_auto_brace_completion_enabled(p_enable:Bool):Void;
	function is_auto_brace_completion_enabled():Bool;
	function set_highlight_matching_braces_enabled(p_enable:Bool):Void;
	function is_highlight_matching_braces_enabled():Bool;
	function add_auto_brace_completion_pair(p_start_key:gdnative.String, p_end_key:gdnative.String):Void;
	function set_auto_brace_completion_pairs(p_pairs:gdnative.Dictionary):Void;
	function get_auto_brace_completion_pairs():gdnative.Dictionary;
	function has_auto_brace_completion_open_key(p_open_key:gdnative.String):Bool;
	function has_auto_brace_completion_close_key(p_close_key:gdnative.String):Bool;
	function get_auto_brace_completion_close_key(p_open_key:gdnative.String):gdnative.String;
	function set_draw_breakpoints_gutter(p_enable:Bool):Void;
	function is_drawing_breakpoints_gutter():Bool;
	function set_draw_bookmarks_gutter(p_enable:Bool):Void;
	function is_drawing_bookmarks_gutter():Bool;
	function set_draw_executing_lines_gutter(p_enable:Bool):Void;
	function is_drawing_executing_lines_gutter():Bool;
	function set_line_as_breakpoint(p_line:Int, p_breakpointed:Bool):Void;
	function is_line_breakpointed(p_line:Int):Bool;
	function clear_breakpointed_lines():Void;
	function get_breakpointed_lines():gdnative.PackedInt32Array;
	function set_line_as_bookmarked(p_line:Int, p_bookmarked:Bool):Void;
	function is_line_bookmarked(p_line:Int):Bool;
	function clear_bookmarked_lines():Void;
	function get_bookmarked_lines():gdnative.PackedInt32Array;
	function set_line_as_executing(p_line:Int, p_executing:Bool):Void;
	function is_line_executing(p_line:Int):Bool;
	function clear_executing_lines():Void;
	function get_executing_lines():gdnative.PackedInt32Array;
	function set_draw_line_numbers(p_enable:Bool):Void;
	function is_draw_line_numbers_enabled():Bool;
	function set_line_numbers_zero_padded(p_enable:Bool):Void;
	function is_line_numbers_zero_padded():Bool;
	function set_draw_fold_gutter(p_enable:Bool):Void;
	function is_drawing_fold_gutter():Bool;
	function set_line_folding_enabled(p_enabled:Bool):Void;
	function is_line_folding_enabled():Bool;
	function can_fold_line(p_line:Int):Bool;
	function fold_line(p_line:Int):Void;
	function unfold_line(p_line:Int):Void;
	function fold_all_lines():Void;
	function unfold_all_lines():Void;
	function toggle_foldable_line(p_line:Int):Void;
	function toggle_foldable_lines_at_carets():Void;
	function is_line_folded(p_line:Int):Bool;
	function create_code_region():Void;
	function get_code_region_start_tag():gdnative.String;
	function get_code_region_end_tag():gdnative.String;
	function set_code_region_tags(?p_start:gdnative.String, ?p_end:gdnative.String):Void;
	function is_line_code_region_start(p_line:Int):Bool;
	function is_line_code_region_end(p_line:Int):Bool;
	function add_string_delimiter(p_start_key:gdnative.String, p_end_key:gdnative.String, ?p_line_only:Bool):Void;
	function remove_string_delimiter(p_start_key:gdnative.String):Void;
	function has_string_delimiter(p_start_key:gdnative.String):Bool;
	function clear_string_delimiters():Void;
	function is_in_string(p_line:Int, ?p_column:Int):Int;
	function add_comment_delimiter(p_start_key:gdnative.String, p_end_key:gdnative.String, ?p_line_only:Bool):Void;
	function remove_comment_delimiter(p_start_key:gdnative.String):Void;
	function has_comment_delimiter(p_start_key:gdnative.String):Bool;
	function clear_comment_delimiters():Void;
	function is_in_comment(p_line:Int, ?p_column:Int):Int;
	function get_delimiter_start_key(p_delimiter_index:Int):gdnative.String;
	function get_delimiter_end_key(p_delimiter_index:Int):gdnative.String;
	function get_delimiter_start_position(p_line:Int, p_column:Int):gdnative.Vector2;
	function get_delimiter_end_position(p_line:Int, p_column:Int):gdnative.Vector2;
	function set_code_hint(p_code_hint:gdnative.String):Void;
	function set_code_hint_draw_below(p_draw_below:Bool):Void;
	function get_text_for_code_completion():gdnative.String;
	function request_code_completion(?p_force:Bool):Void;
	function add_code_completion_option(p_type:gdnative.codeedit.CodeCompletionKind, p_display_text:gdnative.String, p_insert_text:gdnative.String, ?p_text_color:gdnative.Color, ?p_icon:gdnative.Resource, ?p_value:gdnative.Variant, ?p_location:Int):Void;
	function update_code_completion_options(p_force:Bool):Void;
	function get_code_completion_option(p_index:Int):gdnative.Dictionary;
	function get_code_completion_selected_index():Int;
	function set_code_completion_selected_index(p_index:Int):Void;
	function confirm_code_completion(?p_replace:Bool):Void;
	function cancel_code_completion():Void;
	function set_code_completion_enabled(p_enable:Bool):Void;
	function is_code_completion_enabled():Bool;
	function set_symbol_lookup_on_click_enabled(p_enable:Bool):Void;
	function is_symbol_lookup_on_click_enabled():Bool;
	function get_text_for_symbol_lookup():gdnative.String;
	function get_text_with_cursor_char(p_line:Int, p_column:Int):gdnative.String;
	function set_symbol_lookup_word_as_valid(p_valid:Bool):Void;
	function move_lines_up():Void;
	function move_lines_down():Void;
	function delete_lines():Void;
	function duplicate_selection():Void;
	function duplicate_lines():Void;
}
@:forward abstract CodeEdit(cpp.Pointer<CodeEdit_extern>) from cpp.Pointer<CodeEdit_extern> to cpp.Pointer<CodeEdit_extern> {
	@:from
	static inline function fromWrapper(v:gd.CodeEdit):gdnative.CodeEdit return @:privateAccess v.__gd.reinterpret();
	@:to
	inline function toWrapper():gd.CodeEdit {
		final v = new gd.CodeEdit(this);
		return v;
	}
}